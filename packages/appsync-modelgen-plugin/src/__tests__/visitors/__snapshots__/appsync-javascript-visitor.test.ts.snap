// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Javascript visitor with connected models of custom pk hasMany/belongsTo relation should generate correct declaration for hasMany bi-connection model when custom pk support is enabled 1`] = `
"import { ModelInit, MutableModel, __modelMeta__, CompositeIdentifier } from \\"@aws-amplify/datastore\\";
// @ts-ignore
import { LazyLoading, LazyLoadingDisabled, AsyncCollection, AsyncItem } from \\"@aws-amplify/datastore\\";





type EagerPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['customPostId', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly title: string;
  readonly comments?: (Comment | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['customPostId', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly title: string;
  readonly comments: AsyncCollection<Comment>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type Post = LazyLoading extends LazyLoadingDisabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post>) => Post) & {
  copyOf(source: Post, mutator: (draft: MutableModel<Post>) => MutableModel<Post> | void): Post;
}

type EagerComment = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Comment, ['customPostId', 'content']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly content: string;
  readonly post?: Post | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsCustomPostId?: string | null;
  readonly postCommentsTitle?: string | null;
}

type LazyComment = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Comment, ['customPostId', 'content']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly content: string;
  readonly post: AsyncItem<Post | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsCustomPostId?: string | null;
  readonly postCommentsTitle?: string | null;
}

export declare type Comment = LazyLoading extends LazyLoadingDisabled ? EagerComment : LazyComment

export declare const Comment: (new (init: ModelInit<Comment>) => Comment) & {
  copyOf(source: Comment, mutator: (draft: MutableModel<Comment>) => MutableModel<Comment> | void): Comment;
}"
`;

exports[`Javascript visitor with connected models of custom pk hasMany/belongsTo relation should generate correct declaration for hasMany uni-connection model when custom pk support is enabled 1`] = `
"import { ModelInit, MutableModel, __modelMeta__, CompositeIdentifier } from \\"@aws-amplify/datastore\\";
// @ts-ignore
import { LazyLoading, LazyLoadingDisabled, AsyncCollection } from \\"@aws-amplify/datastore\\";





type EagerPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['id', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly title: string;
  readonly comments?: (Comment | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['id', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly title: string;
  readonly comments: AsyncCollection<Comment>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type Post = LazyLoading extends LazyLoadingDisabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post>) => Post) & {
  copyOf(source: Post, mutator: (draft: MutableModel<Post>) => MutableModel<Post> | void): Post;
}

type EagerComment = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Comment, ['id', 'content']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsId?: string | null;
  readonly postCommentsTitle?: string | null;
}

type LazyComment = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Comment, ['id', 'content']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsId?: string | null;
  readonly postCommentsTitle?: string | null;
}

export declare type Comment = LazyLoading extends LazyLoadingDisabled ? EagerComment : LazyComment

export declare const Comment: (new (init: ModelInit<Comment>) => Comment) & {
  copyOf(source: Comment, mutator: (draft: MutableModel<Comment>) => MutableModel<Comment> | void): Comment;
}"
`;

exports[`Javascript visitor with connected models of custom pk hasOne/belongsTo relation should generate correct declaration when custom pk support is enabled 1`] = `
"import { ModelInit, MutableModel, __modelMeta__, CompositeIdentifier } from \\"@aws-amplify/datastore\\";
// @ts-ignore
import { LazyLoading, LazyLoadingDisabled, AsyncItem } from \\"@aws-amplify/datastore\\";





type EagerProject = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Project, ['id', 'name']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly team?: Team | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  readonly projectTeamName?: string | null;
}

type LazyProject = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Project, ['id', 'name']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly team: AsyncItem<Team | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  readonly projectTeamName?: string | null;
}

export declare type Project = LazyLoading extends LazyLoadingDisabled ? EagerProject : LazyProject

export declare const Project: (new (init: ModelInit<Project>) => Project) & {
  copyOf(source: Project, mutator: (draft: MutableModel<Project>) => MutableModel<Project> | void): Project;
}

type EagerTeam = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Team, ['id', 'name']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly project?: Project | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly teamProjectId?: string | null;
  readonly teamProjectName?: string | null;
}

type LazyTeam = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Team, ['id', 'name']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly name: string;
  readonly project: AsyncItem<Project | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly teamProjectId?: string | null;
  readonly teamProjectName?: string | null;
}

export declare type Team = LazyLoading extends LazyLoadingDisabled ? EagerTeam : LazyTeam

export declare const Team: (new (init: ModelInit<Team>) => Team) & {
  copyOf(source: Team, mutator: (draft: MutableModel<Team>) => MutableModel<Team> | void): Team;
}"
`;

exports[`Javascript visitor with connected models of custom pk manyToMany relation should generate correct declaration for manyToMany model when custom pk is enabled 1`] = `
"import { ModelInit, MutableModel, __modelMeta__, CompositeIdentifier, ManagedIdentifier } from \\"@aws-amplify/datastore\\";
// @ts-ignore
import { LazyLoading, LazyLoadingDisabled, AsyncCollection, AsyncItem } from \\"@aws-amplify/datastore\\";





type EagerPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['customPostId', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly title: string;
  readonly content?: string | null;
  readonly tags?: (PostTags | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyPost = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Post, ['customPostId', 'title']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customPostId: string;
  readonly title: string;
  readonly content?: string | null;
  readonly tags: AsyncCollection<PostTags>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type Post = LazyLoading extends LazyLoadingDisabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post>) => Post) & {
  copyOf(source: Post, mutator: (draft: MutableModel<Post>) => MutableModel<Post> | void): Post;
}

type EagerTag = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Tag, ['customTagId', 'label']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customTagId: string;
  readonly label: string;
  readonly posts?: (PostTags | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyTag = {
  readonly [__modelMeta__]: {
    identifier: CompositeIdentifier<Tag, ['customTagId', 'label']>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly customTagId: string;
  readonly label: string;
  readonly posts: AsyncCollection<PostTags>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type Tag = LazyLoading extends LazyLoadingDisabled ? EagerTag : LazyTag

export declare const Tag: (new (init: ModelInit<Tag>) => Tag) & {
  copyOf(source: Tag, mutator: (draft: MutableModel<Tag>) => MutableModel<Tag> | void): Tag;
}

type EagerPostTags = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<PostTags, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly postCustomPostId?: string | null;
  readonly posttitle?: string | null;
  readonly tagCustomTagId?: string | null;
  readonly taglabel?: string | null;
  readonly post: Post;
  readonly tag: Tag;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

type LazyPostTags = {
  readonly [__modelMeta__]: {
    identifier: ManagedIdentifier<PostTags, 'id'>;
    readOnlyFields: 'createdAt' | 'updatedAt';
  };
  readonly id: string;
  readonly postCustomPostId?: string | null;
  readonly posttitle?: string | null;
  readonly tagCustomTagId?: string | null;
  readonly taglabel?: string | null;
  readonly post: AsyncItem<Post>;
  readonly tag: AsyncItem<Tag>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
}

export declare type PostTags = LazyLoading extends LazyLoadingDisabled ? EagerPostTags : LazyPostTags

export declare const PostTags: (new (init: ModelInit<PostTags>) => PostTags) & {
  copyOf(source: PostTags, mutator: (draft: MutableModel<PostTags>) => MutableModel<PostTags> | void): PostTags;
}"
`;
