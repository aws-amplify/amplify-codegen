// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSyncModelVisitor Custom primary key for connected model tests Should generate corect model file for hasMany uni relation with composite primary key when CPK is enabled 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Post type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Posts\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"id\\",\\"title\\"})
public final class Post implements Model {
  public static final QueryField ID = field(\\"Post\\", \\"id\\");
  public static final QueryField TITLE = field(\\"Post\\", \\"title\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Comment\\") @HasMany(associatedWith = \\"postCommentsId\\", type = Comment.class) List<Comment> comments = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private PostIdentifier postIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public PostIdentifier resolveIdentifier() {
    if (postIdentifier == null) {
      this.postIdentifier = new PostIdentifier(id, title);
    }
    return postIdentifier;
  }
  
  public String getId() {
      return id;
  }
  
  public String getTitle() {
      return title;
  }
  
  public List<Comment> getComments() {
      return comments;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Post(String id, String title) {
    this.id = id;
    this.title = title;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Post post = (Post) obj;
      return ObjectsCompat.equals(getId(), post.getId()) &&
              ObjectsCompat.equals(getTitle(), post.getTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), post.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), post.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTitle())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Post {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static IdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      title);
  }
  public interface IdStep {
    TitleStep id(String id);
  }
  

  public interface TitleStep {
    BuildStep title(String title);
  }
  

  public interface BuildStep {
    Post build();
  }
  

  public static class Builder implements IdStep, TitleStep, BuildStep {
    private String id;
    private String title;
    @Override
     public Post build() {
        
        return new Post(
          id,
          title);
    }
    
    @Override
     public TitleStep id(String id) {
        Objects.requireNonNull(id);
        this.id = id;
        return this;
    }
    
    @Override
     public BuildStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String title) {
      super.id(id)
        .title(title);
    }
    
    @Override
     public CopyOfBuilder id(String id) {
      return (CopyOfBuilder) super.id(id);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
  }
  

  public static class PostIdentifier extends ModelIdentifier<Post> {
    private static final long serialVersionUID = 1L;
    public PostIdentifier(String id, String title) {
      super(id, title);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key for connected model tests Should generate corect model file for hasMany uni relation with composite primary key when CPK is enabled 2`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Comment type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Comments\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"id\\",\\"content\\"})
public final class Comment implements Model {
  public static final QueryField ID = field(\\"Comment\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"Comment\\", \\"content\\");
  public static final QueryField POST_COMMENTS_ID = field(\\"Comment\\", \\"postCommentsId\\");
  public static final QueryField POST_COMMENTS_TITLE = field(\\"Comment\\", \\"postCommentsTitle\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String postCommentsId;
  private final @ModelField(targetType=\\"String\\") String postCommentsTitle;
  private CommentIdentifier commentIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public CommentIdentifier resolveIdentifier() {
    if (commentIdentifier == null) {
      this.commentIdentifier = new CommentIdentifier(id, content);
    }
    return commentIdentifier;
  }
  
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getPostCommentsId() {
      return postCommentsId;
  }
  
  public String getPostCommentsTitle() {
      return postCommentsTitle;
  }
  
  private Comment(String id, String content, String postCommentsId, String postCommentsTitle) {
    this.id = id;
    this.content = content;
    this.postCommentsId = postCommentsId;
    this.postCommentsTitle = postCommentsTitle;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Comment comment = (Comment) obj;
      return ObjectsCompat.equals(getId(), comment.getId()) &&
              ObjectsCompat.equals(getContent(), comment.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), comment.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), comment.getUpdatedAt()) &&
              ObjectsCompat.equals(getPostCommentsId(), comment.getPostCommentsId()) &&
              ObjectsCompat.equals(getPostCommentsTitle(), comment.getPostCommentsTitle());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getPostCommentsId())
      .append(getPostCommentsTitle())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Comment {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"postCommentsId=\\" + String.valueOf(getPostCommentsId()) + \\", \\")
      .append(\\"postCommentsTitle=\\" + String.valueOf(getPostCommentsTitle()))
      .append(\\"}\\")
      .toString();
  }
  
  public static IdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content,
      postCommentsId,
      postCommentsTitle);
  }
  public interface IdStep {
    ContentStep id(String id);
  }
  

  public interface ContentStep {
    BuildStep content(String content);
  }
  

  public interface BuildStep {
    Comment build();
    BuildStep postCommentsId(String postCommentsId);
    BuildStep postCommentsTitle(String postCommentsTitle);
  }
  

  public static class Builder implements IdStep, ContentStep, BuildStep {
    private String id;
    private String content;
    private String postCommentsId;
    private String postCommentsTitle;
    @Override
     public Comment build() {
        
        return new Comment(
          id,
          content,
          postCommentsId,
          postCommentsTitle);
    }
    
    @Override
     public ContentStep id(String id) {
        Objects.requireNonNull(id);
        this.id = id;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep postCommentsId(String postCommentsId) {
        this.postCommentsId = postCommentsId;
        return this;
    }
    
    @Override
     public BuildStep postCommentsTitle(String postCommentsTitle) {
        this.postCommentsTitle = postCommentsTitle;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content, String postCommentsId, String postCommentsTitle) {
      super.id(id)
        .content(content)
        .postCommentsId(postCommentsId)
        .postCommentsTitle(postCommentsTitle);
    }
    
    @Override
     public CopyOfBuilder id(String id) {
      return (CopyOfBuilder) super.id(id);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder postCommentsId(String postCommentsId) {
      return (CopyOfBuilder) super.postCommentsId(postCommentsId);
    }
    
    @Override
     public CopyOfBuilder postCommentsTitle(String postCommentsTitle) {
      return (CopyOfBuilder) super.postCommentsTitle(postCommentsTitle);
    }
  }
  

  public static class CommentIdentifier extends ModelIdentifier<Comment> {
    private static final long serialVersionUID = 1L;
    public CommentIdentifier(String id, String content) {
      super(id, content);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key for connected model tests Should generate correct model file for hasOne & belongsTo relation with composite primary key when CPK is enabled 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Project type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Projects\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"projectId\\",\\"name\\"})
public final class Project implements Model {
  public static final QueryField PROJECT_ID = field(\\"Project\\", \\"projectId\\");
  public static final QueryField NAME = field(\\"Project\\", \\"name\\");
  public static final QueryField PROJECT_TEAM_TEAM_ID = field(\\"Project\\", \\"projectTeamTeamId\\");
  public static final QueryField PROJECT_TEAM_NAME = field(\\"Project\\", \\"projectTeamName\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String projectId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Team\\") @HasOne(associatedWith = \\"project\\", type = Team.class) Team team = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String projectTeamTeamId;
  private final @ModelField(targetType=\\"String\\") String projectTeamName;
  private ProjectIdentifier projectIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public ProjectIdentifier resolveIdentifier() {
    if (projectIdentifier == null) {
      this.projectIdentifier = new ProjectIdentifier(projectId, name);
    }
    return projectIdentifier;
  }
  
  public String getProjectId() {
      return projectId;
  }
  
  public String getName() {
      return name;
  }
  
  public Team getTeam() {
      return team;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getProjectTeamTeamId() {
      return projectTeamTeamId;
  }
  
  public String getProjectTeamName() {
      return projectTeamName;
  }
  
  private Project(String projectId, String name, String projectTeamTeamId, String projectTeamName) {
    this.projectId = projectId;
    this.name = name;
    this.projectTeamTeamId = projectTeamTeamId;
    this.projectTeamName = projectTeamName;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Project project = (Project) obj;
      return ObjectsCompat.equals(getProjectId(), project.getProjectId()) &&
              ObjectsCompat.equals(getName(), project.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), project.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), project.getUpdatedAt()) &&
              ObjectsCompat.equals(getProjectTeamTeamId(), project.getProjectTeamTeamId()) &&
              ObjectsCompat.equals(getProjectTeamName(), project.getProjectTeamName());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getProjectId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getProjectTeamTeamId())
      .append(getProjectTeamName())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Project {\\")
      .append(\\"projectId=\\" + String.valueOf(getProjectId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"projectTeamTeamId=\\" + String.valueOf(getProjectTeamTeamId()) + \\", \\")
      .append(\\"projectTeamName=\\" + String.valueOf(getProjectTeamName()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ProjectIdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(projectId,
      name,
      projectTeamTeamId,
      projectTeamName);
  }
  public interface ProjectIdStep {
    NameStep projectId(String projectId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Project build();
    BuildStep projectTeamTeamId(String projectTeamTeamId);
    BuildStep projectTeamName(String projectTeamName);
  }
  

  public static class Builder implements ProjectIdStep, NameStep, BuildStep {
    private String projectId;
    private String name;
    private String projectTeamTeamId;
    private String projectTeamName;
    @Override
     public Project build() {
        
        return new Project(
          projectId,
          name,
          projectTeamTeamId,
          projectTeamName);
    }
    
    @Override
     public NameStep projectId(String projectId) {
        Objects.requireNonNull(projectId);
        this.projectId = projectId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep projectTeamTeamId(String projectTeamTeamId) {
        this.projectTeamTeamId = projectTeamTeamId;
        return this;
    }
    
    @Override
     public BuildStep projectTeamName(String projectTeamName) {
        this.projectTeamName = projectTeamName;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String projectId, String name, String projectTeamTeamId, String projectTeamName) {
      super.projectId(projectId)
        .name(name)
        .projectTeamTeamId(projectTeamTeamId)
        .projectTeamName(projectTeamName);
    }
    
    @Override
     public CopyOfBuilder projectId(String projectId) {
      return (CopyOfBuilder) super.projectId(projectId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder projectTeamTeamId(String projectTeamTeamId) {
      return (CopyOfBuilder) super.projectTeamTeamId(projectTeamTeamId);
    }
    
    @Override
     public CopyOfBuilder projectTeamName(String projectTeamName) {
      return (CopyOfBuilder) super.projectTeamName(projectTeamName);
    }
  }
  

  public static class ProjectIdentifier extends ModelIdentifier<Project> {
    private static final long serialVersionUID = 1L;
    public ProjectIdentifier(String projectId, String name) {
      super(projectId, name);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key for connected model tests Should generate correct model file for hasOne & belongsTo relation with composite primary key when CPK is enabled 2`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Team type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Teams\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"teamId\\",\\"name\\"})
public final class Team implements Model {
  public static final QueryField TEAM_ID = field(\\"Team\\", \\"teamId\\");
  public static final QueryField NAME = field(\\"Team\\", \\"name\\");
  public static final QueryField PROJECT = field(\\"Team\\", \\"teamProjectProjectId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String teamId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Project\\") @BelongsTo(targetName = \\"teamProjectProjectId\\", targetNames = {\\"teamProjectProjectId\\", \\"teamProjectName\\"}, type = Project.class) Project project;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private TeamIdentifier teamIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public TeamIdentifier resolveIdentifier() {
    if (teamIdentifier == null) {
      this.teamIdentifier = new TeamIdentifier(teamId, name);
    }
    return teamIdentifier;
  }
  
  public String getTeamId() {
      return teamId;
  }
  
  public String getName() {
      return name;
  }
  
  public Project getProject() {
      return project;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Team(String teamId, String name, Project project) {
    this.teamId = teamId;
    this.name = name;
    this.project = project;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Team team = (Team) obj;
      return ObjectsCompat.equals(getTeamId(), team.getTeamId()) &&
              ObjectsCompat.equals(getName(), team.getName()) &&
              ObjectsCompat.equals(getProject(), team.getProject()) &&
              ObjectsCompat.equals(getCreatedAt(), team.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), team.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getTeamId())
      .append(getName())
      .append(getProject())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Team {\\")
      .append(\\"teamId=\\" + String.valueOf(getTeamId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"project=\\" + String.valueOf(getProject()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TeamIdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(teamId,
      name,
      project);
  }
  public interface TeamIdStep {
    NameStep teamId(String teamId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Team build();
    BuildStep project(Project project);
  }
  

  public static class Builder implements TeamIdStep, NameStep, BuildStep {
    private String teamId;
    private String name;
    private Project project;
    @Override
     public Team build() {
        
        return new Team(
          teamId,
          name,
          project);
    }
    
    @Override
     public NameStep teamId(String teamId) {
        Objects.requireNonNull(teamId);
        this.teamId = teamId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep project(Project project) {
        this.project = project;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String teamId, String name, Project project) {
      super.teamId(teamId)
        .name(name)
        .project(project);
    }
    
    @Override
     public CopyOfBuilder teamId(String teamId) {
      return (CopyOfBuilder) super.teamId(teamId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder project(Project project) {
      return (CopyOfBuilder) super.project(project);
    }
  }
  

  public static class TeamIdentifier extends ModelIdentifier<Team> {
    private static final long serialVersionUID = 1L;
    public TeamIdentifier(String teamId, String name) {
      super(teamId, name);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key tests Should generate correct model file for composite key type with id field defined 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the BlogOwnerWithCustomPKS type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"BlogOwnerWithCustomPKS\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"name\\",\\"wea\\"})
public final class BlogOwnerWithCustomPKS implements Model {
  public static final QueryField ID = field(\\"BlogOwnerWithCustomPKS\\", \\"id\\");
  public static final QueryField NAME = field(\\"BlogOwnerWithCustomPKS\\", \\"name\\");
  public static final QueryField WEA = field(\\"BlogOwnerWithCustomPKS\\", \\"wea\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String wea;
  private final @ModelField(targetType=\\"Blog\\") @HasMany(associatedWith = \\"blogOwner\\", type = Blog.class) List<Blog> blogs = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private BlogOwnerWithCustomPKSIdentifier blogOwnerWithCustomPKSIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public BlogOwnerWithCustomPKSIdentifier resolveIdentifier() {
    if (blogOwnerWithCustomPKSIdentifier == null) {
      this.blogOwnerWithCustomPKSIdentifier = new BlogOwnerWithCustomPKSIdentifier(name, wea);
    }
    return blogOwnerWithCustomPKSIdentifier;
  }
  
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getWea() {
      return wea;
  }
  
  public List<Blog> getBlogs() {
      return blogs;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private BlogOwnerWithCustomPKS(String id, String name, String wea) {
    this.id = id;
    this.name = name;
    this.wea = wea;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      BlogOwnerWithCustomPKS blogOwnerWithCustomPks = (BlogOwnerWithCustomPKS) obj;
      return ObjectsCompat.equals(getId(), blogOwnerWithCustomPks.getId()) &&
              ObjectsCompat.equals(getName(), blogOwnerWithCustomPks.getName()) &&
              ObjectsCompat.equals(getWea(), blogOwnerWithCustomPks.getWea()) &&
              ObjectsCompat.equals(getCreatedAt(), blogOwnerWithCustomPks.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), blogOwnerWithCustomPks.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getWea())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"BlogOwnerWithCustomPKS {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"wea=\\" + String.valueOf(getWea()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static IdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      wea);
  }
  public interface IdStep {
    NameStep id(String id);
  }
  

  public interface NameStep {
    WeaStep name(String name);
  }
  

  public interface WeaStep {
    BuildStep wea(String wea);
  }
  

  public interface BuildStep {
    BlogOwnerWithCustomPKS build();
  }
  

  public static class Builder implements IdStep, NameStep, WeaStep, BuildStep {
    private String id;
    private String name;
    private String wea;
    @Override
     public BlogOwnerWithCustomPKS build() {
        
        return new BlogOwnerWithCustomPKS(
          id,
          name,
          wea);
    }
    
    @Override
     public NameStep id(String id) {
        Objects.requireNonNull(id);
        this.id = id;
        return this;
    }
    
    @Override
     public WeaStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep wea(String wea) {
        Objects.requireNonNull(wea);
        this.wea = wea;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String wea) {
      super.id(id)
        .name(name)
        .wea(wea);
    }
    
    @Override
     public CopyOfBuilder id(String id) {
      return (CopyOfBuilder) super.id(id);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder wea(String wea) {
      return (CopyOfBuilder) super.wea(wea);
    }
  }
  

  public static class BlogOwnerWithCustomPKSIdentifier extends ModelIdentifier<BlogOwnerWithCustomPKS> {
    private static final long serialVersionUID = 1L;
    public BlogOwnerWithCustomPKSIdentifier(String name, String wea) {
      super(name, wea);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key tests Should generate correct model file for composite key type without id field defined 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Comment type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Comments\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"title\\",\\"content\\",\\"likes\\"})
public final class Comment implements Model {
  public static final QueryField POST = field(\\"Comment\\", \\"postCommentsPostId\\");
  public static final QueryField TITLE = field(\\"Comment\\", \\"title\\");
  public static final QueryField CONTENT = field(\\"Comment\\", \\"content\\");
  public static final QueryField LIKES = field(\\"Comment\\", \\"likes\\");
  public static final QueryField DESCRIPTION = field(\\"Comment\\", \\"description\\");
  private final @ModelField(targetType=\\"Post\\") @BelongsTo(targetName = \\"postCommentsPostId\\", targetNames = {\\"postCommentsPostId\\"}, type = Post.class) Post post;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"Int\\", isRequired = true) Integer likes;
  private final @ModelField(targetType=\\"String\\") String description;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private CommentIdentifier commentIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public CommentIdentifier resolveIdentifier() {
    if (commentIdentifier == null) {
      this.commentIdentifier = new CommentIdentifier(title, content, likes);
    }
    return commentIdentifier;
  }
  
  public Post getPost() {
      return post;
  }
  
  public String getTitle() {
      return title;
  }
  
  public String getContent() {
      return content;
  }
  
  public Integer getLikes() {
      return likes;
  }
  
  public String getDescription() {
      return description;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Comment(Post post, String title, String content, Integer likes, String description) {
    this.post = post;
    this.title = title;
    this.content = content;
    this.likes = likes;
    this.description = description;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Comment comment = (Comment) obj;
      return ObjectsCompat.equals(getPost(), comment.getPost()) &&
              ObjectsCompat.equals(getTitle(), comment.getTitle()) &&
              ObjectsCompat.equals(getContent(), comment.getContent()) &&
              ObjectsCompat.equals(getLikes(), comment.getLikes()) &&
              ObjectsCompat.equals(getDescription(), comment.getDescription()) &&
              ObjectsCompat.equals(getCreatedAt(), comment.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), comment.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getPost())
      .append(getTitle())
      .append(getContent())
      .append(getLikes())
      .append(getDescription())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Comment {\\")
      .append(\\"post=\\" + String.valueOf(getPost()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"likes=\\" + String.valueOf(getLikes()) + \\", \\")
      .append(\\"description=\\" + String.valueOf(getDescription()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TitleStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(post,
      title,
      content,
      likes,
      description);
  }
  public interface TitleStep {
    ContentStep title(String title);
  }
  

  public interface ContentStep {
    LikesStep content(String content);
  }
  

  public interface LikesStep {
    BuildStep likes(Integer likes);
  }
  

  public interface BuildStep {
    Comment build();
    BuildStep post(Post post);
    BuildStep description(String description);
  }
  

  public static class Builder implements TitleStep, ContentStep, LikesStep, BuildStep {
    private String title;
    private String content;
    private Integer likes;
    private Post post;
    private String description;
    @Override
     public Comment build() {
        
        return new Comment(
          post,
          title,
          content,
          likes,
          description);
    }
    
    @Override
     public ContentStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public LikesStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep likes(Integer likes) {
        Objects.requireNonNull(likes);
        this.likes = likes;
        return this;
    }
    
    @Override
     public BuildStep post(Post post) {
        this.post = post;
        return this;
    }
    
    @Override
     public BuildStep description(String description) {
        this.description = description;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(Post post, String title, String content, Integer likes, String description) {
      super.title(title)
        .content(content)
        .likes(likes)
        .post(post)
        .description(description);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder likes(Integer likes) {
      return (CopyOfBuilder) super.likes(likes);
    }
    
    @Override
     public CopyOfBuilder post(Post post) {
      return (CopyOfBuilder) super.post(post);
    }
    
    @Override
     public CopyOfBuilder description(String description) {
      return (CopyOfBuilder) super.description(description);
    }
  }
  

  public static class CommentIdentifier extends ModelIdentifier<Comment> {
    private static final long serialVersionUID = 1L;
    public CommentIdentifier(String title, String content, Integer likes) {
      super(title, content, likes);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key tests Should generate correct model file for custom primary key type 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Post type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Posts\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"postId\\"})
public final class Post implements Model {
  public static final QueryField POST_ID = field(\\"Post\\", \\"postId\\");
  public static final QueryField TITLE = field(\\"Post\\", \\"title\\");
  public static final QueryField RATING = field(\\"Post\\", \\"rating\\");
  public static final QueryField CREATED = field(\\"Post\\", \\"created\\");
  public static final QueryField BLOG_ID = field(\\"Post\\", \\"blogID\\");
  public static final QueryField BLOG = field(\\"Post\\", \\"blogPostsId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String postId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Int\\", isRequired = true) Integer rating;
  private final @ModelField(targetType=\\"AWSDateTime\\") Temporal.DateTime created;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String blogID;
  private final @ModelField(targetType=\\"Blog\\") @BelongsTo(targetName = \\"blogPostsId\\", targetNames = {\\"blogPostsId\\"}, type = Blog.class) Blog blog;
  private final @ModelField(targetType=\\"Comment\\") @HasMany(associatedWith = \\"post\\", type = Comment.class) List<Comment> comments = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public String resolveIdentifier() {
    return postId;
  }
  
  public String getPostId() {
      return postId;
  }
  
  public String getTitle() {
      return title;
  }
  
  public Integer getRating() {
      return rating;
  }
  
  public Temporal.DateTime getCreated() {
      return created;
  }
  
  public String getBlogId() {
      return blogID;
  }
  
  public Blog getBlog() {
      return blog;
  }
  
  public List<Comment> getComments() {
      return comments;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Post(String postId, String title, Integer rating, Temporal.DateTime created, String blogID, Blog blog) {
    this.postId = postId;
    this.title = title;
    this.rating = rating;
    this.created = created;
    this.blogID = blogID;
    this.blog = blog;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Post post = (Post) obj;
      return ObjectsCompat.equals(getPostId(), post.getPostId()) &&
              ObjectsCompat.equals(getTitle(), post.getTitle()) &&
              ObjectsCompat.equals(getRating(), post.getRating()) &&
              ObjectsCompat.equals(getCreated(), post.getCreated()) &&
              ObjectsCompat.equals(getBlogId(), post.getBlogId()) &&
              ObjectsCompat.equals(getBlog(), post.getBlog()) &&
              ObjectsCompat.equals(getCreatedAt(), post.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), post.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getPostId())
      .append(getTitle())
      .append(getRating())
      .append(getCreated())
      .append(getBlogId())
      .append(getBlog())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Post {\\")
      .append(\\"postId=\\" + String.valueOf(getPostId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"rating=\\" + String.valueOf(getRating()) + \\", \\")
      .append(\\"created=\\" + String.valueOf(getCreated()) + \\", \\")
      .append(\\"blogID=\\" + String.valueOf(getBlogId()) + \\", \\")
      .append(\\"blog=\\" + String.valueOf(getBlog()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static PostIdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(postId,
      title,
      rating,
      created,
      blogID,
      blog);
  }
  public interface PostIdStep {
    TitleStep postId(String postId);
  }
  

  public interface TitleStep {
    RatingStep title(String title);
  }
  

  public interface RatingStep {
    BlogIdStep rating(Integer rating);
  }
  

  public interface BlogIdStep {
    BuildStep blogId(String blogId);
  }
  

  public interface BuildStep {
    Post build();
    BuildStep created(Temporal.DateTime created);
    BuildStep blog(Blog blog);
  }
  

  public static class Builder implements PostIdStep, TitleStep, RatingStep, BlogIdStep, BuildStep {
    private String postId;
    private String title;
    private Integer rating;
    private String blogID;
    private Temporal.DateTime created;
    private Blog blog;
    @Override
     public Post build() {
        
        return new Post(
          postId,
          title,
          rating,
          created,
          blogID,
          blog);
    }
    
    @Override
     public TitleStep postId(String postId) {
        Objects.requireNonNull(postId);
        this.postId = postId;
        return this;
    }
    
    @Override
     public RatingStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public BlogIdStep rating(Integer rating) {
        Objects.requireNonNull(rating);
        this.rating = rating;
        return this;
    }
    
    @Override
     public BuildStep blogId(String blogId) {
        Objects.requireNonNull(blogId);
        this.blogID = blogId;
        return this;
    }
    
    @Override
     public BuildStep created(Temporal.DateTime created) {
        this.created = created;
        return this;
    }
    
    @Override
     public BuildStep blog(Blog blog) {
        this.blog = blog;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String postId, String title, Integer rating, Temporal.DateTime created, String blogId, Blog blog) {
      super.postId(postId)
        .title(title)
        .rating(rating)
        .blogId(blogId)
        .created(created)
        .blog(blog);
    }
    
    @Override
     public CopyOfBuilder postId(String postId) {
      return (CopyOfBuilder) super.postId(postId);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder rating(Integer rating) {
      return (CopyOfBuilder) super.rating(rating);
    }
    
    @Override
     public CopyOfBuilder blogId(String blogId) {
      return (CopyOfBuilder) super.blogId(blogId);
    }
    
    @Override
     public CopyOfBuilder created(Temporal.DateTime created) {
      return (CopyOfBuilder) super.created(created);
    }
    
    @Override
     public CopyOfBuilder blog(Blog blog) {
      return (CopyOfBuilder) super.blog(blog);
    }
  }
  

  public static class PostIdentifier extends ModelIdentifier<Post> {
    private static final long serialVersionUID = 1L;
    public PostIdentifier(String postId) {
      super(postId);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Custom primary key tests Should generate correct model file for default id as primary key type 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Blog type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Blogs\\", type = Model.Type.USER, version = 1)
public final class Blog implements Model {
  public static final QueryField ID = field(\\"Blog\\", \\"id\\");
  public static final QueryField NAME = field(\\"Blog\\", \\"name\\");
  public static final QueryField BLOG_OWNER = field(\\"Blog\\", \\"blogOwnerWithCustomPKSBlogsName\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"BlogOwnerWithCustomPKS\\", isRequired = true) @BelongsTo(targetName = \\"blogOwnerWithCustomPKSBlogsName\\", targetNames = {\\"blogOwnerWithCustomPKSBlogsName\\", \\"blogOwnerWithCustomPKSBlogsWea\\"}, type = BlogOwnerWithCustomPKS.class) BlogOwnerWithCustomPKS blogOwner;
  private final @ModelField(targetType=\\"Post\\") @HasMany(associatedWith = \\"blog\\", type = Post.class) List<Post> posts = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public String resolveIdentifier() {
    return id;
  }
  
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public BlogOwnerWithCustomPKS getBlogOwner() {
      return blogOwner;
  }
  
  public List<Post> getPosts() {
      return posts;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Blog(String id, String name, BlogOwnerWithCustomPKS blogOwner) {
    this.id = id;
    this.name = name;
    this.blogOwner = blogOwner;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Blog blog = (Blog) obj;
      return ObjectsCompat.equals(getId(), blog.getId()) &&
              ObjectsCompat.equals(getName(), blog.getName()) &&
              ObjectsCompat.equals(getBlogOwner(), blog.getBlogOwner()) &&
              ObjectsCompat.equals(getCreatedAt(), blog.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), blog.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBlogOwner())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Blog {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"blogOwner=\\" + String.valueOf(getBlogOwner()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static NameStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Blog justId(String id) {
    return new Blog(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      blogOwner);
  }
  public interface NameStep {
    BlogOwnerStep name(String name);
  }
  

  public interface BlogOwnerStep {
    BuildStep blogOwner(BlogOwnerWithCustomPKS blogOwner);
  }
  

  public interface BuildStep {
    Blog build();
    BuildStep id(String id);
  }
  

  public static class Builder implements NameStep, BlogOwnerStep, BuildStep {
    private String id;
    private String name;
    private BlogOwnerWithCustomPKS blogOwner;
    @Override
     public Blog build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Blog(
          id,
          name,
          blogOwner);
    }
    
    @Override
     public BlogOwnerStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep blogOwner(BlogOwnerWithCustomPKS blogOwner) {
        Objects.requireNonNull(blogOwner);
        this.blogOwner = blogOwner;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, BlogOwnerWithCustomPKS blogOwner) {
      super.id(id);
      super.name(name)
        .blogOwner(blogOwner);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder blogOwner(BlogOwnerWithCustomPKS blogOwner) {
      return (CopyOfBuilder) super.blogOwner(blogOwner);
    }
  }
  

  public static class BlogIdentifier extends ModelIdentifier<Blog> {
    private static final long serialVersionUID = 1L;
    public BlogIdentifier(String id) {
      super(id);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Many To Many V2 Tests Should generate the intermediate model successfully 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Post type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Posts\\")
public final class Post implements Model {
  public static final QueryField ID = field(\\"Post\\", \\"id\\");
  public static final QueryField TITLE = field(\\"Post\\", \\"title\\");
  public static final QueryField CONTENT = field(\\"Post\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"PostTags\\") @HasMany(associatedWith = \\"post\\", type = PostTags.class) List<PostTags> tags = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getTitle() {
      return title;
  }
  
  public String getContent() {
      return content;
  }
  
  public List<PostTags> getTags() {
      return tags;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Post(String id, String title, String content) {
    this.id = id;
    this.title = title;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Post post = (Post) obj;
      return ObjectsCompat.equals(getId(), post.getId()) &&
              ObjectsCompat.equals(getTitle(), post.getTitle()) &&
              ObjectsCompat.equals(getContent(), post.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), post.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), post.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTitle())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Post {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TitleStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Post justId(String id) {
    return new Post(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      title,
      content);
  }
  public interface TitleStep {
    BuildStep title(String title);
  }
  

  public interface BuildStep {
    Post build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements TitleStep, BuildStep {
    private String id;
    private String title;
    private String content;
    @Override
     public Post build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Post(
          id,
          title,
          content);
    }
    
    @Override
     public BuildStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String title, String content) {
      super.id(id);
      super.title(title)
        .content(content);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the Tag type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Tags\\")
public final class Tag implements Model {
  public static final QueryField ID = field(\\"Tag\\", \\"id\\");
  public static final QueryField LABEL = field(\\"Tag\\", \\"label\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String label;
  private final @ModelField(targetType=\\"PostTags\\") @HasMany(associatedWith = \\"tag\\", type = PostTags.class) List<PostTags> posts = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getLabel() {
      return label;
  }
  
  public List<PostTags> getPosts() {
      return posts;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Tag(String id, String label) {
    this.id = id;
    this.label = label;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Tag tag = (Tag) obj;
      return ObjectsCompat.equals(getId(), tag.getId()) &&
              ObjectsCompat.equals(getLabel(), tag.getLabel()) &&
              ObjectsCompat.equals(getCreatedAt(), tag.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), tag.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getLabel())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Tag {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"label=\\" + String.valueOf(getLabel()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static LabelStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Tag justId(String id) {
    return new Tag(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      label);
  }
  public interface LabelStep {
    BuildStep label(String label);
  }
  

  public interface BuildStep {
    Tag build();
    BuildStep id(String id);
  }
  

  public static class Builder implements LabelStep, BuildStep {
    private String id;
    private String label;
    @Override
     public Tag build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Tag(
          id,
          label);
    }
    
    @Override
     public BuildStep label(String label) {
        Objects.requireNonNull(label);
        this.label = label;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String label) {
      super.id(id);
      super.label(label);
    }
    
    @Override
     public CopyOfBuilder label(String label) {
      return (CopyOfBuilder) super.label(label);
    }
  }
  
}

/** This is an auto generated class representing the PostTags type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"PostTags\\")
@Index(name = \\"byPost\\", fields = {\\"postID\\"})
@Index(name = \\"byTag\\", fields = {\\"tagID\\"})
public final class PostTags implements Model {
  public static final QueryField ID = field(\\"PostTags\\", \\"id\\");
  public static final QueryField POST = field(\\"PostTags\\", \\"postID\\");
  public static final QueryField TAG = field(\\"PostTags\\", \\"tagID\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"Post\\", isRequired = true) @BelongsTo(targetName = \\"postID\\", type = Post.class) Post post;
  private final @ModelField(targetType=\\"Tag\\", isRequired = true) @BelongsTo(targetName = \\"tagID\\", type = Tag.class) Tag tag;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public Post getPost() {
      return post;
  }
  
  public Tag getTag() {
      return tag;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private PostTags(String id, Post post, Tag tag) {
    this.id = id;
    this.post = post;
    this.tag = tag;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      PostTags postTags = (PostTags) obj;
      return ObjectsCompat.equals(getId(), postTags.getId()) &&
              ObjectsCompat.equals(getPost(), postTags.getPost()) &&
              ObjectsCompat.equals(getTag(), postTags.getTag()) &&
              ObjectsCompat.equals(getCreatedAt(), postTags.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), postTags.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getPost())
      .append(getTag())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"PostTags {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"post=\\" + String.valueOf(getPost()) + \\", \\")
      .append(\\"tag=\\" + String.valueOf(getTag()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static PostStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static PostTags justId(String id) {
    return new PostTags(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      post,
      tag);
  }
  public interface PostStep {
    TagStep post(Post post);
  }
  

  public interface TagStep {
    BuildStep tag(Tag tag);
  }
  

  public interface BuildStep {
    PostTags build();
    BuildStep id(String id);
  }
  

  public static class Builder implements PostStep, TagStep, BuildStep {
    private String id;
    private Post post;
    private Tag tag;
    @Override
     public PostTags build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new PostTags(
          id,
          post,
          tag);
    }
    
    @Override
     public TagStep post(Post post) {
        Objects.requireNonNull(post);
        this.post = post;
        return this;
    }
    
    @Override
     public BuildStep tag(Tag tag) {
        Objects.requireNonNull(tag);
        this.tag = tag;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, Post post, Tag tag) {
      super.id(id);
      super.post(post)
        .tag(tag);
    }
    
    @Override
     public CopyOfBuilder post(Post post) {
      return (CopyOfBuilder) super.post(post);
    }
    
    @Override
     public CopyOfBuilder tag(Tag tag) {
      return (CopyOfBuilder) super.tag(tag);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with custom claims 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the customClaim type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"customClaims\\", authRules = {
  @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"user_id\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class customClaim implements Model {
  public static final QueryField ID = field(\\"customClaim\\", \\"id\\");
  public static final QueryField NAME = field(\\"customClaim\\", \\"name\\");
  public static final QueryField BAR = field(\\"customClaim\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private customClaim(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      customClaim customClaim = (customClaim) obj;
      return ObjectsCompat.equals(getId(), customClaim.getId()) &&
              ObjectsCompat.equals(getName(), customClaim.getName()) &&
              ObjectsCompat.equals(getBar(), customClaim.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), customClaim.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), customClaim.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"customClaim {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static customClaim justId(String id) {
    return new customClaim(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    customClaim build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public customClaim build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new customClaim(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with custom group claims 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the customClaim type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"customClaims\\", authRules = {
  @AuthRule(allow = AuthStrategy.GROUPS, groupClaim = \\"user_groups\\", groups = { \\"Moderator\\" }, provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class customClaim implements Model {
  public static final QueryField ID = field(\\"customClaim\\", \\"id\\");
  public static final QueryField NAME = field(\\"customClaim\\", \\"name\\");
  public static final QueryField BAR = field(\\"customClaim\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private customClaim(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      customClaim customClaim = (customClaim) obj;
      return ObjectsCompat.equals(getId(), customClaim.getId()) &&
              ObjectsCompat.equals(getName(), customClaim.getName()) &&
              ObjectsCompat.equals(getBar(), customClaim.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), customClaim.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), customClaim.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"customClaim {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static customClaim justId(String id) {
    return new customClaim(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    customClaim build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public customClaim build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new customClaim(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with default field auth 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Employee type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Employees\\", authRules = {
  @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"cognito:username\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ }),
  @AuthRule(allow = AuthStrategy.GROUPS, groupClaim = \\"cognito:groups\\", groups = { \\"Admins\\" }, provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class Employee implements Model {
  public static final QueryField ID = field(\\"Employee\\", \\"id\\");
  public static final QueryField NAME = field(\\"Employee\\", \\"name\\");
  public static final QueryField ADDRESS = field(\\"Employee\\", \\"address\\");
  public static final QueryField SSN = field(\\"Employee\\", \\"ssn\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String address;
  private final @ModelField(targetType=\\"String\\", authRules = {
    @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"cognito:username\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
  }) String ssn;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getAddress() {
      return address;
  }
  
  public String getSsn() {
      return ssn;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Employee(String id, String name, String address, String ssn) {
    this.id = id;
    this.name = name;
    this.address = address;
    this.ssn = ssn;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Employee employee = (Employee) obj;
      return ObjectsCompat.equals(getId(), employee.getId()) &&
              ObjectsCompat.equals(getName(), employee.getName()) &&
              ObjectsCompat.equals(getAddress(), employee.getAddress()) &&
              ObjectsCompat.equals(getSsn(), employee.getSsn()) &&
              ObjectsCompat.equals(getCreatedAt(), employee.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), employee.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getAddress())
      .append(getSsn())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Employee {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"address=\\" + String.valueOf(getAddress()) + \\", \\")
      .append(\\"ssn=\\" + String.valueOf(getSsn()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static NameStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Employee justId(String id) {
    return new Employee(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      address,
      ssn);
  }
  public interface NameStep {
    AddressStep name(String name);
  }
  

  public interface AddressStep {
    BuildStep address(String address);
  }
  

  public interface BuildStep {
    Employee build();
    BuildStep id(String id);
    BuildStep ssn(String ssn);
  }
  

  public static class Builder implements NameStep, AddressStep, BuildStep {
    private String id;
    private String name;
    private String address;
    private String ssn;
    @Override
     public Employee build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Employee(
          id,
          name,
          address,
          ssn);
    }
    
    @Override
     public AddressStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep address(String address) {
        Objects.requireNonNull(address);
        this.address = address;
        return this;
    }
    
    @Override
     public BuildStep ssn(String ssn) {
        this.ssn = ssn;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String address, String ssn) {
      super.id(id);
      super.name(name)
        .address(address)
        .ssn(ssn);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder address(String address) {
      return (CopyOfBuilder) super.address(address);
    }
    
    @Override
     public CopyOfBuilder ssn(String ssn) {
      return (CopyOfBuilder) super.ssn(ssn);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with dynamic groups 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the dynamicGroups type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"dynamicGroups\\", authRules = {
  @AuthRule(allow = AuthStrategy.GROUPS, groupClaim = \\"cognito:groups\\", groupsField = \\"groups\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class dynamicGroups implements Model {
  public static final QueryField ID = field(\\"dynamicGroups\\", \\"id\\");
  public static final QueryField NAME = field(\\"dynamicGroups\\", \\"name\\");
  public static final QueryField BAR = field(\\"dynamicGroups\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private dynamicGroups(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      dynamicGroups dynamicGroups = (dynamicGroups) obj;
      return ObjectsCompat.equals(getId(), dynamicGroups.getId()) &&
              ObjectsCompat.equals(getName(), dynamicGroups.getName()) &&
              ObjectsCompat.equals(getBar(), dynamicGroups.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), dynamicGroups.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), dynamicGroups.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"dynamicGroups {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static dynamicGroups justId(String id) {
    return new dynamicGroups(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    dynamicGroups build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public dynamicGroups build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new dynamicGroups(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with non-default providers 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Employee type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Employees\\", authRules = {
  @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"cognito:username\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ }),
  @AuthRule(allow = AuthStrategy.PRIVATE, provider = \\"iam\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class Employee implements Model {
  public static final QueryField ID = field(\\"Employee\\", \\"id\\");
  public static final QueryField NAME = field(\\"Employee\\", \\"name\\");
  public static final QueryField ADDRESS = field(\\"Employee\\", \\"address\\");
  public static final QueryField SSN = field(\\"Employee\\", \\"ssn\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String address;
  private final @ModelField(targetType=\\"String\\", authRules = {
    @AuthRule(allow = AuthStrategy.GROUPS, groupClaim = \\"cognito:groups\\", groups = { \\"Admins\\" }, provider = \\"oidc\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
  }) String ssn;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getAddress() {
      return address;
  }
  
  public String getSsn() {
      return ssn;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Employee(String id, String name, String address, String ssn) {
    this.id = id;
    this.name = name;
    this.address = address;
    this.ssn = ssn;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Employee employee = (Employee) obj;
      return ObjectsCompat.equals(getId(), employee.getId()) &&
              ObjectsCompat.equals(getName(), employee.getName()) &&
              ObjectsCompat.equals(getAddress(), employee.getAddress()) &&
              ObjectsCompat.equals(getSsn(), employee.getSsn()) &&
              ObjectsCompat.equals(getCreatedAt(), employee.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), employee.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getAddress())
      .append(getSsn())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Employee {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"address=\\" + String.valueOf(getAddress()) + \\", \\")
      .append(\\"ssn=\\" + String.valueOf(getSsn()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static NameStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Employee justId(String id) {
    return new Employee(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      address,
      ssn);
  }
  public interface NameStep {
    AddressStep name(String name);
  }
  

  public interface AddressStep {
    BuildStep address(String address);
  }
  

  public interface BuildStep {
    Employee build();
    BuildStep id(String id);
    BuildStep ssn(String ssn);
  }
  

  public static class Builder implements NameStep, AddressStep, BuildStep {
    private String id;
    private String name;
    private String address;
    private String ssn;
    @Override
     public Employee build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Employee(
          id,
          name,
          address,
          ssn);
    }
    
    @Override
     public AddressStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep address(String address) {
        Objects.requireNonNull(address);
        this.address = address;
        return this;
    }
    
    @Override
     public BuildStep ssn(String ssn) {
        this.ssn = ssn;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String address, String ssn) {
      super.id(id);
      super.name(name)
        .address(address)
        .ssn(ssn);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder address(String address) {
      return (CopyOfBuilder) super.address(address);
    }
    
    @Override
     public CopyOfBuilder ssn(String ssn) {
      return (CopyOfBuilder) super.ssn(ssn);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with owner auth 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the simpleOwnerAuth type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"simpleOwnerAuths\\", authRules = {
  @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"cognito:username\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class simpleOwnerAuth implements Model {
  public static final QueryField ID = field(\\"simpleOwnerAuth\\", \\"id\\");
  public static final QueryField NAME = field(\\"simpleOwnerAuth\\", \\"name\\");
  public static final QueryField BAR = field(\\"simpleOwnerAuth\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private simpleOwnerAuth(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      simpleOwnerAuth simpleOwnerAuth = (simpleOwnerAuth) obj;
      return ObjectsCompat.equals(getId(), simpleOwnerAuth.getId()) &&
              ObjectsCompat.equals(getName(), simpleOwnerAuth.getName()) &&
              ObjectsCompat.equals(getBar(), simpleOwnerAuth.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), simpleOwnerAuth.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), simpleOwnerAuth.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"simpleOwnerAuth {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static simpleOwnerAuth justId(String id) {
    return new simpleOwnerAuth(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    simpleOwnerAuth build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public simpleOwnerAuth build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new simpleOwnerAuth(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with owner auth allowing others to read 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the allowRead type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"allowReads\\", authRules = {
  @AuthRule(allow = AuthStrategy.OWNER, ownerField = \\"owner\\", identityClaim = \\"cognito:username\\", provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.DELETE, ModelOperation.UPDATE })
})
public final class allowRead implements Model {
  public static final QueryField ID = field(\\"allowRead\\", \\"id\\");
  public static final QueryField NAME = field(\\"allowRead\\", \\"name\\");
  public static final QueryField BAR = field(\\"allowRead\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private allowRead(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      allowRead allowRead = (allowRead) obj;
      return ObjectsCompat.equals(getId(), allowRead.getId()) &&
              ObjectsCompat.equals(getName(), allowRead.getName()) &&
              ObjectsCompat.equals(getBar(), allowRead.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), allowRead.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), allowRead.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"allowRead {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static allowRead justId(String id) {
    return new allowRead(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    allowRead build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public allowRead build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new allowRead(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with private authorization 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the privateType type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"privateTypes\\", authRules = {
  @AuthRule(allow = AuthStrategy.PRIVATE, operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class privateType implements Model {
  public static final QueryField ID = field(\\"privateType\\", \\"id\\");
  public static final QueryField NAME = field(\\"privateType\\", \\"name\\");
  public static final QueryField BAR = field(\\"privateType\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private privateType(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      privateType privateType = (privateType) obj;
      return ObjectsCompat.equals(getId(), privateType.getId()) &&
              ObjectsCompat.equals(getName(), privateType.getName()) &&
              ObjectsCompat.equals(getBar(), privateType.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), privateType.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), privateType.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"privateType {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static privateType justId(String id) {
    return new privateType(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    privateType build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public privateType build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new privateType(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with private authorization and field auth 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the privateType type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"privateTypes\\", authRules = {
  @AuthRule(allow = AuthStrategy.PRIVATE, operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class privateType implements Model {
  public static final QueryField ID = field(\\"privateType\\", \\"id\\");
  public static final QueryField NAME = field(\\"privateType\\", \\"name\\");
  public static final QueryField BAR = field(\\"privateType\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\", authRules = {
    @AuthRule(allow = AuthStrategy.PRIVATE, operations = { ModelOperation.CREATE, ModelOperation.UPDATE })
  }) String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private privateType(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      privateType privateType = (privateType) obj;
      return ObjectsCompat.equals(getId(), privateType.getId()) &&
              ObjectsCompat.equals(getName(), privateType.getName()) &&
              ObjectsCompat.equals(getBar(), privateType.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), privateType.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), privateType.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"privateType {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static privateType justId(String id) {
    return new privateType(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    privateType build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public privateType build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new privateType(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with public authorization 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the publicType type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"publicTypes\\", authRules = {
  @AuthRule(allow = AuthStrategy.PUBLIC, operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class publicType implements Model {
  public static final QueryField ID = field(\\"publicType\\", \\"id\\");
  public static final QueryField NAME = field(\\"publicType\\", \\"name\\");
  public static final QueryField BAR = field(\\"publicType\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private publicType(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      publicType publicType = (publicType) obj;
      return ObjectsCompat.equals(getId(), publicType.getId()) &&
              ObjectsCompat.equals(getName(), publicType.getName()) &&
              ObjectsCompat.equals(getBar(), publicType.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), publicType.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), publicType.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"publicType {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static publicType justId(String id) {
    return new publicType(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    publicType build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public publicType build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new publicType(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Model with Auth should generate class with static groups 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.AuthStrategy;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelOperation;
import com.amplifyframework.core.model.annotations.AuthRule;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the staticGroups type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"staticGroups\\", authRules = {
  @AuthRule(allow = AuthStrategy.GROUPS, groupClaim = \\"cognito:groups\\", groups = { \\"Admin\\" }, provider = \\"userPools\\", operations = { ModelOperation.CREATE, ModelOperation.UPDATE, ModelOperation.DELETE, ModelOperation.READ })
})
public final class staticGroups implements Model {
  public static final QueryField ID = field(\\"staticGroups\\", \\"id\\");
  public static final QueryField NAME = field(\\"staticGroups\\", \\"name\\");
  public static final QueryField BAR = field(\\"staticGroups\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private staticGroups(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      staticGroups staticGroups = (staticGroups) obj;
      return ObjectsCompat.equals(getId(), staticGroups.getId()) &&
              ObjectsCompat.equals(getName(), staticGroups.getName()) &&
              ObjectsCompat.equals(getBar(), staticGroups.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), staticGroups.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), staticGroups.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"staticGroups {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static staticGroups justId(String id) {
    return new staticGroups(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    staticGroups build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public staticGroups build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new staticGroups(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor ModelIdentifier for all model types tests Should generate ModelIdentifier factory with resolveIdentifier return type extending ModelIdentifier 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the MyPost type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"MyPosts\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"postId\\",\\"title\\",\\"createdAt\\",\\"rating\\"})
public final class MyPost implements Model {
  public static final QueryField POST_ID = field(\\"MyPost\\", \\"postId\\");
  public static final QueryField TITLE = field(\\"MyPost\\", \\"title\\");
  public static final QueryField CREATED_AT = field(\\"MyPost\\", \\"createdAt\\");
  public static final QueryField RATING = field(\\"MyPost\\", \\"rating\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String postId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"AWSDateTime\\", isRequired = true) Temporal.DateTime createdAt;
  private final @ModelField(targetType=\\"Float\\", isRequired = true) Double rating;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private MyPostIdentifier myPostIdentifier;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public MyPostIdentifier resolveIdentifier() {
    if (myPostIdentifier == null) {
      this.myPostIdentifier = new MyPostIdentifier(postId, title, createdAt, rating);
    }
    return myPostIdentifier;
  }
  
  public String getPostId() {
      return postId;
  }
  
  public String getTitle() {
      return title;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Double getRating() {
      return rating;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private MyPost(String postId, String title, Temporal.DateTime createdAt, Double rating) {
    this.postId = postId;
    this.title = title;
    this.createdAt = createdAt;
    this.rating = rating;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      MyPost myPost = (MyPost) obj;
      return ObjectsCompat.equals(getPostId(), myPost.getPostId()) &&
              ObjectsCompat.equals(getTitle(), myPost.getTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), myPost.getCreatedAt()) &&
              ObjectsCompat.equals(getRating(), myPost.getRating()) &&
              ObjectsCompat.equals(getUpdatedAt(), myPost.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getPostId())
      .append(getTitle())
      .append(getCreatedAt())
      .append(getRating())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"MyPost {\\")
      .append(\\"postId=\\" + String.valueOf(getPostId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"rating=\\" + String.valueOf(getRating()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static PostIdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(postId,
      title,
      createdAt,
      rating);
  }
  public interface PostIdStep {
    TitleStep postId(String postId);
  }
  

  public interface TitleStep {
    CreatedAtStep title(String title);
  }
  

  public interface CreatedAtStep {
    RatingStep createdAt(Temporal.DateTime createdAt);
  }
  

  public interface RatingStep {
    BuildStep rating(Double rating);
  }
  

  public interface BuildStep {
    MyPost build();
  }
  

  public static class Builder implements PostIdStep, TitleStep, CreatedAtStep, RatingStep, BuildStep {
    private String postId;
    private String title;
    private Temporal.DateTime createdAt;
    private Double rating;
    @Override
     public MyPost build() {
        
        return new MyPost(
          postId,
          title,
          createdAt,
          rating);
    }
    
    @Override
     public TitleStep postId(String postId) {
        Objects.requireNonNull(postId);
        this.postId = postId;
        return this;
    }
    
    @Override
     public CreatedAtStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public RatingStep createdAt(Temporal.DateTime createdAt) {
        Objects.requireNonNull(createdAt);
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
     public BuildStep rating(Double rating) {
        Objects.requireNonNull(rating);
        this.rating = rating;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String postId, String title, Temporal.DateTime createdAt, Double rating) {
      super.postId(postId)
        .title(title)
        .createdAt(createdAt)
        .rating(rating);
    }
    
    @Override
     public CopyOfBuilder postId(String postId) {
      return (CopyOfBuilder) super.postId(postId);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder createdAt(Temporal.DateTime createdAt) {
      return (CopyOfBuilder) super.createdAt(createdAt);
    }
    
    @Override
     public CopyOfBuilder rating(Double rating) {
      return (CopyOfBuilder) super.rating(rating);
    }
  }
  

  public static class MyPostIdentifier extends ModelIdentifier<MyPost> {
    private static final long serialVersionUID = 1L;
    public MyPostIdentifier(String postId, String title, Temporal.DateTime createdAt, Double rating) {
      super(postId, title, createdAt, rating);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor ModelIdentifier for all model types tests Should generate ModelIdentifier factory with resolveIdentifier returning Java types matching graphql scalar conversion 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the StringModel type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"StringModels\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"customKey\\"})
public final class StringModel implements Model {
  public static final QueryField CUSTOM_KEY = field(\\"StringModel\\", \\"customKey\\");
  private final @ModelField(targetType=\\"String\\", isRequired = true) String customKey;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public String resolveIdentifier() {
    return customKey;
  }
  
  public String getCustomKey() {
      return customKey;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private StringModel(String customKey) {
    this.customKey = customKey;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      StringModel stringModel = (StringModel) obj;
      return ObjectsCompat.equals(getCustomKey(), stringModel.getCustomKey()) &&
              ObjectsCompat.equals(getCreatedAt(), stringModel.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), stringModel.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getCustomKey())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"StringModel {\\")
      .append(\\"customKey=\\" + String.valueOf(getCustomKey()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CustomKeyStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(customKey);
  }
  public interface CustomKeyStep {
    BuildStep customKey(String customKey);
  }
  

  public interface BuildStep {
    StringModel build();
  }
  

  public static class Builder implements CustomKeyStep, BuildStep {
    private String customKey;
    @Override
     public StringModel build() {
        
        return new StringModel(
          customKey);
    }
    
    @Override
     public BuildStep customKey(String customKey) {
        Objects.requireNonNull(customKey);
        this.customKey = customKey;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String customKey) {
      super.customKey(customKey);
    }
    
    @Override
     public CopyOfBuilder customKey(String customKey) {
      return (CopyOfBuilder) super.customKey(customKey);
    }
  }
  

  public static class StringModelIdentifier extends ModelIdentifier<StringModel> {
    private static final long serialVersionUID = 1L;
    public StringModelIdentifier(String customKey) {
      super(customKey);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor ModelIdentifier for all model types tests Should generate ModelIdentifier factory with resolveIdentifier returning Java types matching graphql scalar conversion 2`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the IdModel type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"IdModels\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"customKey\\"})
public final class IdModel implements Model {
  public static final QueryField CUSTOM_KEY = field(\\"IdModel\\", \\"customKey\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String customKey;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public String resolveIdentifier() {
    return customKey;
  }
  
  public String getCustomKey() {
      return customKey;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private IdModel(String customKey) {
    this.customKey = customKey;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      IdModel idModel = (IdModel) obj;
      return ObjectsCompat.equals(getCustomKey(), idModel.getCustomKey()) &&
              ObjectsCompat.equals(getCreatedAt(), idModel.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), idModel.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getCustomKey())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"IdModel {\\")
      .append(\\"customKey=\\" + String.valueOf(getCustomKey()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CustomKeyStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(customKey);
  }
  public interface CustomKeyStep {
    BuildStep customKey(String customKey);
  }
  

  public interface BuildStep {
    IdModel build();
  }
  

  public static class Builder implements CustomKeyStep, BuildStep {
    private String customKey;
    @Override
     public IdModel build() {
        
        return new IdModel(
          customKey);
    }
    
    @Override
     public BuildStep customKey(String customKey) {
        Objects.requireNonNull(customKey);
        this.customKey = customKey;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String customKey) {
      super.customKey(customKey);
    }
    
    @Override
     public CopyOfBuilder customKey(String customKey) {
      return (CopyOfBuilder) super.customKey(customKey);
    }
  }
  

  public static class IdModelIdentifier extends ModelIdentifier<IdModel> {
    private static final long serialVersionUID = 1L;
    public IdModelIdentifier(String customKey) {
      super(customKey);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor ModelIdentifier for all model types tests Should generate ModelIdentifier factory with resolveIdentifier returning Java types matching graphql scalar conversion 3`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.ModelIdentifier;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the IntModel type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"IntModels\\", type = Model.Type.USER, version = 1)
@Index(name = \\"undefined\\", fields = {\\"customKey\\"})
public final class IntModel implements Model {
  public static final QueryField CUSTOM_KEY = field(\\"IntModel\\", \\"customKey\\");
  private final @ModelField(targetType=\\"Int\\", isRequired = true) Integer customKey;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  /** @deprecated This API is internal to Amplify and should not be used. */
  @Deprecated
   public Integer resolveIdentifier() {
    return customKey;
  }
  
  public Integer getCustomKey() {
      return customKey;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private IntModel(Integer customKey) {
    this.customKey = customKey;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      IntModel intModel = (IntModel) obj;
      return ObjectsCompat.equals(getCustomKey(), intModel.getCustomKey()) &&
              ObjectsCompat.equals(getCreatedAt(), intModel.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), intModel.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getCustomKey())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"IntModel {\\")
      .append(\\"customKey=\\" + String.valueOf(getCustomKey()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CustomKeyStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(customKey);
  }
  public interface CustomKeyStep {
    BuildStep customKey(Integer customKey);
  }
  

  public interface BuildStep {
    IntModel build();
  }
  

  public static class Builder implements CustomKeyStep, BuildStep {
    private Integer customKey;
    @Override
     public IntModel build() {
        
        return new IntModel(
          customKey);
    }
    
    @Override
     public BuildStep customKey(Integer customKey) {
        Objects.requireNonNull(customKey);
        this.customKey = customKey;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(Integer customKey) {
      super.customKey(customKey);
    }
    
    @Override
     public CopyOfBuilder customKey(Integer customKey) {
      return (CopyOfBuilder) super.customKey(customKey);
    }
  }
  

  public static class IntModelIdentifier extends ModelIdentifier<IntModel> {
    private static final long serialVersionUID = 1L;
    public IntModelIdentifier(Integer customKey) {
      super(customKey);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Non model type should generate class for model types with non model fields 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Landmark type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Landmarks\\")
public final class Landmark implements Model {
  public static final QueryField ID = field(\\"Landmark\\", \\"id\\");
  public static final QueryField NAME = field(\\"Landmark\\", \\"name\\");
  public static final QueryField RATING = field(\\"Landmark\\", \\"rating\\");
  public static final QueryField LOCATION = field(\\"Landmark\\", \\"location\\");
  public static final QueryField PARKING = field(\\"Landmark\\", \\"parking\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Int\\", isRequired = true) Integer rating;
  private final @ModelField(targetType=\\"Location\\", isRequired = true) Location location;
  private final @ModelField(targetType=\\"Location\\") Location parking;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public Integer getRating() {
      return rating;
  }
  
  public Location getLocation() {
      return location;
  }
  
  public Location getParking() {
      return parking;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Landmark(String id, String name, Integer rating, Location location, Location parking) {
    this.id = id;
    this.name = name;
    this.rating = rating;
    this.location = location;
    this.parking = parking;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Landmark landmark = (Landmark) obj;
      return ObjectsCompat.equals(getId(), landmark.getId()) &&
              ObjectsCompat.equals(getName(), landmark.getName()) &&
              ObjectsCompat.equals(getRating(), landmark.getRating()) &&
              ObjectsCompat.equals(getLocation(), landmark.getLocation()) &&
              ObjectsCompat.equals(getParking(), landmark.getParking()) &&
              ObjectsCompat.equals(getCreatedAt(), landmark.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), landmark.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getRating())
      .append(getLocation())
      .append(getParking())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Landmark {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"rating=\\" + String.valueOf(getRating()) + \\", \\")
      .append(\\"location=\\" + String.valueOf(getLocation()) + \\", \\")
      .append(\\"parking=\\" + String.valueOf(getParking()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static NameStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Landmark justId(String id) {
    return new Landmark(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      rating,
      location,
      parking);
  }
  public interface NameStep {
    RatingStep name(String name);
  }
  

  public interface RatingStep {
    LocationStep rating(Integer rating);
  }
  

  public interface LocationStep {
    BuildStep location(Location location);
  }
  

  public interface BuildStep {
    Landmark build();
    BuildStep id(String id);
    BuildStep parking(Location parking);
  }
  

  public static class Builder implements NameStep, RatingStep, LocationStep, BuildStep {
    private String id;
    private String name;
    private Integer rating;
    private Location location;
    private Location parking;
    @Override
     public Landmark build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Landmark(
          id,
          name,
          rating,
          location,
          parking);
    }
    
    @Override
     public RatingStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public LocationStep rating(Integer rating) {
        Objects.requireNonNull(rating);
        this.rating = rating;
        return this;
    }
    
    @Override
     public BuildStep location(Location location) {
        Objects.requireNonNull(location);
        this.location = location;
        return this;
    }
    
    @Override
     public BuildStep parking(Location parking) {
        this.parking = parking;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, Integer rating, Location location, Location parking) {
      super.id(id);
      super.name(name)
        .rating(rating)
        .location(location)
        .parking(parking);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder rating(Integer rating) {
      return (CopyOfBuilder) super.rating(rating);
    }
    
    @Override
     public CopyOfBuilder location(Location location) {
      return (CopyOfBuilder) super.location(location);
    }
    
    @Override
     public CopyOfBuilder parking(Location parking) {
      return (CopyOfBuilder) super.parking(parking);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Non model type should generate class for non model types 1`] = `
"package com.amplifyframework.datastore.generated.model;


import androidx.core.util.ObjectsCompat;

import java.util.Objects;
import java.util.List;

/** This is an auto generated class representing the Location type in your schema. */
public final class Location {
  private final String lat;
  private final String lang;
  public String getLat() {
      return lat;
  }
  
  public String getLang() {
      return lang;
  }
  
  private Location(String lat, String lang) {
    this.lat = lat;
    this.lang = lang;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Location location = (Location) obj;
      return ObjectsCompat.equals(getLat(), location.getLat()) &&
              ObjectsCompat.equals(getLang(), location.getLang());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getLat())
      .append(getLang())
      .toString()
      .hashCode();
  }
  
  public static LatStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(lat,
      lang);
  }
  public interface LatStep {
    LangStep lat(String lat);
  }
  

  public interface LangStep {
    BuildStep lang(String lang);
  }
  

  public interface BuildStep {
    Location build();
  }
  

  public static class Builder implements LatStep, LangStep, BuildStep {
    private String lat;
    private String lang;
    @Override
     public Location build() {
        
        return new Location(
          lat,
          lang);
    }
    
    @Override
     public LangStep lat(String lat) {
        Objects.requireNonNull(lat);
        this.lat = lat;
        return this;
    }
    
    @Override
     public BuildStep lang(String lang) {
        Objects.requireNonNull(lang);
        this.lang = lang;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String lat, String lang) {
      super.lat(lat)
        .lang(lang);
    }
    
    @Override
     public CopyOfBuilder lat(String lat) {
      return (CopyOfBuilder) super.lat(lat);
    }
    
    @Override
     public CopyOfBuilder lang(String lang) {
      return (CopyOfBuilder) super.lang(lang);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Non model type should generate class for non model types with id field 1`] = `
"package com.amplifyframework.datastore.generated.model;


import androidx.core.util.ObjectsCompat;

import java.util.Objects;
import java.util.List;

/** This is an auto generated class representing the Reference type in your schema. */
public final class Reference {
  private final String id;
  private final ReferenceIdTypeEnum idType;
  public String getId() {
      return id;
  }
  
  public ReferenceIdTypeEnum getIdType() {
      return idType;
  }
  
  private Reference(String id, ReferenceIdTypeEnum idType) {
    this.id = id;
    this.idType = idType;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Reference reference = (Reference) obj;
      return ObjectsCompat.equals(getId(), reference.getId()) &&
              ObjectsCompat.equals(getIdType(), reference.getIdType());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getIdType())
      .toString()
      .hashCode();
  }
  
  public static IdStep builder() {
      return new Builder();
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      idType);
  }
  public interface IdStep {
    IdTypeStep id(String id);
  }
  

  public interface IdTypeStep {
    BuildStep idType(ReferenceIdTypeEnum idType);
  }
  

  public interface BuildStep {
    Reference build();
  }
  

  public static class Builder implements IdStep, IdTypeStep, BuildStep {
    private String id;
    private ReferenceIdTypeEnum idType;
    @Override
     public Reference build() {
        
        return new Reference(
          id,
          idType);
    }
    
    @Override
     public IdTypeStep id(String id) {
        Objects.requireNonNull(id);
        this.id = id;
        return this;
    }
    
    @Override
     public BuildStep idType(ReferenceIdTypeEnum idType) {
        Objects.requireNonNull(idType);
        this.idType = idType;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, ReferenceIdTypeEnum idType) {
      super.id(id)
        .idType(idType);
    }
    
    @Override
     public CopyOfBuilder id(String id) {
      return (CopyOfBuilder) super.id(id);
    }
    
    @Override
     public CopyOfBuilder idType(ReferenceIdTypeEnum idType) {
      return (CopyOfBuilder) super.idType(idType);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor One to Many connection with no nullable and non nullable fields should generate class for many side of the connection 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the task type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"tasks\\")
public final class task implements Model {
  public static final QueryField ID = field(\\"task\\", \\"id\\");
  public static final QueryField TODO = field(\\"task\\", \\"taskTodoId\\");
  public static final QueryField TIME = field(\\"task\\", \\"time\\");
  public static final QueryField CREATED_ON = field(\\"task\\", \\"createdOn\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"Todo\\") @BelongsTo(targetName = \\"taskTodoId\\", type = Todo.class) Todo todo;
  private final @ModelField(targetType=\\"AWSTime\\") Temporal.Time time;
  private final @ModelField(targetType=\\"AWSDate\\") Temporal.Date createdOn;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public Todo getTodo() {
      return todo;
  }
  
  public Temporal.Time getTime() {
      return time;
  }
  
  public Temporal.Date getCreatedOn() {
      return createdOn;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private task(String id, Todo todo, Temporal.Time time, Temporal.Date createdOn) {
    this.id = id;
    this.todo = todo;
    this.time = time;
    this.createdOn = createdOn;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      task task = (task) obj;
      return ObjectsCompat.equals(getId(), task.getId()) &&
              ObjectsCompat.equals(getTodo(), task.getTodo()) &&
              ObjectsCompat.equals(getTime(), task.getTime()) &&
              ObjectsCompat.equals(getCreatedOn(), task.getCreatedOn()) &&
              ObjectsCompat.equals(getCreatedAt(), task.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), task.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTodo())
      .append(getTime())
      .append(getCreatedOn())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"task {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"todo=\\" + String.valueOf(getTodo()) + \\", \\")
      .append(\\"time=\\" + String.valueOf(getTime()) + \\", \\")
      .append(\\"createdOn=\\" + String.valueOf(getCreatedOn()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static task justId(String id) {
    return new task(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      todo,
      time,
      createdOn);
  }
  public interface BuildStep {
    task build();
    BuildStep id(String id);
    BuildStep todo(Todo todo);
    BuildStep time(Temporal.Time time);
    BuildStep createdOn(Temporal.Date createdOn);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private Todo todo;
    private Temporal.Time time;
    private Temporal.Date createdOn;
    @Override
     public task build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new task(
          id,
          todo,
          time,
          createdOn);
    }
    
    @Override
     public BuildStep todo(Todo todo) {
        this.todo = todo;
        return this;
    }
    
    @Override
     public BuildStep time(Temporal.Time time) {
        this.time = time;
        return this;
    }
    
    @Override
     public BuildStep createdOn(Temporal.Date createdOn) {
        this.createdOn = createdOn;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, Todo todo, Temporal.Time time, Temporal.Date createdOn) {
      super.id(id);
      super.todo(todo)
        .time(time)
        .createdOn(createdOn);
    }
    
    @Override
     public CopyOfBuilder todo(Todo todo) {
      return (CopyOfBuilder) super.todo(todo);
    }
    
    @Override
     public CopyOfBuilder time(Temporal.Time time) {
      return (CopyOfBuilder) super.time(time);
    }
    
    @Override
     public CopyOfBuilder createdOn(Temporal.Date createdOn) {
      return (CopyOfBuilder) super.createdOn(createdOn);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor One to Many connection with no nullable and non nullable fields should generate class for one side of the connection 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Todo type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Todos\\")
public final class Todo implements Model {
  public static final QueryField ID = field(\\"Todo\\", \\"id\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"task\\") @HasMany(associatedWith = \\"todo\\", type = task.class) List<task> tasks = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public List<task> getTasks() {
      return tasks;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Todo(String id) {
    this.id = id;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Todo todo = (Todo) obj;
      return ObjectsCompat.equals(getId(), todo.getId()) &&
              ObjectsCompat.equals(getCreatedAt(), todo.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), todo.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Todo {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Todo justId(String id) {
    return new Todo(
      id
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id);
  }
  public interface BuildStep {
    Todo build();
    BuildStep id(String id);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    @Override
     public Todo build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Todo(
          id);
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id) {
      super.id(id);
      
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Should generate a class a model with all optional fields except id field 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the SimpleModel type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"SimpleModels\\")
public final class SimpleModel implements Model {
  public static final QueryField ID = field(\\"SimpleModel\\", \\"id\\");
  public static final QueryField NAME = field(\\"SimpleModel\\", \\"name\\");
  public static final QueryField BAR = field(\\"SimpleModel\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private SimpleModel(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      SimpleModel simpleModel = (SimpleModel) obj;
      return ObjectsCompat.equals(getId(), simpleModel.getId()) &&
              ObjectsCompat.equals(getName(), simpleModel.getName()) &&
              ObjectsCompat.equals(getBar(), simpleModel.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), simpleModel.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), simpleModel.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"SimpleModel {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static SimpleModel justId(String id) {
    return new SimpleModel(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    SimpleModel build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public SimpleModel build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new SimpleModel(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Should generate a class for a Model 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the SimpleModel type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"SimpleModels\\")
public final class SimpleModel implements Model {
  public static final QueryField ID = field(\\"SimpleModel\\", \\"id\\");
  public static final QueryField NAME = field(\\"SimpleModel\\", \\"name\\");
  public static final QueryField BAR = field(\\"SimpleModel\\", \\"bar\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"String\\") String bar;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public String getBar() {
      return bar;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private SimpleModel(String id, String name, String bar) {
    this.id = id;
    this.name = name;
    this.bar = bar;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      SimpleModel simpleModel = (SimpleModel) obj;
      return ObjectsCompat.equals(getId(), simpleModel.getId()) &&
              ObjectsCompat.equals(getName(), simpleModel.getName()) &&
              ObjectsCompat.equals(getBar(), simpleModel.getBar()) &&
              ObjectsCompat.equals(getCreatedAt(), simpleModel.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), simpleModel.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getBar())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"SimpleModel {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"bar=\\" + String.valueOf(getBar()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static SimpleModel justId(String id) {
    return new SimpleModel(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      bar);
  }
  public interface BuildStep {
    SimpleModel build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep bar(String bar);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    private String bar;
    @Override
     public SimpleModel build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new SimpleModel(
          id,
          name,
          bar);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep bar(String bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, String bar) {
      super.id(id);
      super.name(name)
        .bar(bar);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder bar(String bar) {
      return (CopyOfBuilder) super.bar(bar);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor Should handle nullability of lists appropriately 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the ListContainer type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"ListContainers\\")
public final class ListContainer implements Model {
  public static final QueryField ID = field(\\"ListContainer\\", \\"id\\");
  public static final QueryField NAME = field(\\"ListContainer\\", \\"name\\");
  public static final QueryField LIST = field(\\"ListContainer\\", \\"list\\");
  public static final QueryField REQUIRED_LIST = field(\\"ListContainer\\", \\"requiredList\\");
  public static final QueryField REQUIRED_LIST_OF_REQUIRED = field(\\"ListContainer\\", \\"requiredListOfRequired\\");
  public static final QueryField LIST_OF_REQUIRED = field(\\"ListContainer\\", \\"listOfRequired\\");
  public static final QueryField REQUIRED_LIST_OF_REQUIRED_DATES = field(\\"ListContainer\\", \\"requiredListOfRequiredDates\\");
  public static final QueryField LIST_OF_REQUIRED_FLOATS = field(\\"ListContainer\\", \\"listOfRequiredFloats\\");
  public static final QueryField REQUIRED_LIST_OF_CUSTOM_TYPES = field(\\"ListContainer\\", \\"requiredListOfCustomTypes\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private final @ModelField(targetType=\\"Int\\") List<Integer> list;
  private final @ModelField(targetType=\\"String\\", isRequired = true) List<String> requiredList;
  private final @ModelField(targetType=\\"StatusEnum\\", isRequired = true) List<StatusEnum> requiredListOfRequired;
  private final @ModelField(targetType=\\"Boolean\\") List<Boolean> listOfRequired;
  private final @ModelField(targetType=\\"AWSDate\\", isRequired = true) List<Temporal.Date> requiredListOfRequiredDates;
  private final @ModelField(targetType=\\"Float\\") List<Double> listOfRequiredFloats;
  private final @ModelField(targetType=\\"CustomType\\", isRequired = true) List<CustomType> requiredListOfCustomTypes;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public List<Integer> getList() {
      return list;
  }
  
  public List<String> getRequiredList() {
      return requiredList;
  }
  
  public List<StatusEnum> getRequiredListOfRequired() {
      return requiredListOfRequired;
  }
  
  public List<Boolean> getListOfRequired() {
      return listOfRequired;
  }
  
  public List<Temporal.Date> getRequiredListOfRequiredDates() {
      return requiredListOfRequiredDates;
  }
  
  public List<Double> getListOfRequiredFloats() {
      return listOfRequiredFloats;
  }
  
  public List<CustomType> getRequiredListOfCustomTypes() {
      return requiredListOfCustomTypes;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private ListContainer(String id, String name, List<Integer> list, List<String> requiredList, List<StatusEnum> requiredListOfRequired, List<Boolean> listOfRequired, List<Temporal.Date> requiredListOfRequiredDates, List<Double> listOfRequiredFloats, List<CustomType> requiredListOfCustomTypes) {
    this.id = id;
    this.name = name;
    this.list = list;
    this.requiredList = requiredList;
    this.requiredListOfRequired = requiredListOfRequired;
    this.listOfRequired = listOfRequired;
    this.requiredListOfRequiredDates = requiredListOfRequiredDates;
    this.listOfRequiredFloats = listOfRequiredFloats;
    this.requiredListOfCustomTypes = requiredListOfCustomTypes;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      ListContainer listContainer = (ListContainer) obj;
      return ObjectsCompat.equals(getId(), listContainer.getId()) &&
              ObjectsCompat.equals(getName(), listContainer.getName()) &&
              ObjectsCompat.equals(getList(), listContainer.getList()) &&
              ObjectsCompat.equals(getRequiredList(), listContainer.getRequiredList()) &&
              ObjectsCompat.equals(getRequiredListOfRequired(), listContainer.getRequiredListOfRequired()) &&
              ObjectsCompat.equals(getListOfRequired(), listContainer.getListOfRequired()) &&
              ObjectsCompat.equals(getRequiredListOfRequiredDates(), listContainer.getRequiredListOfRequiredDates()) &&
              ObjectsCompat.equals(getListOfRequiredFloats(), listContainer.getListOfRequiredFloats()) &&
              ObjectsCompat.equals(getRequiredListOfCustomTypes(), listContainer.getRequiredListOfCustomTypes()) &&
              ObjectsCompat.equals(getCreatedAt(), listContainer.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), listContainer.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getList())
      .append(getRequiredList())
      .append(getRequiredListOfRequired())
      .append(getListOfRequired())
      .append(getRequiredListOfRequiredDates())
      .append(getListOfRequiredFloats())
      .append(getRequiredListOfCustomTypes())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"ListContainer {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"list=\\" + String.valueOf(getList()) + \\", \\")
      .append(\\"requiredList=\\" + String.valueOf(getRequiredList()) + \\", \\")
      .append(\\"requiredListOfRequired=\\" + String.valueOf(getRequiredListOfRequired()) + \\", \\")
      .append(\\"listOfRequired=\\" + String.valueOf(getListOfRequired()) + \\", \\")
      .append(\\"requiredListOfRequiredDates=\\" + String.valueOf(getRequiredListOfRequiredDates()) + \\", \\")
      .append(\\"listOfRequiredFloats=\\" + String.valueOf(getListOfRequiredFloats()) + \\", \\")
      .append(\\"requiredListOfCustomTypes=\\" + String.valueOf(getRequiredListOfCustomTypes()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static RequiredListOfRequiredStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static ListContainer justId(String id) {
    return new ListContainer(
      id,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name,
      list,
      requiredList,
      requiredListOfRequired,
      listOfRequired,
      requiredListOfRequiredDates,
      listOfRequiredFloats,
      requiredListOfCustomTypes);
  }
  public interface RequiredListStep {
    RequiredListOfRequiredStep requiredList(List<String> requiredList);
  }
  

  public interface RequiredListOfRequiredStep {
    RequiredListOfRequiredDatesStep requiredListOfRequired(List<StatusEnum> requiredListOfRequired);
  }
  

  public interface RequiredListOfRequiredDatesStep {
    RequiredListOfCustomTypesStep requiredListOfRequiredDates(List<Temporal.Date> requiredListOfRequiredDates);
  }
  

  public interface RequiredListOfCustomTypesStep {
    BuildStep requiredListOfCustomTypes(List<CustomType> requiredListOfCustomTypes);
  }
  

  public interface BuildStep {
    ListContainer build();
    BuildStep id(String id);
    BuildStep name(String name);
    BuildStep list(List<Integer> list);
    BuildStep listOfRequired(List<Boolean> listOfRequired);
    BuildStep listOfRequiredFloats(List<Double> listOfRequiredFloats);
  }
  

  public static class Builder implements RequiredListStep, RequiredListOfRequiredStep, RequiredListOfRequiredDatesStep, RequiredListOfCustomTypesStep, BuildStep {
    private String id;
    private List<String> requiredList;
    private List<StatusEnum> requiredListOfRequired;
    private List<Temporal.Date> requiredListOfRequiredDates;
    private List<CustomType> requiredListOfCustomTypes;
    private String name;
    private List<Integer> list;
    private List<Boolean> listOfRequired;
    private List<Double> listOfRequiredFloats;
    @Override
     public ListContainer build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new ListContainer(
          id,
          name,
          list,
          requiredList,
          requiredListOfRequired,
          listOfRequired,
          requiredListOfRequiredDates,
          listOfRequiredFloats,
          requiredListOfCustomTypes);
    }
    
    @Override
     public RequiredListOfRequiredStep requiredList(List<String> requiredList) {
        Objects.requireNonNull(requiredList);
        this.requiredList = requiredList;
        return this;
    }
    
    @Override
     public RequiredListOfRequiredDatesStep requiredListOfRequired(List<StatusEnum> requiredListOfRequired) {
        Objects.requireNonNull(requiredListOfRequired);
        this.requiredListOfRequired = requiredListOfRequired;
        return this;
    }
    
    @Override
     public RequiredListOfCustomTypesStep requiredListOfRequiredDates(List<Temporal.Date> requiredListOfRequiredDates) {
        Objects.requireNonNull(requiredListOfRequiredDates);
        this.requiredListOfRequiredDates = requiredListOfRequiredDates;
        return this;
    }
    
    @Override
     public BuildStep requiredListOfCustomTypes(List<CustomType> requiredListOfCustomTypes) {
        Objects.requireNonNull(requiredListOfCustomTypes);
        this.requiredListOfCustomTypes = requiredListOfCustomTypes;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep list(List<Integer> list) {
        this.list = list;
        return this;
    }
    
    @Override
     public BuildStep listOfRequired(List<Boolean> listOfRequired) {
        this.listOfRequired = listOfRequired;
        return this;
    }
    
    @Override
     public BuildStep listOfRequiredFloats(List<Double> listOfRequiredFloats) {
        this.listOfRequiredFloats = listOfRequiredFloats;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name, List<Integer> list, List<String> requiredList, List<StatusEnum> requiredListOfRequired, List<Boolean> listOfRequired, List<Temporal.Date> requiredListOfRequiredDates, List<Double> listOfRequiredFloats, List<CustomType> requiredListOfCustomTypes) {
      super.id(id);
      super.requiredList(requiredList)
        .requiredListOfRequired(requiredListOfRequired)
        .requiredListOfRequiredDates(requiredListOfRequiredDates)
        .requiredListOfCustomTypes(requiredListOfCustomTypes)
        .name(name)
        .list(list)
        .listOfRequired(listOfRequired)
        .listOfRequiredFloats(listOfRequiredFloats);
    }
    
    @Override
     public CopyOfBuilder requiredList(List<String> requiredList) {
      return (CopyOfBuilder) super.requiredList(requiredList);
    }
    
    @Override
     public CopyOfBuilder requiredListOfRequired(List<StatusEnum> requiredListOfRequired) {
      return (CopyOfBuilder) super.requiredListOfRequired(requiredListOfRequired);
    }
    
    @Override
     public CopyOfBuilder requiredListOfRequiredDates(List<Temporal.Date> requiredListOfRequiredDates) {
      return (CopyOfBuilder) super.requiredListOfRequiredDates(requiredListOfRequiredDates);
    }
    
    @Override
     public CopyOfBuilder requiredListOfCustomTypes(List<CustomType> requiredListOfCustomTypes) {
      return (CopyOfBuilder) super.requiredListOfCustomTypes(requiredListOfCustomTypes);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder list(List<Integer> list) {
      return (CopyOfBuilder) super.list(list);
    }
    
    @Override
     public CopyOfBuilder listOfRequired(List<Boolean> listOfRequired) {
      return (CopyOfBuilder) super.listOfRequired(listOfRequired);
    }
    
    @Override
     public CopyOfBuilder listOfRequiredFloats(List<Double> listOfRequiredFloats) {
      return (CopyOfBuilder) super.listOfRequiredFloats(listOfRequiredFloats);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor connection One to Many connection should generate many side of the connection 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the task type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"tasks\\")
public final class task implements Model {
  public static final QueryField ID = field(\\"task\\", \\"id\\");
  public static final QueryField TITLE = field(\\"task\\", \\"title\\");
  public static final QueryField DONE = field(\\"task\\", \\"done\\");
  public static final QueryField TODO = field(\\"task\\", \\"taskTodoId\\");
  public static final QueryField TIME = field(\\"task\\", \\"time\\");
  public static final QueryField CREATED_ON = field(\\"task\\", \\"createdOn\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Boolean\\", isRequired = true) Boolean done;
  private final @ModelField(targetType=\\"Todo\\") @BelongsTo(targetName = \\"taskTodoId\\", type = Todo.class) Todo todo;
  private final @ModelField(targetType=\\"AWSTime\\") Temporal.Time time;
  private final @ModelField(targetType=\\"AWSDate\\") Temporal.Date createdOn;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getTitle() {
      return title;
  }
  
  public Boolean getDone() {
      return done;
  }
  
  public Todo getTodo() {
      return todo;
  }
  
  public Temporal.Time getTime() {
      return time;
  }
  
  public Temporal.Date getCreatedOn() {
      return createdOn;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private task(String id, String title, Boolean done, Todo todo, Temporal.Time time, Temporal.Date createdOn) {
    this.id = id;
    this.title = title;
    this.done = done;
    this.todo = todo;
    this.time = time;
    this.createdOn = createdOn;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      task task = (task) obj;
      return ObjectsCompat.equals(getId(), task.getId()) &&
              ObjectsCompat.equals(getTitle(), task.getTitle()) &&
              ObjectsCompat.equals(getDone(), task.getDone()) &&
              ObjectsCompat.equals(getTodo(), task.getTodo()) &&
              ObjectsCompat.equals(getTime(), task.getTime()) &&
              ObjectsCompat.equals(getCreatedOn(), task.getCreatedOn()) &&
              ObjectsCompat.equals(getCreatedAt(), task.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), task.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTitle())
      .append(getDone())
      .append(getTodo())
      .append(getTime())
      .append(getCreatedOn())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"task {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"done=\\" + String.valueOf(getDone()) + \\", \\")
      .append(\\"todo=\\" + String.valueOf(getTodo()) + \\", \\")
      .append(\\"time=\\" + String.valueOf(getTime()) + \\", \\")
      .append(\\"createdOn=\\" + String.valueOf(getCreatedOn()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TitleStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static task justId(String id) {
    return new task(
      id,
      null,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      title,
      done,
      todo,
      time,
      createdOn);
  }
  public interface TitleStep {
    DoneStep title(String title);
  }
  

  public interface DoneStep {
    BuildStep done(Boolean done);
  }
  

  public interface BuildStep {
    task build();
    BuildStep id(String id);
    BuildStep todo(Todo todo);
    BuildStep time(Temporal.Time time);
    BuildStep createdOn(Temporal.Date createdOn);
  }
  

  public static class Builder implements TitleStep, DoneStep, BuildStep {
    private String id;
    private String title;
    private Boolean done;
    private Todo todo;
    private Temporal.Time time;
    private Temporal.Date createdOn;
    @Override
     public task build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new task(
          id,
          title,
          done,
          todo,
          time,
          createdOn);
    }
    
    @Override
     public DoneStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public BuildStep done(Boolean done) {
        Objects.requireNonNull(done);
        this.done = done;
        return this;
    }
    
    @Override
     public BuildStep todo(Todo todo) {
        this.todo = todo;
        return this;
    }
    
    @Override
     public BuildStep time(Temporal.Time time) {
        this.time = time;
        return this;
    }
    
    @Override
     public BuildStep createdOn(Temporal.Date createdOn) {
        this.createdOn = createdOn;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String title, Boolean done, Todo todo, Temporal.Time time, Temporal.Date createdOn) {
      super.id(id);
      super.title(title)
        .done(done)
        .todo(todo)
        .time(time)
        .createdOn(createdOn);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder done(Boolean done) {
      return (CopyOfBuilder) super.done(done);
    }
    
    @Override
     public CopyOfBuilder todo(Todo todo) {
      return (CopyOfBuilder) super.todo(todo);
    }
    
    @Override
     public CopyOfBuilder time(Temporal.Time time) {
      return (CopyOfBuilder) super.time(time);
    }
    
    @Override
     public CopyOfBuilder createdOn(Temporal.Date createdOn) {
      return (CopyOfBuilder) super.createdOn(createdOn);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor connection One to Many connection should generate one side of the connection 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Todo type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Todos\\")
public final class Todo implements Model {
  public static final QueryField ID = field(\\"Todo\\", \\"id\\");
  public static final QueryField TITLE = field(\\"Todo\\", \\"title\\");
  public static final QueryField DONE = field(\\"Todo\\", \\"done\\");
  public static final QueryField DESCRIPTION = field(\\"Todo\\", \\"description\\");
  public static final QueryField DUE_DATE = field(\\"Todo\\", \\"due_date\\");
  public static final QueryField VERSION = field(\\"Todo\\", \\"version\\");
  public static final QueryField VALUE = field(\\"Todo\\", \\"value\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Boolean\\", isRequired = true) Boolean done;
  private final @ModelField(targetType=\\"String\\") String description;
  private final @ModelField(targetType=\\"String\\") String due_date;
  private final @ModelField(targetType=\\"Int\\", isRequired = true) Integer version;
  private final @ModelField(targetType=\\"Float\\") Double value;
  private final @ModelField(targetType=\\"task\\") @HasMany(associatedWith = \\"todo\\", type = task.class) List<task> tasks = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getTitle() {
      return title;
  }
  
  public Boolean getDone() {
      return done;
  }
  
  public String getDescription() {
      return description;
  }
  
  public String getDueDate() {
      return due_date;
  }
  
  public Integer getVersion() {
      return version;
  }
  
  public Double getValue() {
      return value;
  }
  
  public List<task> getTasks() {
      return tasks;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Todo(String id, String title, Boolean done, String description, String due_date, Integer version, Double value) {
    this.id = id;
    this.title = title;
    this.done = done;
    this.description = description;
    this.due_date = due_date;
    this.version = version;
    this.value = value;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Todo todo = (Todo) obj;
      return ObjectsCompat.equals(getId(), todo.getId()) &&
              ObjectsCompat.equals(getTitle(), todo.getTitle()) &&
              ObjectsCompat.equals(getDone(), todo.getDone()) &&
              ObjectsCompat.equals(getDescription(), todo.getDescription()) &&
              ObjectsCompat.equals(getDueDate(), todo.getDueDate()) &&
              ObjectsCompat.equals(getVersion(), todo.getVersion()) &&
              ObjectsCompat.equals(getValue(), todo.getValue()) &&
              ObjectsCompat.equals(getCreatedAt(), todo.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), todo.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTitle())
      .append(getDone())
      .append(getDescription())
      .append(getDueDate())
      .append(getVersion())
      .append(getValue())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Todo {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"done=\\" + String.valueOf(getDone()) + \\", \\")
      .append(\\"description=\\" + String.valueOf(getDescription()) + \\", \\")
      .append(\\"due_date=\\" + String.valueOf(getDueDate()) + \\", \\")
      .append(\\"version=\\" + String.valueOf(getVersion()) + \\", \\")
      .append(\\"value=\\" + String.valueOf(getValue()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TitleStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Todo justId(String id) {
    return new Todo(
      id,
      null,
      null,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      title,
      done,
      description,
      due_date,
      version,
      value);
  }
  public interface TitleStep {
    DoneStep title(String title);
  }
  

  public interface DoneStep {
    VersionStep done(Boolean done);
  }
  

  public interface VersionStep {
    BuildStep version(Integer version);
  }
  

  public interface BuildStep {
    Todo build();
    BuildStep id(String id);
    BuildStep description(String description);
    BuildStep dueDate(String dueDate);
    BuildStep value(Double value);
  }
  

  public static class Builder implements TitleStep, DoneStep, VersionStep, BuildStep {
    private String id;
    private String title;
    private Boolean done;
    private Integer version;
    private String description;
    private String due_date;
    private Double value;
    @Override
     public Todo build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Todo(
          id,
          title,
          done,
          description,
          due_date,
          version,
          value);
    }
    
    @Override
     public DoneStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public VersionStep done(Boolean done) {
        Objects.requireNonNull(done);
        this.done = done;
        return this;
    }
    
    @Override
     public BuildStep version(Integer version) {
        Objects.requireNonNull(version);
        this.version = version;
        return this;
    }
    
    @Override
     public BuildStep description(String description) {
        this.description = description;
        return this;
    }
    
    @Override
     public BuildStep dueDate(String dueDate) {
        this.due_date = dueDate;
        return this;
    }
    
    @Override
     public BuildStep value(Double value) {
        this.value = value;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String title, Boolean done, String description, String dueDate, Integer version, Double value) {
      super.id(id);
      super.title(title)
        .done(done)
        .version(version)
        .description(description)
        .dueDate(dueDate)
        .value(value);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder done(Boolean done) {
      return (CopyOfBuilder) super.done(done);
    }
    
    @Override
     public CopyOfBuilder version(Integer version) {
      return (CopyOfBuilder) super.version(version);
    }
    
    @Override
     public CopyOfBuilder description(String description) {
      return (CopyOfBuilder) super.description(description);
    }
    
    @Override
     public CopyOfBuilder dueDate(String dueDate) {
      return (CopyOfBuilder) super.dueDate(dueDate);
    }
    
    @Override
     public CopyOfBuilder value(Double value) {
      return (CopyOfBuilder) super.value(value);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should avoid name collision on builder step 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the MyObject type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"MyObjects\\")
public final class MyObject implements Model {
  public static final QueryField ID = field(\\"MyObject\\", \\"id\\");
  public static final QueryField TUTORIAL = field(\\"MyObject\\", \\"tutorial\\");
  public static final QueryField FORM_CUES = field(\\"MyObject\\", \\"formCues\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"TutorialStep\\", isRequired = true) List<TutorialStep> tutorial;
  private final @ModelField(targetType=\\"FormCue\\", isRequired = true) List<FormCue> formCues;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public List<TutorialStep> getTutorial() {
      return tutorial;
  }
  
  public List<FormCue> getFormCues() {
      return formCues;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private MyObject(String id, List<TutorialStep> tutorial, List<FormCue> formCues) {
    this.id = id;
    this.tutorial = tutorial;
    this.formCues = formCues;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      MyObject myObject = (MyObject) obj;
      return ObjectsCompat.equals(getId(), myObject.getId()) &&
              ObjectsCompat.equals(getTutorial(), myObject.getTutorial()) &&
              ObjectsCompat.equals(getFormCues(), myObject.getFormCues()) &&
              ObjectsCompat.equals(getCreatedAt(), myObject.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), myObject.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTutorial())
      .append(getFormCues())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"MyObject {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"tutorial=\\" + String.valueOf(getTutorial()) + \\", \\")
      .append(\\"formCues=\\" + String.valueOf(getFormCues()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TutorialBuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static MyObject justId(String id) {
    return new MyObject(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      tutorial,
      formCues);
  }
  public interface TutorialBuildStep {
    FormCuesStep tutorial(List<TutorialStep> tutorial);
  }
  

  public interface FormCuesStep {
    BuildStep formCues(List<FormCue> formCues);
  }
  

  public interface BuildStep {
    MyObject build();
    BuildStep id(String id);
  }
  

  public static class Builder implements TutorialBuildStep, FormCuesStep, BuildStep {
    private String id;
    private List<TutorialStep> tutorial;
    private List<FormCue> formCues;
    @Override
     public MyObject build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new MyObject(
          id,
          tutorial,
          formCues);
    }
    
    @Override
     public FormCuesStep tutorial(List<TutorialStep> tutorial) {
        Objects.requireNonNull(tutorial);
        this.tutorial = tutorial;
        return this;
    }
    
    @Override
     public BuildStep formCues(List<FormCue> formCues) {
        Objects.requireNonNull(formCues);
        this.formCues = formCues;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, List<TutorialStep> tutorial, List<FormCue> formCues) {
      super.id(id);
      super.tutorial(tutorial)
        .formCues(formCues);
    }
    
    @Override
     public CopyOfBuilder tutorial(List<TutorialStep> tutorial) {
      return (CopyOfBuilder) super.tutorial(tutorial);
    }
    
    @Override
     public CopyOfBuilder formCues(List<FormCue> formCues) {
      return (CopyOfBuilder) super.formCues(formCues);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should generate Temporal type for AWSDate* scalars 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the TypeWithAWSDateScalars type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"TypeWithAWSDateScalars\\")
public final class TypeWithAWSDateScalars implements Model {
  public static final QueryField ID = field(\\"TypeWithAWSDateScalars\\", \\"id\\");
  public static final QueryField DATE = field(\\"TypeWithAWSDateScalars\\", \\"date\\");
  public static final QueryField CREATED_AT = field(\\"TypeWithAWSDateScalars\\", \\"createdAt\\");
  public static final QueryField TIME = field(\\"TypeWithAWSDateScalars\\", \\"time\\");
  public static final QueryField TIMESTAMP = field(\\"TypeWithAWSDateScalars\\", \\"timestamp\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"AWSDate\\") Temporal.Date date;
  private final @ModelField(targetType=\\"AWSDateTime\\") Temporal.DateTime createdAt;
  private final @ModelField(targetType=\\"AWSTime\\") Temporal.Time time;
  private final @ModelField(targetType=\\"AWSTimestamp\\") Temporal.Timestamp timestamp;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public Temporal.Date getDate() {
      return date;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.Time getTime() {
      return time;
  }
  
  public Temporal.Timestamp getTimestamp() {
      return timestamp;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private TypeWithAWSDateScalars(String id, Temporal.Date date, Temporal.DateTime createdAt, Temporal.Time time, Temporal.Timestamp timestamp) {
    this.id = id;
    this.date = date;
    this.createdAt = createdAt;
    this.time = time;
    this.timestamp = timestamp;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      TypeWithAWSDateScalars typeWithAwsDateScalars = (TypeWithAWSDateScalars) obj;
      return ObjectsCompat.equals(getId(), typeWithAwsDateScalars.getId()) &&
              ObjectsCompat.equals(getDate(), typeWithAwsDateScalars.getDate()) &&
              ObjectsCompat.equals(getCreatedAt(), typeWithAwsDateScalars.getCreatedAt()) &&
              ObjectsCompat.equals(getTime(), typeWithAwsDateScalars.getTime()) &&
              ObjectsCompat.equals(getTimestamp(), typeWithAwsDateScalars.getTimestamp()) &&
              ObjectsCompat.equals(getUpdatedAt(), typeWithAwsDateScalars.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getDate())
      .append(getCreatedAt())
      .append(getTime())
      .append(getTimestamp())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"TypeWithAWSDateScalars {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"date=\\" + String.valueOf(getDate()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"time=\\" + String.valueOf(getTime()) + \\", \\")
      .append(\\"timestamp=\\" + String.valueOf(getTimestamp()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static TypeWithAWSDateScalars justId(String id) {
    return new TypeWithAWSDateScalars(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      date,
      createdAt,
      time,
      timestamp);
  }
  public interface BuildStep {
    TypeWithAWSDateScalars build();
    BuildStep id(String id);
    BuildStep date(Temporal.Date date);
    BuildStep createdAt(Temporal.DateTime createdAt);
    BuildStep time(Temporal.Time time);
    BuildStep timestamp(Temporal.Timestamp timestamp);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private Temporal.Date date;
    private Temporal.DateTime createdAt;
    private Temporal.Time time;
    private Temporal.Timestamp timestamp;
    @Override
     public TypeWithAWSDateScalars build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new TypeWithAWSDateScalars(
          id,
          date,
          createdAt,
          time,
          timestamp);
    }
    
    @Override
     public BuildStep date(Temporal.Date date) {
        this.date = date;
        return this;
    }
    
    @Override
     public BuildStep createdAt(Temporal.DateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
     public BuildStep time(Temporal.Time time) {
        this.time = time;
        return this;
    }
    
    @Override
     public BuildStep timestamp(Temporal.Timestamp timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, Temporal.Date date, Temporal.DateTime createdAt, Temporal.Time time, Temporal.Timestamp timestamp) {
      super.id(id);
      super.date(date)
        .createdAt(createdAt)
        .time(time)
        .timestamp(timestamp);
    }
    
    @Override
     public CopyOfBuilder date(Temporal.Date date) {
      return (CopyOfBuilder) super.date(date);
    }
    
    @Override
     public CopyOfBuilder createdAt(Temporal.DateTime createdAt) {
      return (CopyOfBuilder) super.createdAt(createdAt);
    }
    
    @Override
     public CopyOfBuilder time(Temporal.Time time) {
      return (CopyOfBuilder) super.time(time);
    }
    
    @Override
     public CopyOfBuilder timestamp(Temporal.Timestamp timestamp) {
      return (CopyOfBuilder) super.timestamp(timestamp);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should generate an enum for enum type 1`] = `
"package com.amplifyframework.datastore.generated.model;
/** Auto generated enum from GraphQL schema. */
@SuppressWarnings(\\"all\\")
public enum Status {
  pending,
  done
}
"
`;

exports[`AppSyncModelVisitor should generate model with key directive 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the authorBook type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"authorBooks\\")
@Index(name = \\"byAuthor\\", fields = {\\"author_id\\"})
@Index(name = \\"byBook\\", fields = {\\"book_id\\"})
public final class authorBook implements Model {
  public static final QueryField ID = field(\\"authorBook\\", \\"id\\");
  public static final QueryField AUTHOR_ID = field(\\"authorBook\\", \\"author_id\\");
  public static final QueryField BOOK_ID = field(\\"authorBook\\", \\"book_id\\");
  public static final QueryField AUTHOR = field(\\"authorBook\\", \\"author\\");
  public static final QueryField BOOK = field(\\"authorBook\\", \\"book\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String author_id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String book_id;
  private final @ModelField(targetType=\\"String\\") String author;
  private final @ModelField(targetType=\\"String\\") String book;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getAuthorId() {
      return author_id;
  }
  
  public String getBookId() {
      return book_id;
  }
  
  public String getAuthor() {
      return author;
  }
  
  public String getBook() {
      return book;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private authorBook(String id, String author_id, String book_id, String author, String book) {
    this.id = id;
    this.author_id = author_id;
    this.book_id = book_id;
    this.author = author;
    this.book = book;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      authorBook authorBook = (authorBook) obj;
      return ObjectsCompat.equals(getId(), authorBook.getId()) &&
              ObjectsCompat.equals(getAuthorId(), authorBook.getAuthorId()) &&
              ObjectsCompat.equals(getBookId(), authorBook.getBookId()) &&
              ObjectsCompat.equals(getAuthor(), authorBook.getAuthor()) &&
              ObjectsCompat.equals(getBook(), authorBook.getBook()) &&
              ObjectsCompat.equals(getCreatedAt(), authorBook.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), authorBook.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getAuthorId())
      .append(getBookId())
      .append(getAuthor())
      .append(getBook())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"authorBook {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"author_id=\\" + String.valueOf(getAuthorId()) + \\", \\")
      .append(\\"book_id=\\" + String.valueOf(getBookId()) + \\", \\")
      .append(\\"author=\\" + String.valueOf(getAuthor()) + \\", \\")
      .append(\\"book=\\" + String.valueOf(getBook()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static AuthorIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static authorBook justId(String id) {
    return new authorBook(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      author_id,
      book_id,
      author,
      book);
  }
  public interface AuthorIdStep {
    BookIdStep authorId(String authorId);
  }
  

  public interface BookIdStep {
    BuildStep bookId(String bookId);
  }
  

  public interface BuildStep {
    authorBook build();
    BuildStep id(String id);
    BuildStep author(String author);
    BuildStep book(String book);
  }
  

  public static class Builder implements AuthorIdStep, BookIdStep, BuildStep {
    private String id;
    private String author_id;
    private String book_id;
    private String author;
    private String book;
    @Override
     public authorBook build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new authorBook(
          id,
          author_id,
          book_id,
          author,
          book);
    }
    
    @Override
     public BookIdStep authorId(String authorId) {
        Objects.requireNonNull(authorId);
        this.author_id = authorId;
        return this;
    }
    
    @Override
     public BuildStep bookId(String bookId) {
        Objects.requireNonNull(bookId);
        this.book_id = bookId;
        return this;
    }
    
    @Override
     public BuildStep author(String author) {
        this.author = author;
        return this;
    }
    
    @Override
     public BuildStep book(String book) {
        this.book = book;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String authorId, String bookId, String author, String book) {
      super.id(id);
      super.authorId(authorId)
        .bookId(bookId)
        .author(author)
        .book(book);
    }
    
    @Override
     public CopyOfBuilder authorId(String authorId) {
      return (CopyOfBuilder) super.authorId(authorId);
    }
    
    @Override
     public CopyOfBuilder bookId(String bookId) {
      return (CopyOfBuilder) super.bookId(bookId);
    }
    
    @Override
     public CopyOfBuilder author(String author) {
      return (CopyOfBuilder) super.author(author);
    }
    
    @Override
     public CopyOfBuilder book(String book) {
      return (CopyOfBuilder) super.book(book);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should generate model with non-camel case field 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the NonCamelCaseField type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"NonCamelCaseFields\\")
public final class NonCamelCaseField implements Model {
  public static final QueryField ID = field(\\"NonCamelCaseField\\", \\"id\\");
  public static final QueryField EMPLOYEE_PID = field(\\"NonCamelCaseField\\", \\"employeePID\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String employeePID;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getEmployeePid() {
      return employeePID;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private NonCamelCaseField(String id, String employeePID) {
    this.id = id;
    this.employeePID = employeePID;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      NonCamelCaseField nonCamelCaseField = (NonCamelCaseField) obj;
      return ObjectsCompat.equals(getId(), nonCamelCaseField.getId()) &&
              ObjectsCompat.equals(getEmployeePid(), nonCamelCaseField.getEmployeePid()) &&
              ObjectsCompat.equals(getCreatedAt(), nonCamelCaseField.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), nonCamelCaseField.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getEmployeePid())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"NonCamelCaseField {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"employeePID=\\" + String.valueOf(getEmployeePid()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static NonCamelCaseField justId(String id) {
    return new NonCamelCaseField(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      employeePID);
  }
  public interface BuildStep {
    NonCamelCaseField build();
    BuildStep id(String id);
    BuildStep employeePid(String employeePid);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String employeePID;
    @Override
     public NonCamelCaseField build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new NonCamelCaseField(
          id,
          employeePID);
    }
    
    @Override
     public BuildStep employeePid(String employeePid) {
        this.employeePID = employeePid;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String employeePid) {
      super.id(id);
      super.employeePid(employeePid);
    }
    
    @Override
     public CopyOfBuilder employeePid(String employeePid) {
      return (CopyOfBuilder) super.employeePid(employeePid);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should generate model with snake case 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the snake_case type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"snake_cases\\")
public final class snake_case implements Model {
  public static final QueryField ID = field(\\"snake_case\\", \\"id\\");
  public static final QueryField NAME = field(\\"snake_case\\", \\"name\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String name;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getName() {
      return name;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private snake_case(String id, String name) {
    this.id = id;
    this.name = name;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      snake_case snakeCase = (snake_case) obj;
      return ObjectsCompat.equals(getId(), snakeCase.getId()) &&
              ObjectsCompat.equals(getName(), snakeCase.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), snakeCase.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), snakeCase.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"snake_case {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static snake_case justId(String id) {
    return new snake_case(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      name);
  }
  public interface BuildStep {
    snake_case build();
    BuildStep id(String id);
    BuildStep name(String name);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String name;
    @Override
     public snake_case build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new snake_case(
          id,
          name);
    }
    
    @Override
     public BuildStep name(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String name) {
      super.id(id);
      super.name(name);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should generate model with with snake_case field 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the SnakeCaseField type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"SnakeCaseFields\\")
public final class SnakeCaseField implements Model {
  public static final QueryField ID = field(\\"SnakeCaseField\\", \\"id\\");
  public static final QueryField FIRST_NAME = field(\\"SnakeCaseField\\", \\"first_name\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String first_name;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getFirstName() {
      return first_name;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private SnakeCaseField(String id, String first_name) {
    this.id = id;
    this.first_name = first_name;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      SnakeCaseField snakeCaseField = (SnakeCaseField) obj;
      return ObjectsCompat.equals(getId(), snakeCaseField.getId()) &&
              ObjectsCompat.equals(getFirstName(), snakeCaseField.getFirstName()) &&
              ObjectsCompat.equals(getCreatedAt(), snakeCaseField.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), snakeCaseField.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getFirstName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"SnakeCaseField {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"first_name=\\" + String.valueOf(getFirstName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static SnakeCaseField justId(String id) {
    return new SnakeCaseField(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      first_name);
  }
  public interface BuildStep {
    SnakeCaseField build();
    BuildStep id(String id);
    BuildStep firstName(String firstName);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String first_name;
    @Override
     public SnakeCaseField build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new SnakeCaseField(
          id,
          first_name);
    }
    
    @Override
     public BuildStep firstName(String firstName) {
        this.first_name = firstName;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String firstName) {
      super.id(id);
      super.firstName(firstName);
    }
    
    @Override
     public CopyOfBuilder firstName(String firstName) {
      return (CopyOfBuilder) super.firstName(firstName);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor should throw error if two fields have the same camel field 1`] = `"Fields \\"subject_name\\" and \\"subjectName\\" in sameCamelCaseField cannot be used at the same time which will result in the duplicate builder method."`;
