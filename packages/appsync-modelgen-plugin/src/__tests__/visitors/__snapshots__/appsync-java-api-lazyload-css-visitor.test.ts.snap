// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSyncModelVisitor API only Should generate for DefaultPKParent DefaultPKChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.ModelList;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the DefaultPKParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"DefaultPKParents\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class DefaultPKParent implements Model {
  public static final DefaultPKParentPath rootPath = new DefaultPKParentPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"DefaultPKParent\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"DefaultPKParent\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"DefaultPKChild\\") @HasMany(associatedWith = \\"parent\\", type = DefaultPKChild.class) ModelList<DefaultPKChild> children = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelList<DefaultPKChild> getChildren() {
      return children;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private DefaultPKParent(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      DefaultPKParent defaultPkParent = (DefaultPKParent) obj;
      return ObjectsCompat.equals(getId(), defaultPkParent.getId()) &&
              ObjectsCompat.equals(getContent(), defaultPkParent.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), defaultPkParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), defaultPkParent.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"DefaultPKParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static DefaultPKParent justId(String id) {
    return new DefaultPKParent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    DefaultPKParent build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public DefaultPKParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new DefaultPKParent(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the DefaultPKChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"DefaultPKChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class DefaultPKChild implements Model {
  public static final DefaultPKChildPath rootPath = new DefaultPKChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"DefaultPKChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"DefaultPKChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"DefaultPKChild\\", \\"defaultPKParentChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"DefaultPKParent\\") @BelongsTo(targetName = \\"defaultPKParentChildrenId\\", type = DefaultPKParent.class) ModelReference<DefaultPKParent> parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<DefaultPKParent> getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private DefaultPKChild(String id, String content, ModelReference<DefaultPKParent> parent) {
    this.id = id;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      DefaultPKChild defaultPkChild = (DefaultPKChild) obj;
      return ObjectsCompat.equals(getId(), defaultPkChild.getId()) &&
              ObjectsCompat.equals(getContent(), defaultPkChild.getContent()) &&
              ObjectsCompat.equals(getParent(), defaultPkChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), defaultPkChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), defaultPkChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"DefaultPKChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static DefaultPKChild justId(String id) {
    return new DefaultPKChild(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content,
      parent);
  }
  public interface BuildStep {
    DefaultPKChild build();
    BuildStep id(String id);
    BuildStep content(String content);
    BuildStep parent(DefaultPKParent parent);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    private ModelReference<DefaultPKParent> parent;
    public Builder() {
      
    }
    
    private Builder(String id, String content, ModelReference<DefaultPKParent> parent) {
      this.id = id;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public DefaultPKChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new DefaultPKChild(
          id,
          content,
          parent);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(DefaultPKParent parent) {
        this.parent = new LoadedModelReferenceImpl<>(parent);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content, ModelReference<DefaultPKParent> parent) {
      super(id, content, parent);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(DefaultPKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor API only Should generate for HasOneParent HasOneChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the HasOneParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneParents\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneParent implements Model {
  public static final HasOneParentPath rootPath = new HasOneParentPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"HasOneParent\\", \\"id\\");
  public static final QueryField HAS_ONE_PARENT_CHILD_ID = field(\\"HasOneParent\\", \\"hasOneParentChildId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"HasOneChild\\") @HasOne(associatedWith = \\"id\\", type = HasOneChild.class) ModelReference<HasOneChild> child = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String hasOneParentChildId;
  public String getId() {
      return id;
  }
  
  public ModelReference<HasOneChild> getChild() {
      return child;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getHasOneParentChildId() {
      return hasOneParentChildId;
  }
  
  private HasOneParent(String id, String hasOneParentChildId) {
    this.id = id;
    this.hasOneParentChildId = hasOneParentChildId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneParent hasOneParent = (HasOneParent) obj;
      return ObjectsCompat.equals(getId(), hasOneParent.getId()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneParent.getUpdatedAt()) &&
              ObjectsCompat.equals(getHasOneParentChildId(), hasOneParent.getHasOneParentChildId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getHasOneParentChildId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"hasOneParentChildId=\\" + String.valueOf(getHasOneParentChildId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneParent justId(String id) {
    return new HasOneParent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      hasOneParentChildId);
  }
  public interface BuildStep {
    HasOneParent build();
    BuildStep id(String id);
    BuildStep hasOneParentChildId(String hasOneParentChildId);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String hasOneParentChildId;
    public Builder() {
      
    }
    
    private Builder(String id, String hasOneParentChildId) {
      this.id = id;
      this.hasOneParentChildId = hasOneParentChildId;
    }
    
    @Override
     public HasOneParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneParent(
          id,
          hasOneParentChildId);
    }
    
    @Override
     public BuildStep hasOneParentChildId(String hasOneParentChildId) {
        this.hasOneParentChildId = hasOneParentChildId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String hasOneParentChildId) {
      super(id, hasOneParentChildId);
      
    }
    
    @Override
     public CopyOfBuilder hasOneParentChildId(String hasOneParentChildId) {
      return (CopyOfBuilder) super.hasOneParentChildId(hasOneParentChildId);
    }
  }
  
}

/** This is an auto generated class representing the HasOneChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneChild implements Model {
  public static final HasOneChildPath rootPath = new HasOneChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"HasOneChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasOneChild\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasOneChild(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneChild hasOneChild = (HasOneChild) obj;
      return ObjectsCompat.equals(getId(), hasOneChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasOneChild.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneChild justId(String id) {
    return new HasOneChild(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    HasOneChild build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public HasOneChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneChild(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor API only should generate for Blog, Post, and Comment models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.ModelList;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Blog type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Blogs\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"blogId\\"})
public final class Blog implements Model {
  public static final BlogPath rootPath = new BlogPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Blog\\", \\"id\\");
  public static final QueryField BLOG_ID = field(\\"Blog\\", \\"blogId\\");
  public static final QueryField NAME = field(\\"Blog\\", \\"name\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String blogId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Post\\", isRequired = true) @HasMany(associatedWith = \\"blog\\", type = Post.class) ModelList<Post> posts = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getBlogId() {
      return blogId;
  }
  
  public String getName() {
      return name;
  }
  
  public ModelList<Post> getPosts() {
      return posts;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Blog(String id, String blogId, String name) {
    this.id = id;
    this.blogId = blogId;
    this.name = name;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Blog blog = (Blog) obj;
      return ObjectsCompat.equals(getId(), blog.getId()) &&
              ObjectsCompat.equals(getBlogId(), blog.getBlogId()) &&
              ObjectsCompat.equals(getName(), blog.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), blog.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), blog.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getBlogId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Blog {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"blogId=\\" + String.valueOf(getBlogId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BlogIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Blog justId(String id) {
    return new Blog(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      blogId,
      name);
  }
  public interface BlogIdStep {
    NameStep blogId(String blogId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Blog build();
    BuildStep id(String id);
  }
  

  public static class Builder implements BlogIdStep, NameStep, BuildStep {
    private String id;
    private String blogId;
    private String name;
    public Builder() {
      
    }
    
    private Builder(String id, String blogId, String name) {
      this.id = id;
      this.blogId = blogId;
      this.name = name;
    }
    
    @Override
     public Blog build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Blog(
          id,
          blogId,
          name);
    }
    
    @Override
     public NameStep blogId(String blogId) {
        Objects.requireNonNull(blogId);
        this.blogId = blogId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String blogId, String name) {
      super(id, blogId, name);
      Objects.requireNonNull(blogId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder blogId(String blogId) {
      return (CopyOfBuilder) super.blogId(blogId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
  }
  
}

/** This is an auto generated class representing the Post type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Posts\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"postId\\",\\"title\\"})
public final class Post implements Model {
  public static final PostPath rootPath = new PostPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Post\\", \\"id\\");
  public static final QueryField POST_ID = field(\\"Post\\", \\"postId\\");
  public static final QueryField TITLE = field(\\"Post\\", \\"title\\");
  public static final QueryField BLOG = field(\\"Post\\", \\"blogPostsId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String postId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Blog\\", isRequired = true) @BelongsTo(targetName = \\"blogPostsId\\", type = Blog.class) ModelReference<Blog> blog;
  private final @ModelField(targetType=\\"Comment\\", isRequired = true) @HasMany(associatedWith = \\"post\\", type = Comment.class) ModelList<Comment> comments = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getPostId() {
      return postId;
  }
  
  public String getTitle() {
      return title;
  }
  
  public ModelReference<Blog> getBlog() {
      return blog;
  }
  
  public ModelList<Comment> getComments() {
      return comments;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Post(String id, String postId, String title, ModelReference<Blog> blog) {
    this.id = id;
    this.postId = postId;
    this.title = title;
    this.blog = blog;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Post post = (Post) obj;
      return ObjectsCompat.equals(getId(), post.getId()) &&
              ObjectsCompat.equals(getPostId(), post.getPostId()) &&
              ObjectsCompat.equals(getTitle(), post.getTitle()) &&
              ObjectsCompat.equals(getBlog(), post.getBlog()) &&
              ObjectsCompat.equals(getCreatedAt(), post.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), post.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getPostId())
      .append(getTitle())
      .append(getBlog())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Post {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"postId=\\" + String.valueOf(getPostId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"blog=\\" + String.valueOf(getBlog()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static PostIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Post justId(String id) {
    return new Post(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      postId,
      title,
      blog);
  }
  public interface PostIdStep {
    TitleStep postId(String postId);
  }
  

  public interface TitleStep {
    BlogStep title(String title);
  }
  

  public interface BlogStep {
    BuildStep blog(Blog blog);
  }
  

  public interface BuildStep {
    Post build();
    BuildStep id(String id);
  }
  

  public static class Builder implements PostIdStep, TitleStep, BlogStep, BuildStep {
    private String id;
    private String postId;
    private String title;
    private ModelReference<Blog> blog;
    public Builder() {
      
    }
    
    private Builder(String id, String postId, String title, ModelReference<Blog> blog) {
      this.id = id;
      this.postId = postId;
      this.title = title;
      this.blog = blog;
    }
    
    @Override
     public Post build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Post(
          id,
          postId,
          title,
          blog);
    }
    
    @Override
     public TitleStep postId(String postId) {
        Objects.requireNonNull(postId);
        this.postId = postId;
        return this;
    }
    
    @Override
     public BlogStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public BuildStep blog(Blog blog) {
        Objects.requireNonNull(blog);
        this.blog = new LoadedModelReferenceImpl<>(blog);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String postId, String title, ModelReference<Blog> blog) {
      super(id, postId, title, blog);
      Objects.requireNonNull(postId);
      Objects.requireNonNull(title);
      Objects.requireNonNull(blog);
    }
    
    @Override
     public CopyOfBuilder postId(String postId) {
      return (CopyOfBuilder) super.postId(postId);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder blog(Blog blog) {
      return (CopyOfBuilder) super.blog(blog);
    }
  }
  
}

/** This is an auto generated class representing the Comment type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Comments\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"commentId\\",\\"content\\"})
public final class Comment implements Model {
  public static final CommentPath rootPath = new CommentPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Comment\\", \\"id\\");
  public static final QueryField COMMENT_ID = field(\\"Comment\\", \\"commentId\\");
  public static final QueryField CONTENT = field(\\"Comment\\", \\"content\\");
  public static final QueryField POST = field(\\"Comment\\", \\"postCommentsId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String commentId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"Post\\", isRequired = true) @BelongsTo(targetName = \\"postCommentsId\\", type = Post.class) ModelReference<Post> post;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getCommentId() {
      return commentId;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<Post> getPost() {
      return post;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Comment(String id, String commentId, String content, ModelReference<Post> post) {
    this.id = id;
    this.commentId = commentId;
    this.content = content;
    this.post = post;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Comment comment = (Comment) obj;
      return ObjectsCompat.equals(getId(), comment.getId()) &&
              ObjectsCompat.equals(getCommentId(), comment.getCommentId()) &&
              ObjectsCompat.equals(getContent(), comment.getContent()) &&
              ObjectsCompat.equals(getPost(), comment.getPost()) &&
              ObjectsCompat.equals(getCreatedAt(), comment.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), comment.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCommentId())
      .append(getContent())
      .append(getPost())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Comment {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"commentId=\\" + String.valueOf(getCommentId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"post=\\" + String.valueOf(getPost()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CommentIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Comment justId(String id) {
    return new Comment(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      commentId,
      content,
      post);
  }
  public interface CommentIdStep {
    ContentStep commentId(String commentId);
  }
  

  public interface ContentStep {
    PostStep content(String content);
  }
  

  public interface PostStep {
    BuildStep post(Post post);
  }
  

  public interface BuildStep {
    Comment build();
    BuildStep id(String id);
  }
  

  public static class Builder implements CommentIdStep, ContentStep, PostStep, BuildStep {
    private String id;
    private String commentId;
    private String content;
    private ModelReference<Post> post;
    public Builder() {
      
    }
    
    private Builder(String id, String commentId, String content, ModelReference<Post> post) {
      this.id = id;
      this.commentId = commentId;
      this.content = content;
      this.post = post;
    }
    
    @Override
     public Comment build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Comment(
          id,
          commentId,
          content,
          post);
    }
    
    @Override
     public ContentStep commentId(String commentId) {
        Objects.requireNonNull(commentId);
        this.commentId = commentId;
        return this;
    }
    
    @Override
     public PostStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep post(Post post) {
        Objects.requireNonNull(post);
        this.post = new LoadedModelReferenceImpl<>(post);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String commentId, String content, ModelReference<Post> post) {
      super(id, commentId, content, post);
      Objects.requireNonNull(commentId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(post);
    }
    
    @Override
     public CopyOfBuilder commentId(String commentId) {
      return (CopyOfBuilder) super.commentId(commentId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder post(Post post) {
      return (CopyOfBuilder) super.post(post);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor API only should generate for CompositePKParent and (CompositePK, Implicit, StrangeExplicit, ChildSansBelongsTo) Child models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.ModelList;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the CompositePKParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"CompositePKParents\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"customId\\",\\"content\\"})
public final class CompositePKParent implements Model {
  public static final CompositePKParentPath rootPath = new CompositePKParentPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"CompositePKParent\\", \\"id\\");
  public static final QueryField CUSTOM_ID = field(\\"CompositePKParent\\", \\"customId\\");
  public static final QueryField CONTENT = field(\\"CompositePKParent\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String customId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKChild\\") @HasMany(associatedWith = \\"parent\\", type = CompositePKChild.class) ModelList<CompositePKChild> children = null;
  private final @ModelField(targetType=\\"ImplicitChild\\") @HasMany(associatedWith = \\"parent\\", type = ImplicitChild.class) ModelList<ImplicitChild> implicitChildren = null;
  private final @ModelField(targetType=\\"StrangeExplicitChild\\") @HasMany(associatedWith = \\"parent\\", type = StrangeExplicitChild.class) ModelList<StrangeExplicitChild> strangeChildren = null;
  private final @ModelField(targetType=\\"ChildSansBelongsTo\\") @HasMany(associatedWith = \\"compositePKParentChildrenSansBelongsToId\\", type = ChildSansBelongsTo.class) ModelList<ChildSansBelongsTo> childrenSansBelongsTo = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getCustomId() {
      return customId;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelList<CompositePKChild> getChildren() {
      return children;
  }
  
  public ModelList<ImplicitChild> getImplicitChildren() {
      return implicitChildren;
  }
  
  public ModelList<StrangeExplicitChild> getStrangeChildren() {
      return strangeChildren;
  }
  
  public ModelList<ChildSansBelongsTo> getChildrenSansBelongsTo() {
      return childrenSansBelongsTo;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private CompositePKParent(String id, String customId, String content) {
    this.id = id;
    this.customId = customId;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      CompositePKParent compositePkParent = (CompositePKParent) obj;
      return ObjectsCompat.equals(getId(), compositePkParent.getId()) &&
              ObjectsCompat.equals(getCustomId(), compositePkParent.getCustomId()) &&
              ObjectsCompat.equals(getContent(), compositePkParent.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), compositePkParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), compositePkParent.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCustomId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"CompositePKParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"customId=\\" + String.valueOf(getCustomId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CustomIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static CompositePKParent justId(String id) {
    return new CompositePKParent(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      customId,
      content);
  }
  public interface CustomIdStep {
    ContentStep customId(String customId);
  }
  

  public interface ContentStep {
    BuildStep content(String content);
  }
  

  public interface BuildStep {
    CompositePKParent build();
    BuildStep id(String id);
  }
  

  public static class Builder implements CustomIdStep, ContentStep, BuildStep {
    private String id;
    private String customId;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String customId, String content) {
      this.id = id;
      this.customId = customId;
      this.content = content;
    }
    
    @Override
     public CompositePKParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new CompositePKParent(
          id,
          customId,
          content);
    }
    
    @Override
     public ContentStep customId(String customId) {
        Objects.requireNonNull(customId);
        this.customId = customId;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String customId, String content) {
      super(id, customId, content);
      Objects.requireNonNull(customId);
      Objects.requireNonNull(content);
    }
    
    @Override
     public CopyOfBuilder customId(String customId) {
      return (CopyOfBuilder) super.customId(customId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the CompositePKChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"CompositePKChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
@Index(name = \\"byParent\\", fields = {\\"parentId\\",\\"parentTitle\\"})
public final class CompositePKChild implements Model {
  public static final CompositePKChildPath rootPath = new CompositePKChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"CompositePKChild\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"CompositePKChild\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"CompositePKChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"CompositePKChild\\", \\"parentId\\");
  public static final QueryField PARENT_TITLE = field(\\"CompositePKChild\\", \\"parentTitle\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\") @BelongsTo(targetName = \\"parentId\\", type = CompositePKParent.class) ModelReference<CompositePKParent> parent;
  private final @ModelField(targetType=\\"String\\") String parentTitle;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<CompositePKParent> getParent() {
      return parent;
  }
  
  public String getParentTitle() {
      return parentTitle;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private CompositePKChild(String id, String childId, String content, ModelReference<CompositePKParent> parent, String parentTitle) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.parent = parent;
    this.parentTitle = parentTitle;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      CompositePKChild compositePkChild = (CompositePKChild) obj;
      return ObjectsCompat.equals(getId(), compositePkChild.getId()) &&
              ObjectsCompat.equals(getChildId(), compositePkChild.getChildId()) &&
              ObjectsCompat.equals(getContent(), compositePkChild.getContent()) &&
              ObjectsCompat.equals(getParent(), compositePkChild.getParent()) &&
              ObjectsCompat.equals(getParentTitle(), compositePkChild.getParentTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), compositePkChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), compositePkChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getParent())
      .append(getParentTitle())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"CompositePKChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"parentTitle=\\" + String.valueOf(getParentTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static CompositePKChild justId(String id) {
    return new CompositePKChild(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      parent,
      parentTitle);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    BuildStep content(String content);
  }
  

  public interface BuildStep {
    CompositePKChild build();
    BuildStep id(String id);
    BuildStep parent(CompositePKParent parent);
    BuildStep parentTitle(String parentTitle);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private ModelReference<CompositePKParent> parent;
    private String parentTitle;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, ModelReference<CompositePKParent> parent, String parentTitle) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.parent = parent;
      this.parentTitle = parentTitle;
    }
    
    @Override
     public CompositePKChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new CompositePKChild(
          id,
          childId,
          content,
          parent,
          parentTitle);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        this.parent = new LoadedModelReferenceImpl<>(parent);
        return this;
    }
    
    @Override
     public BuildStep parentTitle(String parentTitle) {
        this.parentTitle = parentTitle;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, ModelReference<CompositePKParent> parent, String parentTitle) {
      super(id, childId, content, parent, parentTitle);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
    
    @Override
     public CopyOfBuilder parentTitle(String parentTitle) {
      return (CopyOfBuilder) super.parentTitle(parentTitle);
    }
  }
  
}

/** This is an auto generated class representing the ImplicitChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"ImplicitChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
public final class ImplicitChild implements Model {
  public static final ImplicitChildPath rootPath = new ImplicitChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"ImplicitChild\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"ImplicitChild\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"ImplicitChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"ImplicitChild\\", \\"compositePKParentImplicitChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\", isRequired = true) @BelongsTo(targetName = \\"compositePKParentImplicitChildrenId\\", type = CompositePKParent.class) ModelReference<CompositePKParent> parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<CompositePKParent> getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private ImplicitChild(String id, String childId, String content, ModelReference<CompositePKParent> parent) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      ImplicitChild implicitChild = (ImplicitChild) obj;
      return ObjectsCompat.equals(getId(), implicitChild.getId()) &&
              ObjectsCompat.equals(getChildId(), implicitChild.getChildId()) &&
              ObjectsCompat.equals(getContent(), implicitChild.getContent()) &&
              ObjectsCompat.equals(getParent(), implicitChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), implicitChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), implicitChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"ImplicitChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static ImplicitChild justId(String id) {
    return new ImplicitChild(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      parent);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    ParentStep content(String content);
  }
  

  public interface ParentStep {
    BuildStep parent(CompositePKParent parent);
  }
  

  public interface BuildStep {
    ImplicitChild build();
    BuildStep id(String id);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, ParentStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private ModelReference<CompositePKParent> parent;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, ModelReference<CompositePKParent> parent) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public ImplicitChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new ImplicitChild(
          id,
          childId,
          content,
          parent);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public ParentStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        Objects.requireNonNull(parent);
        this.parent = new LoadedModelReferenceImpl<>(parent);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, ModelReference<CompositePKParent> parent) {
      super(id, childId, content, parent);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(parent);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}

/** This is an auto generated class representing the StrangeExplicitChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"StrangeExplicitChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"strangeId\\",\\"content\\"})
@Index(name = \\"byCompositePKParentX\\", fields = {\\"strangeParentId\\",\\"strangeParentTitle\\"})
public final class StrangeExplicitChild implements Model {
  public static final StrangeExplicitChildPath rootPath = new StrangeExplicitChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"StrangeExplicitChild\\", \\"id\\");
  public static final QueryField STRANGE_ID = field(\\"StrangeExplicitChild\\", \\"strangeId\\");
  public static final QueryField CONTENT = field(\\"StrangeExplicitChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"StrangeExplicitChild\\", \\"strangeParentId\\");
  public static final QueryField STRANGE_PARENT_TITLE = field(\\"StrangeExplicitChild\\", \\"strangeParentTitle\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String strangeId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\", isRequired = true) @BelongsTo(targetName = \\"strangeParentId\\", type = CompositePKParent.class) ModelReference<CompositePKParent> parent;
  private final @ModelField(targetType=\\"String\\") String strangeParentTitle;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getStrangeId() {
      return strangeId;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<CompositePKParent> getParent() {
      return parent;
  }
  
  public String getStrangeParentTitle() {
      return strangeParentTitle;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private StrangeExplicitChild(String id, String strangeId, String content, ModelReference<CompositePKParent> parent, String strangeParentTitle) {
    this.id = id;
    this.strangeId = strangeId;
    this.content = content;
    this.parent = parent;
    this.strangeParentTitle = strangeParentTitle;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      StrangeExplicitChild strangeExplicitChild = (StrangeExplicitChild) obj;
      return ObjectsCompat.equals(getId(), strangeExplicitChild.getId()) &&
              ObjectsCompat.equals(getStrangeId(), strangeExplicitChild.getStrangeId()) &&
              ObjectsCompat.equals(getContent(), strangeExplicitChild.getContent()) &&
              ObjectsCompat.equals(getParent(), strangeExplicitChild.getParent()) &&
              ObjectsCompat.equals(getStrangeParentTitle(), strangeExplicitChild.getStrangeParentTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), strangeExplicitChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), strangeExplicitChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getStrangeId())
      .append(getContent())
      .append(getParent())
      .append(getStrangeParentTitle())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"StrangeExplicitChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"strangeId=\\" + String.valueOf(getStrangeId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"strangeParentTitle=\\" + String.valueOf(getStrangeParentTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static StrangeIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static StrangeExplicitChild justId(String id) {
    return new StrangeExplicitChild(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      strangeId,
      content,
      parent,
      strangeParentTitle);
  }
  public interface StrangeIdStep {
    ContentStep strangeId(String strangeId);
  }
  

  public interface ContentStep {
    ParentStep content(String content);
  }
  

  public interface ParentStep {
    BuildStep parent(CompositePKParent parent);
  }
  

  public interface BuildStep {
    StrangeExplicitChild build();
    BuildStep id(String id);
    BuildStep strangeParentTitle(String strangeParentTitle);
  }
  

  public static class Builder implements StrangeIdStep, ContentStep, ParentStep, BuildStep {
    private String id;
    private String strangeId;
    private String content;
    private ModelReference<CompositePKParent> parent;
    private String strangeParentTitle;
    public Builder() {
      
    }
    
    private Builder(String id, String strangeId, String content, ModelReference<CompositePKParent> parent, String strangeParentTitle) {
      this.id = id;
      this.strangeId = strangeId;
      this.content = content;
      this.parent = parent;
      this.strangeParentTitle = strangeParentTitle;
    }
    
    @Override
     public StrangeExplicitChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new StrangeExplicitChild(
          id,
          strangeId,
          content,
          parent,
          strangeParentTitle);
    }
    
    @Override
     public ContentStep strangeId(String strangeId) {
        Objects.requireNonNull(strangeId);
        this.strangeId = strangeId;
        return this;
    }
    
    @Override
     public ParentStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        Objects.requireNonNull(parent);
        this.parent = new LoadedModelReferenceImpl<>(parent);
        return this;
    }
    
    @Override
     public BuildStep strangeParentTitle(String strangeParentTitle) {
        this.strangeParentTitle = strangeParentTitle;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String strangeId, String content, ModelReference<CompositePKParent> parent, String strangeParentTitle) {
      super(id, strangeId, content, parent, strangeParentTitle);
      Objects.requireNonNull(strangeId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(parent);
    }
    
    @Override
     public CopyOfBuilder strangeId(String strangeId) {
      return (CopyOfBuilder) super.strangeId(strangeId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
    
    @Override
     public CopyOfBuilder strangeParentTitle(String strangeParentTitle) {
      return (CopyOfBuilder) super.strangeParentTitle(strangeParentTitle);
    }
  }
  
}

/** This is an auto generated class representing the ChildSansBelongsTo type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"ChildSansBelongsTos\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
@Index(name = \\"byParent\\", fields = {\\"compositePKParentChildrenSansBelongsToCustomId\\",\\"compositePKParentChildrenSansBelongsToContent\\"})
public final class ChildSansBelongsTo implements Model {
  public static final ChildSansBelongsToPath rootPath = new ChildSansBelongsToPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"ChildSansBelongsTo\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"ChildSansBelongsTo\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"ChildSansBelongsTo\\", \\"content\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_CUSTOM_ID = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToCustomId\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_CONTENT = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToContent\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_ID = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String compositePKParentChildrenSansBelongsToCustomId;
  private final @ModelField(targetType=\\"String\\") String compositePKParentChildrenSansBelongsToContent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String compositePKParentChildrenSansBelongsToId;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public String getCompositePkParentChildrenSansBelongsToCustomId() {
      return compositePKParentChildrenSansBelongsToCustomId;
  }
  
  public String getCompositePkParentChildrenSansBelongsToContent() {
      return compositePKParentChildrenSansBelongsToContent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getCompositePkParentChildrenSansBelongsToId() {
      return compositePKParentChildrenSansBelongsToId;
  }
  
  private ChildSansBelongsTo(String id, String childId, String content, String compositePKParentChildrenSansBelongsToCustomId, String compositePKParentChildrenSansBelongsToContent, String compositePKParentChildrenSansBelongsToId) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.compositePKParentChildrenSansBelongsToCustomId = compositePKParentChildrenSansBelongsToCustomId;
    this.compositePKParentChildrenSansBelongsToContent = compositePKParentChildrenSansBelongsToContent;
    this.compositePKParentChildrenSansBelongsToId = compositePKParentChildrenSansBelongsToId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      ChildSansBelongsTo childSansBelongsTo = (ChildSansBelongsTo) obj;
      return ObjectsCompat.equals(getId(), childSansBelongsTo.getId()) &&
              ObjectsCompat.equals(getChildId(), childSansBelongsTo.getChildId()) &&
              ObjectsCompat.equals(getContent(), childSansBelongsTo.getContent()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToCustomId(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToCustomId()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToContent(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToContent()) &&
              ObjectsCompat.equals(getCreatedAt(), childSansBelongsTo.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), childSansBelongsTo.getUpdatedAt()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToId(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getCompositePkParentChildrenSansBelongsToCustomId())
      .append(getCompositePkParentChildrenSansBelongsToContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getCompositePkParentChildrenSansBelongsToId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"ChildSansBelongsTo {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToCustomId=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToCustomId()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToContent=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToId=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static ChildSansBelongsTo justId(String id) {
    return new ChildSansBelongsTo(
      id,
      null,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      compositePKParentChildrenSansBelongsToCustomId,
      compositePKParentChildrenSansBelongsToContent,
      compositePKParentChildrenSansBelongsToId);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    CompositePkParentChildrenSansBelongsToCustomIdStep content(String content);
  }
  

  public interface CompositePkParentChildrenSansBelongsToCustomIdStep {
    BuildStep compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId);
  }
  

  public interface BuildStep {
    ChildSansBelongsTo build();
    BuildStep id(String id);
    BuildStep compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent);
    BuildStep compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, CompositePkParentChildrenSansBelongsToCustomIdStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private String compositePKParentChildrenSansBelongsToCustomId;
    private String compositePKParentChildrenSansBelongsToContent;
    private String compositePKParentChildrenSansBelongsToId;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, String compositePKParentChildrenSansBelongsToCustomId, String compositePKParentChildrenSansBelongsToContent, String compositePKParentChildrenSansBelongsToId) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.compositePKParentChildrenSansBelongsToCustomId = compositePKParentChildrenSansBelongsToCustomId;
      this.compositePKParentChildrenSansBelongsToContent = compositePKParentChildrenSansBelongsToContent;
      this.compositePKParentChildrenSansBelongsToId = compositePKParentChildrenSansBelongsToId;
    }
    
    @Override
     public ChildSansBelongsTo build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new ChildSansBelongsTo(
          id,
          childId,
          content,
          compositePKParentChildrenSansBelongsToCustomId,
          compositePKParentChildrenSansBelongsToContent,
          compositePKParentChildrenSansBelongsToId);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public CompositePkParentChildrenSansBelongsToCustomIdStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId) {
        Objects.requireNonNull(compositePkParentChildrenSansBelongsToCustomId);
        this.compositePKParentChildrenSansBelongsToCustomId = compositePkParentChildrenSansBelongsToCustomId;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent) {
        this.compositePKParentChildrenSansBelongsToContent = compositePkParentChildrenSansBelongsToContent;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId) {
        this.compositePKParentChildrenSansBelongsToId = compositePkParentChildrenSansBelongsToId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, String compositePkParentChildrenSansBelongsToCustomId, String compositePkParentChildrenSansBelongsToContent, String compositePkParentChildrenSansBelongsToId) {
      super(id, childId, content, compositePKParentChildrenSansBelongsToCustomId, compositePKParentChildrenSansBelongsToContent, compositePKParentChildrenSansBelongsToId);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(compositePKParentChildrenSansBelongsToCustomId);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToCustomId(compositePkParentChildrenSansBelongsToCustomId);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToContent(compositePkParentChildrenSansBelongsToContent);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToId(compositePkParentChildrenSansBelongsToId);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor API only should generate for Parent, HasOneChild, HasManyChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;
import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.ModelList;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Parent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Parents\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class Parent implements Model {
  public static final ParentPath rootPath = new ParentPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Parent\\", \\"id\\");
  public static final QueryField PARENT_CHILD_ID = field(\\"Parent\\", \\"parentChildId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"HasOneChild\\") @HasOne(associatedWith = \\"id\\", type = HasOneChild.class) ModelReference<HasOneChild> child = null;
  private final @ModelField(targetType=\\"HasManyChild\\") @HasMany(associatedWith = \\"parent\\", type = HasManyChild.class) ModelList<HasManyChild> children = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String parentChildId;
  public String getId() {
      return id;
  }
  
  public ModelReference<HasOneChild> getChild() {
      return child;
  }
  
  public ModelList<HasManyChild> getChildren() {
      return children;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getParentChildId() {
      return parentChildId;
  }
  
  private Parent(String id, String parentChildId) {
    this.id = id;
    this.parentChildId = parentChildId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Parent parent = (Parent) obj;
      return ObjectsCompat.equals(getId(), parent.getId()) &&
              ObjectsCompat.equals(getCreatedAt(), parent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), parent.getUpdatedAt()) &&
              ObjectsCompat.equals(getParentChildId(), parent.getParentChildId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getParentChildId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Parent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"parentChildId=\\" + String.valueOf(getParentChildId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Parent justId(String id) {
    return new Parent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      parentChildId);
  }
  public interface BuildStep {
    Parent build();
    BuildStep id(String id);
    BuildStep parentChildId(String parentChildId);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String parentChildId;
    public Builder() {
      
    }
    
    private Builder(String id, String parentChildId) {
      this.id = id;
      this.parentChildId = parentChildId;
    }
    
    @Override
     public Parent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Parent(
          id,
          parentChildId);
    }
    
    @Override
     public BuildStep parentChildId(String parentChildId) {
        this.parentChildId = parentChildId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String parentChildId) {
      super(id, parentChildId);
      
    }
    
    @Override
     public CopyOfBuilder parentChildId(String parentChildId) {
      return (CopyOfBuilder) super.parentChildId(parentChildId);
    }
  }
  
}

/** This is an auto generated class representing the HasOneChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneChild implements Model {
  public static final HasOneChildPath rootPath = new HasOneChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"HasOneChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasOneChild\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasOneChild(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneChild hasOneChild = (HasOneChild) obj;
      return ObjectsCompat.equals(getId(), hasOneChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasOneChild.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneChild justId(String id) {
    return new HasOneChild(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    HasOneChild build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public HasOneChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneChild(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the HasManyChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasManyChildren\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasManyChild implements Model {
  public static final HasManyChildPath rootPath = new HasManyChildPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"HasManyChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasManyChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"HasManyChild\\", \\"parentChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"Parent\\") @BelongsTo(targetName = \\"parentChildrenId\\", type = Parent.class) ModelReference<Parent> parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public ModelReference<Parent> getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasManyChild(String id, String content, ModelReference<Parent> parent) {
    this.id = id;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasManyChild hasManyChild = (HasManyChild) obj;
      return ObjectsCompat.equals(getId(), hasManyChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasManyChild.getContent()) &&
              ObjectsCompat.equals(getParent(), hasManyChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasManyChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasManyChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasManyChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasManyChild justId(String id) {
    return new HasManyChild(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content,
      parent);
  }
  public interface BuildStep {
    HasManyChild build();
    BuildStep id(String id);
    BuildStep content(String content);
    BuildStep parent(Parent parent);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    private ModelReference<Parent> parent;
    public Builder() {
      
    }
    
    private Builder(String id, String content, ModelReference<Parent> parent) {
      this.id = id;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public HasManyChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasManyChild(
          id,
          content,
          parent);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(Parent parent) {
        this.parent = new LoadedModelReferenceImpl<>(parent);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content, ModelReference<Parent> parent) {
      super(id, content, parent);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(Parent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor API only should generate for Project and Team models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.ModelReference;
import com.amplifyframework.core.model.LoadedModelReferenceImpl;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Project type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Projects\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"projectId\\",\\"name\\"})
public final class Project implements Model {
  public static final ProjectPath rootPath = new ProjectPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Project\\", \\"id\\");
  public static final QueryField PROJECT_ID = field(\\"Project\\", \\"projectId\\");
  public static final QueryField NAME = field(\\"Project\\", \\"name\\");
  public static final QueryField PROJECT_TEAM_ID = field(\\"Project\\", \\"projectTeamId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String projectId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Team\\") @HasOne(associatedWith = \\"teamId\\", type = Team.class) ModelReference<Team> team = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String projectTeamId;
  public String getId() {
      return id;
  }
  
  public String getProjectId() {
      return projectId;
  }
  
  public String getName() {
      return name;
  }
  
  public ModelReference<Team> getTeam() {
      return team;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getProjectTeamId() {
      return projectTeamId;
  }
  
  private Project(String id, String projectId, String name, String projectTeamId) {
    this.id = id;
    this.projectId = projectId;
    this.name = name;
    this.projectTeamId = projectTeamId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Project project = (Project) obj;
      return ObjectsCompat.equals(getId(), project.getId()) &&
              ObjectsCompat.equals(getProjectId(), project.getProjectId()) &&
              ObjectsCompat.equals(getName(), project.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), project.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), project.getUpdatedAt()) &&
              ObjectsCompat.equals(getProjectTeamId(), project.getProjectTeamId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getProjectId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getProjectTeamId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Project {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"projectId=\\" + String.valueOf(getProjectId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"projectTeamId=\\" + String.valueOf(getProjectTeamId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ProjectIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Project justId(String id) {
    return new Project(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      projectId,
      name,
      projectTeamId);
  }
  public interface ProjectIdStep {
    NameStep projectId(String projectId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Project build();
    BuildStep id(String id);
    BuildStep projectTeamId(String projectTeamId);
  }
  

  public static class Builder implements ProjectIdStep, NameStep, BuildStep {
    private String id;
    private String projectId;
    private String name;
    private String projectTeamId;
    public Builder() {
      
    }
    
    private Builder(String id, String projectId, String name, String projectTeamId) {
      this.id = id;
      this.projectId = projectId;
      this.name = name;
      this.projectTeamId = projectTeamId;
    }
    
    @Override
     public Project build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Project(
          id,
          projectId,
          name,
          projectTeamId);
    }
    
    @Override
     public NameStep projectId(String projectId) {
        Objects.requireNonNull(projectId);
        this.projectId = projectId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep projectTeamId(String projectTeamId) {
        this.projectTeamId = projectTeamId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String projectId, String name, String projectTeamId) {
      super(id, projectId, name, projectTeamId);
      Objects.requireNonNull(projectId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder projectId(String projectId) {
      return (CopyOfBuilder) super.projectId(projectId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder projectTeamId(String projectTeamId) {
      return (CopyOfBuilder) super.projectTeamId(projectTeamId);
    }
  }
  
}

/** This is an auto generated class representing the Team type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Teams\\", hasLazySupport = true)
@Index(name = \\"undefined\\", fields = {\\"teamId\\",\\"name\\"})
public final class Team implements Model {
  public static final TeamPath rootPath = new TeamPath(\\"root\\", false, null);
  public static final QueryField ID = field(\\"Team\\", \\"id\\");
  public static final QueryField TEAM_ID = field(\\"Team\\", \\"teamId\\");
  public static final QueryField NAME = field(\\"Team\\", \\"name\\");
  public static final QueryField PROJECT = field(\\"Team\\", \\"teamProjectId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String teamId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Project\\") @BelongsTo(targetName = \\"teamProjectId\\", type = Project.class) ModelReference<Project> project;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getTeamId() {
      return teamId;
  }
  
  public String getName() {
      return name;
  }
  
  public ModelReference<Project> getProject() {
      return project;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Team(String id, String teamId, String name, ModelReference<Project> project) {
    this.id = id;
    this.teamId = teamId;
    this.name = name;
    this.project = project;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Team team = (Team) obj;
      return ObjectsCompat.equals(getId(), team.getId()) &&
              ObjectsCompat.equals(getTeamId(), team.getTeamId()) &&
              ObjectsCompat.equals(getName(), team.getName()) &&
              ObjectsCompat.equals(getProject(), team.getProject()) &&
              ObjectsCompat.equals(getCreatedAt(), team.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), team.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTeamId())
      .append(getName())
      .append(getProject())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Team {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"teamId=\\" + String.valueOf(getTeamId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"project=\\" + String.valueOf(getProject()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TeamIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Team justId(String id) {
    return new Team(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      teamId,
      name,
      project);
  }
  public interface TeamIdStep {
    NameStep teamId(String teamId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Team build();
    BuildStep id(String id);
    BuildStep project(Project project);
  }
  

  public static class Builder implements TeamIdStep, NameStep, BuildStep {
    private String id;
    private String teamId;
    private String name;
    private ModelReference<Project> project;
    public Builder() {
      
    }
    
    private Builder(String id, String teamId, String name, ModelReference<Project> project) {
      this.id = id;
      this.teamId = teamId;
      this.name = name;
      this.project = project;
    }
    
    @Override
     public Team build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Team(
          id,
          teamId,
          name,
          project);
    }
    
    @Override
     public NameStep teamId(String teamId) {
        Objects.requireNonNull(teamId);
        this.teamId = teamId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep project(Project project) {
        this.project = new LoadedModelReferenceImpl<>(project);
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String teamId, String name, ModelReference<Project> project) {
      super(id, teamId, name, project);
      Objects.requireNonNull(teamId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder teamId(String teamId) {
      return (CopyOfBuilder) super.teamId(teamId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder project(Project project) {
      return (CopyOfBuilder) super.project(project);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled Should generate for DefaultPKParent DefaultPKChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the DefaultPKParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"DefaultPKParents\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class DefaultPKParent implements Model {
  public static final QueryField ID = field(\\"DefaultPKParent\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"DefaultPKParent\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"DefaultPKChild\\") @HasMany(associatedWith = \\"parent\\", type = DefaultPKChild.class) List<DefaultPKChild> children = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public List<DefaultPKChild> getChildren() {
      return children;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private DefaultPKParent(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      DefaultPKParent defaultPkParent = (DefaultPKParent) obj;
      return ObjectsCompat.equals(getId(), defaultPkParent.getId()) &&
              ObjectsCompat.equals(getContent(), defaultPkParent.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), defaultPkParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), defaultPkParent.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"DefaultPKParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static DefaultPKParent justId(String id) {
    return new DefaultPKParent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    DefaultPKParent build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public DefaultPKParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new DefaultPKParent(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the DefaultPKChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"DefaultPKChildren\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class DefaultPKChild implements Model {
  public static final QueryField ID = field(\\"DefaultPKChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"DefaultPKChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"DefaultPKChild\\", \\"defaultPKParentChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"DefaultPKParent\\") @BelongsTo(targetName = \\"defaultPKParentChildrenId\\", type = DefaultPKParent.class) DefaultPKParent parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public DefaultPKParent getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private DefaultPKChild(String id, String content, DefaultPKParent parent) {
    this.id = id;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      DefaultPKChild defaultPkChild = (DefaultPKChild) obj;
      return ObjectsCompat.equals(getId(), defaultPkChild.getId()) &&
              ObjectsCompat.equals(getContent(), defaultPkChild.getContent()) &&
              ObjectsCompat.equals(getParent(), defaultPkChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), defaultPkChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), defaultPkChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"DefaultPKChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static DefaultPKChild justId(String id) {
    return new DefaultPKChild(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content,
      parent);
  }
  public interface BuildStep {
    DefaultPKChild build();
    BuildStep id(String id);
    BuildStep content(String content);
    BuildStep parent(DefaultPKParent parent);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    private DefaultPKParent parent;
    public Builder() {
      
    }
    
    private Builder(String id, String content, DefaultPKParent parent) {
      this.id = id;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public DefaultPKChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new DefaultPKChild(
          id,
          content,
          parent);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(DefaultPKParent parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content, DefaultPKParent parent) {
      super(id, content, parent);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(DefaultPKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled Should generate for HasOneParent HasOneChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.temporal.Temporal;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the HasOneParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneParents\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneParent implements Model {
  public static final QueryField ID = field(\\"HasOneParent\\", \\"id\\");
  public static final QueryField HAS_ONE_PARENT_CHILD_ID = field(\\"HasOneParent\\", \\"hasOneParentChildId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"HasOneChild\\") @HasOne(associatedWith = \\"id\\", type = HasOneChild.class) HasOneChild child = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String hasOneParentChildId;
  public String getId() {
      return id;
  }
  
  public HasOneChild getChild() {
      return child;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getHasOneParentChildId() {
      return hasOneParentChildId;
  }
  
  private HasOneParent(String id, String hasOneParentChildId) {
    this.id = id;
    this.hasOneParentChildId = hasOneParentChildId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneParent hasOneParent = (HasOneParent) obj;
      return ObjectsCompat.equals(getId(), hasOneParent.getId()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneParent.getUpdatedAt()) &&
              ObjectsCompat.equals(getHasOneParentChildId(), hasOneParent.getHasOneParentChildId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getHasOneParentChildId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"hasOneParentChildId=\\" + String.valueOf(getHasOneParentChildId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneParent justId(String id) {
    return new HasOneParent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      hasOneParentChildId);
  }
  public interface BuildStep {
    HasOneParent build();
    BuildStep id(String id);
    BuildStep hasOneParentChildId(String hasOneParentChildId);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String hasOneParentChildId;
    public Builder() {
      
    }
    
    private Builder(String id, String hasOneParentChildId) {
      this.id = id;
      this.hasOneParentChildId = hasOneParentChildId;
    }
    
    @Override
     public HasOneParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneParent(
          id,
          hasOneParentChildId);
    }
    
    @Override
     public BuildStep hasOneParentChildId(String hasOneParentChildId) {
        this.hasOneParentChildId = hasOneParentChildId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String hasOneParentChildId) {
      super(id, hasOneParentChildId);
      
    }
    
    @Override
     public CopyOfBuilder hasOneParentChildId(String hasOneParentChildId) {
      return (CopyOfBuilder) super.hasOneParentChildId(hasOneParentChildId);
    }
  }
  
}

/** This is an auto generated class representing the HasOneChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneChildren\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneChild implements Model {
  public static final QueryField ID = field(\\"HasOneChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasOneChild\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasOneChild(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneChild hasOneChild = (HasOneChild) obj;
      return ObjectsCompat.equals(getId(), hasOneChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasOneChild.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneChild justId(String id) {
    return new HasOneChild(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    HasOneChild build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public HasOneChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneChild(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled should generate for Blog, Post, and Comment models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Blog type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Blogs\\")
@Index(name = \\"undefined\\", fields = {\\"blogId\\"})
public final class Blog implements Model {
  public static final QueryField ID = field(\\"Blog\\", \\"id\\");
  public static final QueryField BLOG_ID = field(\\"Blog\\", \\"blogId\\");
  public static final QueryField NAME = field(\\"Blog\\", \\"name\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String blogId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Post\\", isRequired = true) @HasMany(associatedWith = \\"blog\\", type = Post.class) List<Post> posts = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getBlogId() {
      return blogId;
  }
  
  public String getName() {
      return name;
  }
  
  public List<Post> getPosts() {
      return posts;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Blog(String id, String blogId, String name) {
    this.id = id;
    this.blogId = blogId;
    this.name = name;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Blog blog = (Blog) obj;
      return ObjectsCompat.equals(getId(), blog.getId()) &&
              ObjectsCompat.equals(getBlogId(), blog.getBlogId()) &&
              ObjectsCompat.equals(getName(), blog.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), blog.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), blog.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getBlogId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Blog {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"blogId=\\" + String.valueOf(getBlogId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BlogIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Blog justId(String id) {
    return new Blog(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      blogId,
      name);
  }
  public interface BlogIdStep {
    NameStep blogId(String blogId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Blog build();
    BuildStep id(String id);
  }
  

  public static class Builder implements BlogIdStep, NameStep, BuildStep {
    private String id;
    private String blogId;
    private String name;
    public Builder() {
      
    }
    
    private Builder(String id, String blogId, String name) {
      this.id = id;
      this.blogId = blogId;
      this.name = name;
    }
    
    @Override
     public Blog build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Blog(
          id,
          blogId,
          name);
    }
    
    @Override
     public NameStep blogId(String blogId) {
        Objects.requireNonNull(blogId);
        this.blogId = blogId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String blogId, String name) {
      super(id, blogId, name);
      Objects.requireNonNull(blogId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder blogId(String blogId) {
      return (CopyOfBuilder) super.blogId(blogId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
  }
  
}

/** This is an auto generated class representing the Post type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Posts\\")
@Index(name = \\"undefined\\", fields = {\\"postId\\",\\"title\\"})
public final class Post implements Model {
  public static final QueryField ID = field(\\"Post\\", \\"id\\");
  public static final QueryField POST_ID = field(\\"Post\\", \\"postId\\");
  public static final QueryField TITLE = field(\\"Post\\", \\"title\\");
  public static final QueryField BLOG = field(\\"Post\\", \\"blogPostsId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String postId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String title;
  private final @ModelField(targetType=\\"Blog\\", isRequired = true) @BelongsTo(targetName = \\"blogPostsId\\", type = Blog.class) Blog blog;
  private final @ModelField(targetType=\\"Comment\\", isRequired = true) @HasMany(associatedWith = \\"post\\", type = Comment.class) List<Comment> comments = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getPostId() {
      return postId;
  }
  
  public String getTitle() {
      return title;
  }
  
  public Blog getBlog() {
      return blog;
  }
  
  public List<Comment> getComments() {
      return comments;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Post(String id, String postId, String title, Blog blog) {
    this.id = id;
    this.postId = postId;
    this.title = title;
    this.blog = blog;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Post post = (Post) obj;
      return ObjectsCompat.equals(getId(), post.getId()) &&
              ObjectsCompat.equals(getPostId(), post.getPostId()) &&
              ObjectsCompat.equals(getTitle(), post.getTitle()) &&
              ObjectsCompat.equals(getBlog(), post.getBlog()) &&
              ObjectsCompat.equals(getCreatedAt(), post.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), post.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getPostId())
      .append(getTitle())
      .append(getBlog())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Post {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"postId=\\" + String.valueOf(getPostId()) + \\", \\")
      .append(\\"title=\\" + String.valueOf(getTitle()) + \\", \\")
      .append(\\"blog=\\" + String.valueOf(getBlog()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static PostIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Post justId(String id) {
    return new Post(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      postId,
      title,
      blog);
  }
  public interface PostIdStep {
    TitleStep postId(String postId);
  }
  

  public interface TitleStep {
    BlogStep title(String title);
  }
  

  public interface BlogStep {
    BuildStep blog(Blog blog);
  }
  

  public interface BuildStep {
    Post build();
    BuildStep id(String id);
  }
  

  public static class Builder implements PostIdStep, TitleStep, BlogStep, BuildStep {
    private String id;
    private String postId;
    private String title;
    private Blog blog;
    public Builder() {
      
    }
    
    private Builder(String id, String postId, String title, Blog blog) {
      this.id = id;
      this.postId = postId;
      this.title = title;
      this.blog = blog;
    }
    
    @Override
     public Post build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Post(
          id,
          postId,
          title,
          blog);
    }
    
    @Override
     public TitleStep postId(String postId) {
        Objects.requireNonNull(postId);
        this.postId = postId;
        return this;
    }
    
    @Override
     public BlogStep title(String title) {
        Objects.requireNonNull(title);
        this.title = title;
        return this;
    }
    
    @Override
     public BuildStep blog(Blog blog) {
        Objects.requireNonNull(blog);
        this.blog = blog;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String postId, String title, Blog blog) {
      super(id, postId, title, blog);
      Objects.requireNonNull(postId);
      Objects.requireNonNull(title);
      Objects.requireNonNull(blog);
    }
    
    @Override
     public CopyOfBuilder postId(String postId) {
      return (CopyOfBuilder) super.postId(postId);
    }
    
    @Override
     public CopyOfBuilder title(String title) {
      return (CopyOfBuilder) super.title(title);
    }
    
    @Override
     public CopyOfBuilder blog(Blog blog) {
      return (CopyOfBuilder) super.blog(blog);
    }
  }
  
}

/** This is an auto generated class representing the Comment type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Comments\\")
@Index(name = \\"undefined\\", fields = {\\"commentId\\",\\"content\\"})
public final class Comment implements Model {
  public static final QueryField ID = field(\\"Comment\\", \\"id\\");
  public static final QueryField COMMENT_ID = field(\\"Comment\\", \\"commentId\\");
  public static final QueryField CONTENT = field(\\"Comment\\", \\"content\\");
  public static final QueryField POST = field(\\"Comment\\", \\"postCommentsId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String commentId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"Post\\", isRequired = true) @BelongsTo(targetName = \\"postCommentsId\\", type = Post.class) Post post;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getCommentId() {
      return commentId;
  }
  
  public String getContent() {
      return content;
  }
  
  public Post getPost() {
      return post;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Comment(String id, String commentId, String content, Post post) {
    this.id = id;
    this.commentId = commentId;
    this.content = content;
    this.post = post;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Comment comment = (Comment) obj;
      return ObjectsCompat.equals(getId(), comment.getId()) &&
              ObjectsCompat.equals(getCommentId(), comment.getCommentId()) &&
              ObjectsCompat.equals(getContent(), comment.getContent()) &&
              ObjectsCompat.equals(getPost(), comment.getPost()) &&
              ObjectsCompat.equals(getCreatedAt(), comment.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), comment.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCommentId())
      .append(getContent())
      .append(getPost())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Comment {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"commentId=\\" + String.valueOf(getCommentId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"post=\\" + String.valueOf(getPost()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CommentIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Comment justId(String id) {
    return new Comment(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      commentId,
      content,
      post);
  }
  public interface CommentIdStep {
    ContentStep commentId(String commentId);
  }
  

  public interface ContentStep {
    PostStep content(String content);
  }
  

  public interface PostStep {
    BuildStep post(Post post);
  }
  

  public interface BuildStep {
    Comment build();
    BuildStep id(String id);
  }
  

  public static class Builder implements CommentIdStep, ContentStep, PostStep, BuildStep {
    private String id;
    private String commentId;
    private String content;
    private Post post;
    public Builder() {
      
    }
    
    private Builder(String id, String commentId, String content, Post post) {
      this.id = id;
      this.commentId = commentId;
      this.content = content;
      this.post = post;
    }
    
    @Override
     public Comment build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Comment(
          id,
          commentId,
          content,
          post);
    }
    
    @Override
     public ContentStep commentId(String commentId) {
        Objects.requireNonNull(commentId);
        this.commentId = commentId;
        return this;
    }
    
    @Override
     public PostStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep post(Post post) {
        Objects.requireNonNull(post);
        this.post = post;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String commentId, String content, Post post) {
      super(id, commentId, content, post);
      Objects.requireNonNull(commentId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(post);
    }
    
    @Override
     public CopyOfBuilder commentId(String commentId) {
      return (CopyOfBuilder) super.commentId(commentId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder post(Post post) {
      return (CopyOfBuilder) super.post(post);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled should generate for CompositePKParent and (CompositePK, Implicit, StrangeExplicit, ChildSansBelongsTo) Child models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the CompositePKParent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"CompositePKParents\\")
@Index(name = \\"undefined\\", fields = {\\"customId\\",\\"content\\"})
public final class CompositePKParent implements Model {
  public static final QueryField ID = field(\\"CompositePKParent\\", \\"id\\");
  public static final QueryField CUSTOM_ID = field(\\"CompositePKParent\\", \\"customId\\");
  public static final QueryField CONTENT = field(\\"CompositePKParent\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String customId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKChild\\") @HasMany(associatedWith = \\"parent\\", type = CompositePKChild.class) List<CompositePKChild> children = null;
  private final @ModelField(targetType=\\"ImplicitChild\\") @HasMany(associatedWith = \\"parent\\", type = ImplicitChild.class) List<ImplicitChild> implicitChildren = null;
  private final @ModelField(targetType=\\"StrangeExplicitChild\\") @HasMany(associatedWith = \\"parent\\", type = StrangeExplicitChild.class) List<StrangeExplicitChild> strangeChildren = null;
  private final @ModelField(targetType=\\"ChildSansBelongsTo\\") @HasMany(associatedWith = \\"compositePKParentChildrenSansBelongsToId\\", type = ChildSansBelongsTo.class) List<ChildSansBelongsTo> childrenSansBelongsTo = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getCustomId() {
      return customId;
  }
  
  public String getContent() {
      return content;
  }
  
  public List<CompositePKChild> getChildren() {
      return children;
  }
  
  public List<ImplicitChild> getImplicitChildren() {
      return implicitChildren;
  }
  
  public List<StrangeExplicitChild> getStrangeChildren() {
      return strangeChildren;
  }
  
  public List<ChildSansBelongsTo> getChildrenSansBelongsTo() {
      return childrenSansBelongsTo;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private CompositePKParent(String id, String customId, String content) {
    this.id = id;
    this.customId = customId;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      CompositePKParent compositePkParent = (CompositePKParent) obj;
      return ObjectsCompat.equals(getId(), compositePkParent.getId()) &&
              ObjectsCompat.equals(getCustomId(), compositePkParent.getCustomId()) &&
              ObjectsCompat.equals(getContent(), compositePkParent.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), compositePkParent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), compositePkParent.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCustomId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"CompositePKParent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"customId=\\" + String.valueOf(getCustomId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static CustomIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static CompositePKParent justId(String id) {
    return new CompositePKParent(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      customId,
      content);
  }
  public interface CustomIdStep {
    ContentStep customId(String customId);
  }
  

  public interface ContentStep {
    BuildStep content(String content);
  }
  

  public interface BuildStep {
    CompositePKParent build();
    BuildStep id(String id);
  }
  

  public static class Builder implements CustomIdStep, ContentStep, BuildStep {
    private String id;
    private String customId;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String customId, String content) {
      this.id = id;
      this.customId = customId;
      this.content = content;
    }
    
    @Override
     public CompositePKParent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new CompositePKParent(
          id,
          customId,
          content);
    }
    
    @Override
     public ContentStep customId(String customId) {
        Objects.requireNonNull(customId);
        this.customId = customId;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String customId, String content) {
      super(id, customId, content);
      Objects.requireNonNull(customId);
      Objects.requireNonNull(content);
    }
    
    @Override
     public CopyOfBuilder customId(String customId) {
      return (CopyOfBuilder) super.customId(customId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the CompositePKChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"CompositePKChildren\\")
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
@Index(name = \\"byParent\\", fields = {\\"parentId\\",\\"parentTitle\\"})
public final class CompositePKChild implements Model {
  public static final QueryField ID = field(\\"CompositePKChild\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"CompositePKChild\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"CompositePKChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"CompositePKChild\\", \\"parentId\\");
  public static final QueryField PARENT_TITLE = field(\\"CompositePKChild\\", \\"parentTitle\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\") @BelongsTo(targetName = \\"parentId\\", type = CompositePKParent.class) CompositePKParent parent;
  private final @ModelField(targetType=\\"String\\") String parentTitle;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public CompositePKParent getParent() {
      return parent;
  }
  
  public String getParentTitle() {
      return parentTitle;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private CompositePKChild(String id, String childId, String content, CompositePKParent parent, String parentTitle) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.parent = parent;
    this.parentTitle = parentTitle;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      CompositePKChild compositePkChild = (CompositePKChild) obj;
      return ObjectsCompat.equals(getId(), compositePkChild.getId()) &&
              ObjectsCompat.equals(getChildId(), compositePkChild.getChildId()) &&
              ObjectsCompat.equals(getContent(), compositePkChild.getContent()) &&
              ObjectsCompat.equals(getParent(), compositePkChild.getParent()) &&
              ObjectsCompat.equals(getParentTitle(), compositePkChild.getParentTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), compositePkChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), compositePkChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getParent())
      .append(getParentTitle())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"CompositePKChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"parentTitle=\\" + String.valueOf(getParentTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static CompositePKChild justId(String id) {
    return new CompositePKChild(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      parent,
      parentTitle);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    BuildStep content(String content);
  }
  

  public interface BuildStep {
    CompositePKChild build();
    BuildStep id(String id);
    BuildStep parent(CompositePKParent parent);
    BuildStep parentTitle(String parentTitle);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private CompositePKParent parent;
    private String parentTitle;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, CompositePKParent parent, String parentTitle) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.parent = parent;
      this.parentTitle = parentTitle;
    }
    
    @Override
     public CompositePKChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new CompositePKChild(
          id,
          childId,
          content,
          parent,
          parentTitle);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public BuildStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        this.parent = parent;
        return this;
    }
    
    @Override
     public BuildStep parentTitle(String parentTitle) {
        this.parentTitle = parentTitle;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, CompositePKParent parent, String parentTitle) {
      super(id, childId, content, parent, parentTitle);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
    
    @Override
     public CopyOfBuilder parentTitle(String parentTitle) {
      return (CopyOfBuilder) super.parentTitle(parentTitle);
    }
  }
  
}

/** This is an auto generated class representing the ImplicitChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"ImplicitChildren\\")
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
public final class ImplicitChild implements Model {
  public static final QueryField ID = field(\\"ImplicitChild\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"ImplicitChild\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"ImplicitChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"ImplicitChild\\", \\"compositePKParentImplicitChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\", isRequired = true) @BelongsTo(targetName = \\"compositePKParentImplicitChildrenId\\", type = CompositePKParent.class) CompositePKParent parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public CompositePKParent getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private ImplicitChild(String id, String childId, String content, CompositePKParent parent) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      ImplicitChild implicitChild = (ImplicitChild) obj;
      return ObjectsCompat.equals(getId(), implicitChild.getId()) &&
              ObjectsCompat.equals(getChildId(), implicitChild.getChildId()) &&
              ObjectsCompat.equals(getContent(), implicitChild.getContent()) &&
              ObjectsCompat.equals(getParent(), implicitChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), implicitChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), implicitChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"ImplicitChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static ImplicitChild justId(String id) {
    return new ImplicitChild(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      parent);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    ParentStep content(String content);
  }
  

  public interface ParentStep {
    BuildStep parent(CompositePKParent parent);
  }
  

  public interface BuildStep {
    ImplicitChild build();
    BuildStep id(String id);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, ParentStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private CompositePKParent parent;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, CompositePKParent parent) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public ImplicitChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new ImplicitChild(
          id,
          childId,
          content,
          parent);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public ParentStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        Objects.requireNonNull(parent);
        this.parent = parent;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, CompositePKParent parent) {
      super(id, childId, content, parent);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(parent);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}

/** This is an auto generated class representing the StrangeExplicitChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"StrangeExplicitChildren\\")
@Index(name = \\"undefined\\", fields = {\\"strangeId\\",\\"content\\"})
@Index(name = \\"byCompositePKParentX\\", fields = {\\"strangeParentId\\",\\"strangeParentTitle\\"})
public final class StrangeExplicitChild implements Model {
  public static final QueryField ID = field(\\"StrangeExplicitChild\\", \\"id\\");
  public static final QueryField STRANGE_ID = field(\\"StrangeExplicitChild\\", \\"strangeId\\");
  public static final QueryField CONTENT = field(\\"StrangeExplicitChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"StrangeExplicitChild\\", \\"strangeParentId\\");
  public static final QueryField STRANGE_PARENT_TITLE = field(\\"StrangeExplicitChild\\", \\"strangeParentTitle\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String strangeId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"CompositePKParent\\", isRequired = true) @BelongsTo(targetName = \\"strangeParentId\\", type = CompositePKParent.class) CompositePKParent parent;
  private final @ModelField(targetType=\\"String\\") String strangeParentTitle;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getStrangeId() {
      return strangeId;
  }
  
  public String getContent() {
      return content;
  }
  
  public CompositePKParent getParent() {
      return parent;
  }
  
  public String getStrangeParentTitle() {
      return strangeParentTitle;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private StrangeExplicitChild(String id, String strangeId, String content, CompositePKParent parent, String strangeParentTitle) {
    this.id = id;
    this.strangeId = strangeId;
    this.content = content;
    this.parent = parent;
    this.strangeParentTitle = strangeParentTitle;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      StrangeExplicitChild strangeExplicitChild = (StrangeExplicitChild) obj;
      return ObjectsCompat.equals(getId(), strangeExplicitChild.getId()) &&
              ObjectsCompat.equals(getStrangeId(), strangeExplicitChild.getStrangeId()) &&
              ObjectsCompat.equals(getContent(), strangeExplicitChild.getContent()) &&
              ObjectsCompat.equals(getParent(), strangeExplicitChild.getParent()) &&
              ObjectsCompat.equals(getStrangeParentTitle(), strangeExplicitChild.getStrangeParentTitle()) &&
              ObjectsCompat.equals(getCreatedAt(), strangeExplicitChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), strangeExplicitChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getStrangeId())
      .append(getContent())
      .append(getParent())
      .append(getStrangeParentTitle())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"StrangeExplicitChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"strangeId=\\" + String.valueOf(getStrangeId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"strangeParentTitle=\\" + String.valueOf(getStrangeParentTitle()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static StrangeIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static StrangeExplicitChild justId(String id) {
    return new StrangeExplicitChild(
      id,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      strangeId,
      content,
      parent,
      strangeParentTitle);
  }
  public interface StrangeIdStep {
    ContentStep strangeId(String strangeId);
  }
  

  public interface ContentStep {
    ParentStep content(String content);
  }
  

  public interface ParentStep {
    BuildStep parent(CompositePKParent parent);
  }
  

  public interface BuildStep {
    StrangeExplicitChild build();
    BuildStep id(String id);
    BuildStep strangeParentTitle(String strangeParentTitle);
  }
  

  public static class Builder implements StrangeIdStep, ContentStep, ParentStep, BuildStep {
    private String id;
    private String strangeId;
    private String content;
    private CompositePKParent parent;
    private String strangeParentTitle;
    public Builder() {
      
    }
    
    private Builder(String id, String strangeId, String content, CompositePKParent parent, String strangeParentTitle) {
      this.id = id;
      this.strangeId = strangeId;
      this.content = content;
      this.parent = parent;
      this.strangeParentTitle = strangeParentTitle;
    }
    
    @Override
     public StrangeExplicitChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new StrangeExplicitChild(
          id,
          strangeId,
          content,
          parent,
          strangeParentTitle);
    }
    
    @Override
     public ContentStep strangeId(String strangeId) {
        Objects.requireNonNull(strangeId);
        this.strangeId = strangeId;
        return this;
    }
    
    @Override
     public ParentStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(CompositePKParent parent) {
        Objects.requireNonNull(parent);
        this.parent = parent;
        return this;
    }
    
    @Override
     public BuildStep strangeParentTitle(String strangeParentTitle) {
        this.strangeParentTitle = strangeParentTitle;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String strangeId, String content, CompositePKParent parent, String strangeParentTitle) {
      super(id, strangeId, content, parent, strangeParentTitle);
      Objects.requireNonNull(strangeId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(parent);
    }
    
    @Override
     public CopyOfBuilder strangeId(String strangeId) {
      return (CopyOfBuilder) super.strangeId(strangeId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(CompositePKParent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
    
    @Override
     public CopyOfBuilder strangeParentTitle(String strangeParentTitle) {
      return (CopyOfBuilder) super.strangeParentTitle(strangeParentTitle);
    }
  }
  
}

/** This is an auto generated class representing the ChildSansBelongsTo type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"ChildSansBelongsTos\\")
@Index(name = \\"undefined\\", fields = {\\"childId\\",\\"content\\"})
@Index(name = \\"byParent\\", fields = {\\"compositePKParentChildrenSansBelongsToCustomId\\",\\"compositePKParentChildrenSansBelongsToContent\\"})
public final class ChildSansBelongsTo implements Model {
  public static final QueryField ID = field(\\"ChildSansBelongsTo\\", \\"id\\");
  public static final QueryField CHILD_ID = field(\\"ChildSansBelongsTo\\", \\"childId\\");
  public static final QueryField CONTENT = field(\\"ChildSansBelongsTo\\", \\"content\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_CUSTOM_ID = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToCustomId\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_CONTENT = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToContent\\");
  public static final QueryField COMPOSITE_PK_PARENT_CHILDREN_SANS_BELONGS_TO_ID = field(\\"ChildSansBelongsTo\\", \\"compositePKParentChildrenSansBelongsToId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String childId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String content;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String compositePKParentChildrenSansBelongsToCustomId;
  private final @ModelField(targetType=\\"String\\") String compositePKParentChildrenSansBelongsToContent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String compositePKParentChildrenSansBelongsToId;
  public String getId() {
      return id;
  }
  
  public String getChildId() {
      return childId;
  }
  
  public String getContent() {
      return content;
  }
  
  public String getCompositePkParentChildrenSansBelongsToCustomId() {
      return compositePKParentChildrenSansBelongsToCustomId;
  }
  
  public String getCompositePkParentChildrenSansBelongsToContent() {
      return compositePKParentChildrenSansBelongsToContent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getCompositePkParentChildrenSansBelongsToId() {
      return compositePKParentChildrenSansBelongsToId;
  }
  
  private ChildSansBelongsTo(String id, String childId, String content, String compositePKParentChildrenSansBelongsToCustomId, String compositePKParentChildrenSansBelongsToContent, String compositePKParentChildrenSansBelongsToId) {
    this.id = id;
    this.childId = childId;
    this.content = content;
    this.compositePKParentChildrenSansBelongsToCustomId = compositePKParentChildrenSansBelongsToCustomId;
    this.compositePKParentChildrenSansBelongsToContent = compositePKParentChildrenSansBelongsToContent;
    this.compositePKParentChildrenSansBelongsToId = compositePKParentChildrenSansBelongsToId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      ChildSansBelongsTo childSansBelongsTo = (ChildSansBelongsTo) obj;
      return ObjectsCompat.equals(getId(), childSansBelongsTo.getId()) &&
              ObjectsCompat.equals(getChildId(), childSansBelongsTo.getChildId()) &&
              ObjectsCompat.equals(getContent(), childSansBelongsTo.getContent()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToCustomId(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToCustomId()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToContent(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToContent()) &&
              ObjectsCompat.equals(getCreatedAt(), childSansBelongsTo.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), childSansBelongsTo.getUpdatedAt()) &&
              ObjectsCompat.equals(getCompositePkParentChildrenSansBelongsToId(), childSansBelongsTo.getCompositePkParentChildrenSansBelongsToId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getChildId())
      .append(getContent())
      .append(getCompositePkParentChildrenSansBelongsToCustomId())
      .append(getCompositePkParentChildrenSansBelongsToContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getCompositePkParentChildrenSansBelongsToId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"ChildSansBelongsTo {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"childId=\\" + String.valueOf(getChildId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToCustomId=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToCustomId()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToContent=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"compositePKParentChildrenSansBelongsToId=\\" + String.valueOf(getCompositePkParentChildrenSansBelongsToId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ChildIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static ChildSansBelongsTo justId(String id) {
    return new ChildSansBelongsTo(
      id,
      null,
      null,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      childId,
      content,
      compositePKParentChildrenSansBelongsToCustomId,
      compositePKParentChildrenSansBelongsToContent,
      compositePKParentChildrenSansBelongsToId);
  }
  public interface ChildIdStep {
    ContentStep childId(String childId);
  }
  

  public interface ContentStep {
    CompositePkParentChildrenSansBelongsToCustomIdStep content(String content);
  }
  

  public interface CompositePkParentChildrenSansBelongsToCustomIdStep {
    BuildStep compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId);
  }
  

  public interface BuildStep {
    ChildSansBelongsTo build();
    BuildStep id(String id);
    BuildStep compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent);
    BuildStep compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId);
  }
  

  public static class Builder implements ChildIdStep, ContentStep, CompositePkParentChildrenSansBelongsToCustomIdStep, BuildStep {
    private String id;
    private String childId;
    private String content;
    private String compositePKParentChildrenSansBelongsToCustomId;
    private String compositePKParentChildrenSansBelongsToContent;
    private String compositePKParentChildrenSansBelongsToId;
    public Builder() {
      
    }
    
    private Builder(String id, String childId, String content, String compositePKParentChildrenSansBelongsToCustomId, String compositePKParentChildrenSansBelongsToContent, String compositePKParentChildrenSansBelongsToId) {
      this.id = id;
      this.childId = childId;
      this.content = content;
      this.compositePKParentChildrenSansBelongsToCustomId = compositePKParentChildrenSansBelongsToCustomId;
      this.compositePKParentChildrenSansBelongsToContent = compositePKParentChildrenSansBelongsToContent;
      this.compositePKParentChildrenSansBelongsToId = compositePKParentChildrenSansBelongsToId;
    }
    
    @Override
     public ChildSansBelongsTo build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new ChildSansBelongsTo(
          id,
          childId,
          content,
          compositePKParentChildrenSansBelongsToCustomId,
          compositePKParentChildrenSansBelongsToContent,
          compositePKParentChildrenSansBelongsToId);
    }
    
    @Override
     public ContentStep childId(String childId) {
        Objects.requireNonNull(childId);
        this.childId = childId;
        return this;
    }
    
    @Override
     public CompositePkParentChildrenSansBelongsToCustomIdStep content(String content) {
        Objects.requireNonNull(content);
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId) {
        Objects.requireNonNull(compositePkParentChildrenSansBelongsToCustomId);
        this.compositePKParentChildrenSansBelongsToCustomId = compositePkParentChildrenSansBelongsToCustomId;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent) {
        this.compositePKParentChildrenSansBelongsToContent = compositePkParentChildrenSansBelongsToContent;
        return this;
    }
    
    @Override
     public BuildStep compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId) {
        this.compositePKParentChildrenSansBelongsToId = compositePkParentChildrenSansBelongsToId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String childId, String content, String compositePkParentChildrenSansBelongsToCustomId, String compositePkParentChildrenSansBelongsToContent, String compositePkParentChildrenSansBelongsToId) {
      super(id, childId, content, compositePKParentChildrenSansBelongsToCustomId, compositePKParentChildrenSansBelongsToContent, compositePKParentChildrenSansBelongsToId);
      Objects.requireNonNull(childId);
      Objects.requireNonNull(content);
      Objects.requireNonNull(compositePKParentChildrenSansBelongsToCustomId);
    }
    
    @Override
     public CopyOfBuilder childId(String childId) {
      return (CopyOfBuilder) super.childId(childId);
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToCustomId(String compositePkParentChildrenSansBelongsToCustomId) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToCustomId(compositePkParentChildrenSansBelongsToCustomId);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToContent(String compositePkParentChildrenSansBelongsToContent) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToContent(compositePkParentChildrenSansBelongsToContent);
    }
    
    @Override
     public CopyOfBuilder compositePkParentChildrenSansBelongsToId(String compositePkParentChildrenSansBelongsToId) {
      return (CopyOfBuilder) super.compositePkParentChildrenSansBelongsToId(compositePkParentChildrenSansBelongsToId);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled should generate for Parent, HasOneChild, HasManyChild models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.annotations.HasMany;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Parent type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Parents\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class Parent implements Model {
  public static final QueryField ID = field(\\"Parent\\", \\"id\\");
  public static final QueryField PARENT_CHILD_ID = field(\\"Parent\\", \\"parentChildId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"HasOneChild\\") @HasOne(associatedWith = \\"id\\", type = HasOneChild.class) HasOneChild child = null;
  private final @ModelField(targetType=\\"HasManyChild\\") @HasMany(associatedWith = \\"parent\\", type = HasManyChild.class) List<HasManyChild> children = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String parentChildId;
  public String getId() {
      return id;
  }
  
  public HasOneChild getChild() {
      return child;
  }
  
  public List<HasManyChild> getChildren() {
      return children;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getParentChildId() {
      return parentChildId;
  }
  
  private Parent(String id, String parentChildId) {
    this.id = id;
    this.parentChildId = parentChildId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Parent parent = (Parent) obj;
      return ObjectsCompat.equals(getId(), parent.getId()) &&
              ObjectsCompat.equals(getCreatedAt(), parent.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), parent.getUpdatedAt()) &&
              ObjectsCompat.equals(getParentChildId(), parent.getParentChildId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getParentChildId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Parent {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"parentChildId=\\" + String.valueOf(getParentChildId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Parent justId(String id) {
    return new Parent(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      parentChildId);
  }
  public interface BuildStep {
    Parent build();
    BuildStep id(String id);
    BuildStep parentChildId(String parentChildId);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String parentChildId;
    public Builder() {
      
    }
    
    private Builder(String id, String parentChildId) {
      this.id = id;
      this.parentChildId = parentChildId;
    }
    
    @Override
     public Parent build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Parent(
          id,
          parentChildId);
    }
    
    @Override
     public BuildStep parentChildId(String parentChildId) {
        this.parentChildId = parentChildId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String parentChildId) {
      super(id, parentChildId);
      
    }
    
    @Override
     public CopyOfBuilder parentChildId(String parentChildId) {
      return (CopyOfBuilder) super.parentChildId(parentChildId);
    }
  }
  
}

/** This is an auto generated class representing the HasOneChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasOneChildren\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasOneChild implements Model {
  public static final QueryField ID = field(\\"HasOneChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasOneChild\\", \\"content\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasOneChild(String id, String content) {
    this.id = id;
    this.content = content;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasOneChild hasOneChild = (HasOneChild) obj;
      return ObjectsCompat.equals(getId(), hasOneChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasOneChild.getContent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasOneChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasOneChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasOneChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasOneChild justId(String id) {
    return new HasOneChild(
      id,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content);
  }
  public interface BuildStep {
    HasOneChild build();
    BuildStep id(String id);
    BuildStep content(String content);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    public Builder() {
      
    }
    
    private Builder(String id, String content) {
      this.id = id;
      this.content = content;
    }
    
    @Override
     public HasOneChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasOneChild(
          id,
          content);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content) {
      super(id, content);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
  }
  
}

/** This is an auto generated class representing the HasManyChild type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"HasManyChildren\\")
@Index(name = \\"undefined\\", fields = {\\"id\\"})
public final class HasManyChild implements Model {
  public static final QueryField ID = field(\\"HasManyChild\\", \\"id\\");
  public static final QueryField CONTENT = field(\\"HasManyChild\\", \\"content\\");
  public static final QueryField PARENT = field(\\"HasManyChild\\", \\"parentChildrenId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"String\\") String content;
  private final @ModelField(targetType=\\"Parent\\") @BelongsTo(targetName = \\"parentChildrenId\\", type = Parent.class) Parent parent;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getContent() {
      return content;
  }
  
  public Parent getParent() {
      return parent;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private HasManyChild(String id, String content, Parent parent) {
    this.id = id;
    this.content = content;
    this.parent = parent;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      HasManyChild hasManyChild = (HasManyChild) obj;
      return ObjectsCompat.equals(getId(), hasManyChild.getId()) &&
              ObjectsCompat.equals(getContent(), hasManyChild.getContent()) &&
              ObjectsCompat.equals(getParent(), hasManyChild.getParent()) &&
              ObjectsCompat.equals(getCreatedAt(), hasManyChild.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), hasManyChild.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getContent())
      .append(getParent())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"HasManyChild {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"content=\\" + String.valueOf(getContent()) + \\", \\")
      .append(\\"parent=\\" + String.valueOf(getParent()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static BuildStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static HasManyChild justId(String id) {
    return new HasManyChild(
      id,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      content,
      parent);
  }
  public interface BuildStep {
    HasManyChild build();
    BuildStep id(String id);
    BuildStep content(String content);
    BuildStep parent(Parent parent);
  }
  

  public static class Builder implements BuildStep {
    private String id;
    private String content;
    private Parent parent;
    public Builder() {
      
    }
    
    private Builder(String id, String content, Parent parent) {
      this.id = id;
      this.content = content;
      this.parent = parent;
    }
    
    @Override
     public HasManyChild build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new HasManyChild(
          id,
          content,
          parent);
    }
    
    @Override
     public BuildStep content(String content) {
        this.content = content;
        return this;
    }
    
    @Override
     public BuildStep parent(Parent parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String content, Parent parent) {
      super(id, content, parent);
      
    }
    
    @Override
     public CopyOfBuilder content(String content) {
      return (CopyOfBuilder) super.content(content);
    }
    
    @Override
     public CopyOfBuilder parent(Parent parent) {
      return (CopyOfBuilder) super.parent(parent);
    }
  }
  
}
"
`;

exports[`AppSyncModelVisitor DataStore Enabled should generate for Project and Team models 1`] = `
"package com.amplifyframework.datastore.generated.model;

import com.amplifyframework.core.model.annotations.HasOne;
import com.amplifyframework.core.model.temporal.Temporal;
import com.amplifyframework.core.model.annotations.BelongsTo;

import java.util.List;
import java.util.UUID;
import java.util.Objects;

import androidx.core.util.ObjectsCompat;

import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.annotations.Index;
import com.amplifyframework.core.model.annotations.ModelConfig;
import com.amplifyframework.core.model.annotations.ModelField;
import com.amplifyframework.core.model.query.predicate.QueryField;

import static com.amplifyframework.core.model.query.predicate.QueryField.field;

/** This is an auto generated class representing the Project type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Projects\\")
@Index(name = \\"undefined\\", fields = {\\"projectId\\",\\"name\\"})
public final class Project implements Model {
  public static final QueryField ID = field(\\"Project\\", \\"id\\");
  public static final QueryField PROJECT_ID = field(\\"Project\\", \\"projectId\\");
  public static final QueryField NAME = field(\\"Project\\", \\"name\\");
  public static final QueryField PROJECT_TEAM_ID = field(\\"Project\\", \\"projectTeamId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String projectId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Team\\") @HasOne(associatedWith = \\"teamId\\", type = Team.class) Team team = null;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  private final @ModelField(targetType=\\"ID\\") String projectTeamId;
  public String getId() {
      return id;
  }
  
  public String getProjectId() {
      return projectId;
  }
  
  public String getName() {
      return name;
  }
  
  public Team getTeam() {
      return team;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  public String getProjectTeamId() {
      return projectTeamId;
  }
  
  private Project(String id, String projectId, String name, String projectTeamId) {
    this.id = id;
    this.projectId = projectId;
    this.name = name;
    this.projectTeamId = projectTeamId;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Project project = (Project) obj;
      return ObjectsCompat.equals(getId(), project.getId()) &&
              ObjectsCompat.equals(getProjectId(), project.getProjectId()) &&
              ObjectsCompat.equals(getName(), project.getName()) &&
              ObjectsCompat.equals(getCreatedAt(), project.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), project.getUpdatedAt()) &&
              ObjectsCompat.equals(getProjectTeamId(), project.getProjectTeamId());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getProjectId())
      .append(getName())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .append(getProjectTeamId())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Project {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"projectId=\\" + String.valueOf(getProjectId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()) + \\", \\")
      .append(\\"projectTeamId=\\" + String.valueOf(getProjectTeamId()))
      .append(\\"}\\")
      .toString();
  }
  
  public static ProjectIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Project justId(String id) {
    return new Project(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      projectId,
      name,
      projectTeamId);
  }
  public interface ProjectIdStep {
    NameStep projectId(String projectId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Project build();
    BuildStep id(String id);
    BuildStep projectTeamId(String projectTeamId);
  }
  

  public static class Builder implements ProjectIdStep, NameStep, BuildStep {
    private String id;
    private String projectId;
    private String name;
    private String projectTeamId;
    public Builder() {
      
    }
    
    private Builder(String id, String projectId, String name, String projectTeamId) {
      this.id = id;
      this.projectId = projectId;
      this.name = name;
      this.projectTeamId = projectTeamId;
    }
    
    @Override
     public Project build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Project(
          id,
          projectId,
          name,
          projectTeamId);
    }
    
    @Override
     public NameStep projectId(String projectId) {
        Objects.requireNonNull(projectId);
        this.projectId = projectId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep projectTeamId(String projectTeamId) {
        this.projectTeamId = projectTeamId;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String projectId, String name, String projectTeamId) {
      super(id, projectId, name, projectTeamId);
      Objects.requireNonNull(projectId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder projectId(String projectId) {
      return (CopyOfBuilder) super.projectId(projectId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder projectTeamId(String projectTeamId) {
      return (CopyOfBuilder) super.projectTeamId(projectTeamId);
    }
  }
  
}

/** This is an auto generated class representing the Team type in your schema. */
@SuppressWarnings(\\"all\\")
@ModelConfig(pluralName = \\"Teams\\")
@Index(name = \\"undefined\\", fields = {\\"teamId\\",\\"name\\"})
public final class Team implements Model {
  public static final QueryField ID = field(\\"Team\\", \\"id\\");
  public static final QueryField TEAM_ID = field(\\"Team\\", \\"teamId\\");
  public static final QueryField NAME = field(\\"Team\\", \\"name\\");
  public static final QueryField PROJECT = field(\\"Team\\", \\"teamProjectId\\");
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String id;
  private final @ModelField(targetType=\\"ID\\", isRequired = true) String teamId;
  private final @ModelField(targetType=\\"String\\", isRequired = true) String name;
  private final @ModelField(targetType=\\"Project\\") @BelongsTo(targetName = \\"teamProjectId\\", type = Project.class) Project project;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime createdAt;
  private @ModelField(targetType=\\"AWSDateTime\\", isReadOnly = true) Temporal.DateTime updatedAt;
  public String getId() {
      return id;
  }
  
  public String getTeamId() {
      return teamId;
  }
  
  public String getName() {
      return name;
  }
  
  public Project getProject() {
      return project;
  }
  
  public Temporal.DateTime getCreatedAt() {
      return createdAt;
  }
  
  public Temporal.DateTime getUpdatedAt() {
      return updatedAt;
  }
  
  private Team(String id, String teamId, String name, Project project) {
    this.id = id;
    this.teamId = teamId;
    this.name = name;
    this.project = project;
  }
  
  @Override
   public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      } else if(obj == null || getClass() != obj.getClass()) {
        return false;
      } else {
      Team team = (Team) obj;
      return ObjectsCompat.equals(getId(), team.getId()) &&
              ObjectsCompat.equals(getTeamId(), team.getTeamId()) &&
              ObjectsCompat.equals(getName(), team.getName()) &&
              ObjectsCompat.equals(getProject(), team.getProject()) &&
              ObjectsCompat.equals(getCreatedAt(), team.getCreatedAt()) &&
              ObjectsCompat.equals(getUpdatedAt(), team.getUpdatedAt());
      }
  }
  
  @Override
   public int hashCode() {
    return new StringBuilder()
      .append(getId())
      .append(getTeamId())
      .append(getName())
      .append(getProject())
      .append(getCreatedAt())
      .append(getUpdatedAt())
      .toString()
      .hashCode();
  }
  
  @Override
   public String toString() {
    return new StringBuilder()
      .append(\\"Team {\\")
      .append(\\"id=\\" + String.valueOf(getId()) + \\", \\")
      .append(\\"teamId=\\" + String.valueOf(getTeamId()) + \\", \\")
      .append(\\"name=\\" + String.valueOf(getName()) + \\", \\")
      .append(\\"project=\\" + String.valueOf(getProject()) + \\", \\")
      .append(\\"createdAt=\\" + String.valueOf(getCreatedAt()) + \\", \\")
      .append(\\"updatedAt=\\" + String.valueOf(getUpdatedAt()))
      .append(\\"}\\")
      .toString();
  }
  
  public static TeamIdStep builder() {
      return new Builder();
  }
  
  /**
   * WARNING: This method should not be used to build an instance of this object for a CREATE mutation.
   * This is a convenience method to return an instance of the object with only its ID populated
   * to be used in the context of a parameter in a delete mutation or referencing a foreign key
   * in a relationship.
   * @param id the id of the existing item this instance will represent
   * @return an instance of this model with only ID populated
   */
  public static Team justId(String id) {
    return new Team(
      id,
      null,
      null,
      null
    );
  }
  
  public CopyOfBuilder copyOfBuilder() {
    return new CopyOfBuilder(id,
      teamId,
      name,
      project);
  }
  public interface TeamIdStep {
    NameStep teamId(String teamId);
  }
  

  public interface NameStep {
    BuildStep name(String name);
  }
  

  public interface BuildStep {
    Team build();
    BuildStep id(String id);
    BuildStep project(Project project);
  }
  

  public static class Builder implements TeamIdStep, NameStep, BuildStep {
    private String id;
    private String teamId;
    private String name;
    private Project project;
    public Builder() {
      
    }
    
    private Builder(String id, String teamId, String name, Project project) {
      this.id = id;
      this.teamId = teamId;
      this.name = name;
      this.project = project;
    }
    
    @Override
     public Team build() {
        String id = this.id != null ? this.id : UUID.randomUUID().toString();
        
        return new Team(
          id,
          teamId,
          name,
          project);
    }
    
    @Override
     public NameStep teamId(String teamId) {
        Objects.requireNonNull(teamId);
        this.teamId = teamId;
        return this;
    }
    
    @Override
     public BuildStep name(String name) {
        Objects.requireNonNull(name);
        this.name = name;
        return this;
    }
    
    @Override
     public BuildStep project(Project project) {
        this.project = project;
        return this;
    }
    
    /**
     * @param id id
     * @return Current Builder instance, for fluent method chaining
     */
    public BuildStep id(String id) {
        this.id = id;
        return this;
    }
  }
  

  public final class CopyOfBuilder extends Builder {
    private CopyOfBuilder(String id, String teamId, String name, Project project) {
      super(id, teamId, name, project);
      Objects.requireNonNull(teamId);
      Objects.requireNonNull(name);
    }
    
    @Override
     public CopyOfBuilder teamId(String teamId) {
      return (CopyOfBuilder) super.teamId(teamId);
    }
    
    @Override
     public CopyOfBuilder name(String name) {
      return (CopyOfBuilder) super.name(name);
    }
    
    @Override
     public CopyOfBuilder project(Project project) {
      return (CopyOfBuilder) super.project(project);
    }
  }
  
}
"
`;
