// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on explicit hasMany belongs to relationship @belongsTo 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Post type in your schema. */
class Post extends amplify_core.Model {
  static const classType = const _PostModelType();
  final String id;
  final String? _title;
  final List<Comment>? _comments;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get title {
    try {
      return _title!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  List<Comment>? get comments {
    return _comments;
  }
  
  const Post._internal({required this.id, required title, comments}): _title = title, _comments = comments;
  
  factory Post({String? id, required String title, List<Comment>? comments}) {
    return Post._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      title: title,
      comments: comments != null ? List<Comment>.unmodifiable(comments) : comments);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Post &&
      id == other.id &&
      _title == other._title &&
      DeepCollectionEquality().equals(_comments, other._comments);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Post {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"title=\\" + \\"$_title\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Post copyWith({String? id, String? title, List<Comment>? comments}) {
    return Post(
      id: id ?? this.id,
      title: title ?? this.title,
      comments: comments ?? this.comments);
  }
  
  Post copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? title,
    ModelFieldValue<List<Comment>?>? comments
  }) {
    return Post(
      id: id == null ? this.id : id.value,
      title: title == null ? this.title : title.value,
      comments: comments == null ? this.comments : comments.value
    );
  }
  
  Post.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _title = json['title'],
      _comments = json['comments'] is List
        ? (json['comments'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => Comment.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'title': _title, 'comments': _comments?.map((Comment? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'title': _title,
    'comments': _comments
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final TITLE = amplify_core.QueryField(fieldName: \\"title\\");
  static final COMMENTS = amplify_core.QueryField(
    fieldName: \\"comments\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Comment'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Post\\";
    modelSchemaDefinition.pluralName = \\"Posts\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post.TITLE,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Post.COMMENTS,
      isRequired: false,
      ofModelName: 'Comment',
      associatedKey: Comment.POST
    ));
  });
}

class _PostModelType extends amplify_core.ModelType<Post> {
  const _PostModelType();
  
  @override
  Post fromJson(Map<String, dynamic> jsonData) {
    return Post.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Post';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on explicit hasMany belongs to relationship @belongsTo 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Comment type in your schema. */
class Comment extends amplify_core.Model {
  static const classType = const _CommentModelType();
  final String id;
  final String? _content;
  final Post? _post;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get content {
    try {
      return _content!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  Post? get post {
    return _post;
  }
  
  const Comment._internal({required this.id, required content, post}): _content = content, _post = post;
  
  factory Comment({String? id, required String content, Post? post}) {
    return Comment._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      content: content,
      post: post);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Comment &&
      id == other.id &&
      _content == other._content &&
      _post == other._post;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Comment {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\" + \\", \\");
    buffer.write(\\"post=\\" + (_post != null ? _post!.toString() : \\"null\\"));
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Comment copyWith({String? id, String? content, Post? post}) {
    return Comment(
      id: id ?? this.id,
      content: content ?? this.content,
      post: post ?? this.post);
  }
  
  Comment copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? content,
    ModelFieldValue<Post?>? post
  }) {
    return Comment(
      id: id == null ? this.id : id.value,
      content: content == null ? this.content : content.value,
      post: post == null ? this.post : post.value
    );
  }
  
  Comment.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _content = json['content'],
      _post = json['post']?['serializedData'] != null
        ? Post.fromJson(new Map<String, dynamic>.from(json['post']['serializedData']))
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'content': _content, 'post': _post?.toJson()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'content': _content,
    'post': _post
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static final POST = amplify_core.QueryField(
    fieldName: \\"post\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Post'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Comment\\";
    modelSchemaDefinition.pluralName = \\"Comments\\";
    
    modelSchemaDefinition.indexes = [
      amplify_core.ModelIndex(fields: const [\\"postID\\", \\"content\\"], name: \\"byPost\\")
    ];
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment.CONTENT,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.belongsTo(
      key: Comment.POST,
      isRequired: false,
      targetName: 'postID',
      ofModelName: 'Post'
    ));
  });
}

class _CommentModelType extends amplify_core.ModelType<Comment> {
  const _CommentModelType();
  
  @override
  Comment fromJson(Map<String, dynamic> jsonData) {
    return Comment.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Comment';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on explicit hasOne belongs to relationship @belongsTo 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Project2 type in your schema. */
class Project2 extends amplify_core.Model {
  static const classType = const _Project2ModelType();
  final String id;
  final String? _name;
  final Team2? _team;
  final String? _project2TeamId;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get name {
    return _name;
  }
  
  Team2? get team {
    return _team;
  }
  
  String? get project2TeamId {
    return _project2TeamId;
  }
  
  const Project2._internal({required this.id, name, team, project2TeamId}): _name = name, _team = team, _project2TeamId = project2TeamId;
  
  factory Project2({String? id, String? name, Team2? team, String? project2TeamId}) {
    return Project2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      team: team,
      project2TeamId: project2TeamId);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Project2 &&
      id == other.id &&
      _name == other._name &&
      _team == other._team &&
      _project2TeamId == other._project2TeamId;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Project2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"project2TeamId=\\" + \\"$_project2TeamId\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Project2 copyWith({String? id, String? name, Team2? team, String? project2TeamId}) {
    return Project2(
      id: id ?? this.id,
      name: name ?? this.name,
      team: team ?? this.team,
      project2TeamId: project2TeamId ?? this.project2TeamId);
  }
  
  Project2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? name,
    ModelFieldValue<Team2?>? team,
    ModelFieldValue<String?>? project2TeamId
  }) {
    return Project2(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      team: team == null ? this.team : team.value,
      project2TeamId: project2TeamId == null ? this.project2TeamId : project2TeamId.value
    );
  }
  
  Project2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _team = json['team']?['serializedData'] != null
        ? Team2.fromJson(new Map<String, dynamic>.from(json['team']['serializedData']))
        : null,
      _project2TeamId = json['project2TeamId'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'team': _team?.toJson(), 'project2TeamId': _project2TeamId
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'team': _team,
    'project2TeamId': _project2TeamId
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final TEAM = amplify_core.QueryField(
    fieldName: \\"team\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Team2'));
  static final PROJECT2TEAMID = amplify_core.QueryField(fieldName: \\"project2TeamId\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Project2\\";
    modelSchemaDefinition.pluralName = \\"Project2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project2.NAME,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasOne(
      key: Project2.TEAM,
      isRequired: false,
      ofModelName: 'Team2',
      associatedKey: Team2.PROJECT
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project2.PROJECT2TEAMID,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _Project2ModelType extends amplify_core.ModelType<Project2> {
  const _Project2ModelType();
  
  @override
  Project2 fromJson(Map<String, dynamic> jsonData) {
    return Project2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Project2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on explicit hasOne belongs to relationship @belongsTo 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Team2 type in your schema. */
class Team2 extends amplify_core.Model {
  static const classType = const _Team2ModelType();
  final String id;
  final String? _name;
  final Project2? _project;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  Project2? get project {
    return _project;
  }
  
  const Team2._internal({required this.id, required name, project}): _name = name, _project = project;
  
  factory Team2({String? id, required String name, Project2? project}) {
    return Team2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      project: project);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Team2 &&
      id == other.id &&
      _name == other._name &&
      _project == other._project;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Team2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"project=\\" + (_project != null ? _project!.toString() : \\"null\\"));
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Team2 copyWith({String? id, String? name, Project2? project}) {
    return Team2(
      id: id ?? this.id,
      name: name ?? this.name,
      project: project ?? this.project);
  }
  
  Team2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name,
    ModelFieldValue<Project2?>? project
  }) {
    return Team2(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      project: project == null ? this.project : project.value
    );
  }
  
  Team2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _project = json['project']?['serializedData'] != null
        ? Project2.fromJson(new Map<String, dynamic>.from(json['project']['serializedData']))
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'project': _project?.toJson()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'project': _project
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final PROJECT = amplify_core.QueryField(
    fieldName: \\"project\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Project2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Team2\\";
    modelSchemaDefinition.pluralName = \\"Team2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Team2.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.belongsTo(
      key: Team2.PROJECT,
      isRequired: false,
      targetName: 'projectID',
      ofModelName: 'Project2'
    ));
  });
}

class _Team2ModelType extends amplify_core.ModelType<Team2> {
  const _Team2ModelType();
  
  @override
  Team2 fromJson(Map<String, dynamic> jsonData) {
    return Team2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Team2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on implicit hasMany belongs to relationship @belongsTo (extended) 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Blog7V2 type in your schema. */
class Blog7V2 extends amplify_core.Model {
  static const classType = const _Blog7V2ModelType();
  final String id;
  final String? _name;
  final List<Post7V2>? _posts;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  List<Post7V2>? get posts {
    return _posts;
  }
  
  const Blog7V2._internal({required this.id, required name, posts}): _name = name, _posts = posts;
  
  factory Blog7V2({String? id, required String name, List<Post7V2>? posts}) {
    return Blog7V2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      posts: posts != null ? List<Post7V2>.unmodifiable(posts) : posts);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Blog7V2 &&
      id == other.id &&
      _name == other._name &&
      DeepCollectionEquality().equals(_posts, other._posts);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Blog7V2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Blog7V2 copyWith({String? id, String? name, List<Post7V2>? posts}) {
    return Blog7V2(
      id: id ?? this.id,
      name: name ?? this.name,
      posts: posts ?? this.posts);
  }
  
  Blog7V2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name,
    ModelFieldValue<List<Post7V2>?>? posts
  }) {
    return Blog7V2(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      posts: posts == null ? this.posts : posts.value
    );
  }
  
  Blog7V2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _posts = json['posts'] is List
        ? (json['posts'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => Post7V2.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'posts': _posts?.map((Post7V2? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'posts': _posts
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final POSTS = amplify_core.QueryField(
    fieldName: \\"posts\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Post7V2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Blog7V2\\";
    modelSchemaDefinition.pluralName = \\"Blog7V2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Blog7V2.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Blog7V2.POSTS,
      isRequired: false,
      ofModelName: 'Post7V2',
      associatedKey: Post7V2.BLOG
    ));
  });
}

class _Blog7V2ModelType extends amplify_core.ModelType<Blog7V2> {
  const _Blog7V2ModelType();
  
  @override
  Blog7V2 fromJson(Map<String, dynamic> jsonData) {
    return Blog7V2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Blog7V2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on implicit hasMany belongs to relationship @belongsTo (extended) 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Post7V2 type in your schema. */
class Post7V2 extends amplify_core.Model {
  static const classType = const _Post7V2ModelType();
  final String id;
  final String? _title;
  final Blog7V2? _blog;
  final List<Comment7V2>? _comments;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get title {
    try {
      return _title!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  Blog7V2? get blog {
    return _blog;
  }
  
  List<Comment7V2>? get comments {
    return _comments;
  }
  
  const Post7V2._internal({required this.id, required title, blog, comments}): _title = title, _blog = blog, _comments = comments;
  
  factory Post7V2({String? id, required String title, Blog7V2? blog, List<Comment7V2>? comments}) {
    return Post7V2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      title: title,
      blog: blog,
      comments: comments != null ? List<Comment7V2>.unmodifiable(comments) : comments);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Post7V2 &&
      id == other.id &&
      _title == other._title &&
      _blog == other._blog &&
      DeepCollectionEquality().equals(_comments, other._comments);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Post7V2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"title=\\" + \\"$_title\\" + \\", \\");
    buffer.write(\\"blog=\\" + (_blog != null ? _blog!.toString() : \\"null\\"));
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Post7V2 copyWith({String? id, String? title, Blog7V2? blog, List<Comment7V2>? comments}) {
    return Post7V2(
      id: id ?? this.id,
      title: title ?? this.title,
      blog: blog ?? this.blog,
      comments: comments ?? this.comments);
  }
  
  Post7V2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? title,
    ModelFieldValue<Blog7V2?>? blog,
    ModelFieldValue<List<Comment7V2>?>? comments
  }) {
    return Post7V2(
      id: id == null ? this.id : id.value,
      title: title == null ? this.title : title.value,
      blog: blog == null ? this.blog : blog.value,
      comments: comments == null ? this.comments : comments.value
    );
  }
  
  Post7V2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _title = json['title'],
      _blog = json['blog']?['serializedData'] != null
        ? Blog7V2.fromJson(new Map<String, dynamic>.from(json['blog']['serializedData']))
        : null,
      _comments = json['comments'] is List
        ? (json['comments'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => Comment7V2.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'title': _title, 'blog': _blog?.toJson(), 'comments': _comments?.map((Comment7V2? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'title': _title,
    'blog': _blog,
    'comments': _comments
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final TITLE = amplify_core.QueryField(fieldName: \\"title\\");
  static final BLOG = amplify_core.QueryField(
    fieldName: \\"blog\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Blog7V2'));
  static final COMMENTS = amplify_core.QueryField(
    fieldName: \\"comments\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Comment7V2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Post7V2\\";
    modelSchemaDefinition.pluralName = \\"Post7V2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post7V2.TITLE,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.belongsTo(
      key: Post7V2.BLOG,
      isRequired: false,
      targetName: 'blog7V2PostsId',
      ofModelName: 'Blog7V2'
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Post7V2.COMMENTS,
      isRequired: false,
      ofModelName: 'Comment7V2',
      associatedKey: Comment7V2.POST
    ));
  });
}

class _Post7V2ModelType extends amplify_core.ModelType<Post7V2> {
  const _Post7V2ModelType();
  
  @override
  Post7V2 fromJson(Map<String, dynamic> jsonData) {
    return Post7V2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Post7V2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on implicit hasMany belongs to relationship @belongsTo (extended) 3`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Comment7V2 type in your schema. */
class Comment7V2 extends amplify_core.Model {
  static const classType = const _Comment7V2ModelType();
  final String id;
  final String? _content;
  final Post7V2? _post;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get content {
    return _content;
  }
  
  Post7V2? get post {
    return _post;
  }
  
  const Comment7V2._internal({required this.id, content, post}): _content = content, _post = post;
  
  factory Comment7V2({String? id, String? content, Post7V2? post}) {
    return Comment7V2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      content: content,
      post: post);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Comment7V2 &&
      id == other.id &&
      _content == other._content &&
      _post == other._post;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Comment7V2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\" + \\", \\");
    buffer.write(\\"post=\\" + (_post != null ? _post!.toString() : \\"null\\"));
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Comment7V2 copyWith({String? id, String? content, Post7V2? post}) {
    return Comment7V2(
      id: id ?? this.id,
      content: content ?? this.content,
      post: post ?? this.post);
  }
  
  Comment7V2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? content,
    ModelFieldValue<Post7V2?>? post
  }) {
    return Comment7V2(
      id: id == null ? this.id : id.value,
      content: content == null ? this.content : content.value,
      post: post == null ? this.post : post.value
    );
  }
  
  Comment7V2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _content = json['content'],
      _post = json['post']?['serializedData'] != null
        ? Post7V2.fromJson(new Map<String, dynamic>.from(json['post']['serializedData']))
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'content': _content, 'post': _post?.toJson()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'content': _content,
    'post': _post
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static final POST = amplify_core.QueryField(
    fieldName: \\"post\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Post7V2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Comment7V2\\";
    modelSchemaDefinition.pluralName = \\"Comment7V2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment7V2.CONTENT,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.belongsTo(
      key: Comment7V2.POST,
      isRequired: false,
      targetName: 'post7V2CommentsId',
      ofModelName: 'Post7V2'
    ));
  });
}

class _Comment7V2ModelType extends amplify_core.ModelType<Comment7V2> {
  const _Comment7V2ModelType();
  
  @override
  Comment7V2 fromJson(Map<String, dynamic> jsonData) {
    return Comment7V2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Comment7V2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on implicit hasOne belongs to relationship @belongsTo 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Project type in your schema. */
class Project extends amplify_core.Model {
  static const classType = const _ProjectModelType();
  final String id;
  final String? _name;
  final Team? _team;
  final String? _projectTeamId;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get name {
    return _name;
  }
  
  Team? get team {
    return _team;
  }
  
  String? get projectTeamId {
    return _projectTeamId;
  }
  
  const Project._internal({required this.id, name, team, projectTeamId}): _name = name, _team = team, _projectTeamId = projectTeamId;
  
  factory Project({String? id, String? name, Team? team, String? projectTeamId}) {
    return Project._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      team: team,
      projectTeamId: projectTeamId);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Project &&
      id == other.id &&
      _name == other._name &&
      _team == other._team &&
      _projectTeamId == other._projectTeamId;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Project {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"projectTeamId=\\" + \\"$_projectTeamId\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Project copyWith({String? id, String? name, Team? team, String? projectTeamId}) {
    return Project(
      id: id ?? this.id,
      name: name ?? this.name,
      team: team ?? this.team,
      projectTeamId: projectTeamId ?? this.projectTeamId);
  }
  
  Project copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? name,
    ModelFieldValue<Team?>? team,
    ModelFieldValue<String?>? projectTeamId
  }) {
    return Project(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      team: team == null ? this.team : team.value,
      projectTeamId: projectTeamId == null ? this.projectTeamId : projectTeamId.value
    );
  }
  
  Project.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _team = json['team']?['serializedData'] != null
        ? Team.fromJson(new Map<String, dynamic>.from(json['team']['serializedData']))
        : null,
      _projectTeamId = json['projectTeamId'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'team': _team?.toJson(), 'projectTeamId': _projectTeamId
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'team': _team,
    'projectTeamId': _projectTeamId
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final TEAM = amplify_core.QueryField(
    fieldName: \\"team\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Team'));
  static final PROJECTTEAMID = amplify_core.QueryField(fieldName: \\"projectTeamId\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Project\\";
    modelSchemaDefinition.pluralName = \\"Projects\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project.NAME,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasOne(
      key: Project.TEAM,
      isRequired: false,
      ofModelName: 'Team',
      associatedKey: Team.PROJECT
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project.PROJECTTEAMID,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _ProjectModelType extends amplify_core.ModelType<Project> {
  const _ProjectModelType();
  
  @override
  Project fromJson(Map<String, dynamic> jsonData) {
    return Project.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Project';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on implicit hasOne belongs to relationship @belongsTo 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Team type in your schema. */
class Team extends amplify_core.Model {
  static const classType = const _TeamModelType();
  final String id;
  final String? _name;
  final Project? _project;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  Project? get project {
    return _project;
  }
  
  const Team._internal({required this.id, required name, project}): _name = name, _project = project;
  
  factory Team({String? id, required String name, Project? project}) {
    return Team._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      project: project);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Team &&
      id == other.id &&
      _name == other._name &&
      _project == other._project;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Team {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"project=\\" + (_project != null ? _project!.toString() : \\"null\\"));
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Team copyWith({String? id, String? name, Project? project}) {
    return Team(
      id: id ?? this.id,
      name: name ?? this.name,
      project: project ?? this.project);
  }
  
  Team copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name,
    ModelFieldValue<Project?>? project
  }) {
    return Team(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      project: project == null ? this.project : project.value
    );
  }
  
  Team.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _project = json['project']?['serializedData'] != null
        ? Project.fromJson(new Map<String, dynamic>.from(json['project']['serializedData']))
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'project': _project?.toJson()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'project': _project
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final PROJECT = amplify_core.QueryField(
    fieldName: \\"project\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Project'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Team\\";
    modelSchemaDefinition.pluralName = \\"Teams\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Team.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.belongsTo(
      key: Team.PROJECT,
      isRequired: false,
      targetName: 'teamProjectId',
      ofModelName: 'Project'
    ));
  });
}

class _TeamModelType extends amplify_core.ModelType<Team> {
  const _TeamModelType();
  
  @override
  Team fromJson(Map<String, dynamic> jsonData) {
    return Team.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Team';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on many to many relationship @manyToMany 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Post type in your schema. */
class Post extends amplify_core.Model {
  static const classType = const _PostModelType();
  final String id;
  final String? _title;
  final String? _content;
  final List<PostTags>? _tags;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get title {
    try {
      return _title!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String? get content {
    return _content;
  }
  
  List<PostTags>? get tags {
    return _tags;
  }
  
  const Post._internal({required this.id, required title, content, tags}): _title = title, _content = content, _tags = tags;
  
  factory Post({String? id, required String title, String? content, List<PostTags>? tags}) {
    return Post._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      title: title,
      content: content,
      tags: tags != null ? List<PostTags>.unmodifiable(tags) : tags);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Post &&
      id == other.id &&
      _title == other._title &&
      _content == other._content &&
      DeepCollectionEquality().equals(_tags, other._tags);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Post {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"title=\\" + \\"$_title\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Post copyWith({String? id, String? title, String? content, List<PostTags>? tags}) {
    return Post(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
      tags: tags ?? this.tags);
  }
  
  Post copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? title,
    ModelFieldValue<String?>? content,
    ModelFieldValue<List<PostTags>?>? tags
  }) {
    return Post(
      id: id == null ? this.id : id.value,
      title: title == null ? this.title : title.value,
      content: content == null ? this.content : content.value,
      tags: tags == null ? this.tags : tags.value
    );
  }
  
  Post.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _title = json['title'],
      _content = json['content'],
      _tags = json['tags'] is List
        ? (json['tags'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => PostTags.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'title': _title, 'content': _content, 'tags': _tags?.map((PostTags? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'title': _title,
    'content': _content,
    'tags': _tags
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final TITLE = amplify_core.QueryField(fieldName: \\"title\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static final TAGS = amplify_core.QueryField(
    fieldName: \\"tags\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'PostTags'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Post\\";
    modelSchemaDefinition.pluralName = \\"Posts\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post.TITLE,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post.CONTENT,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Post.TAGS,
      isRequired: false,
      ofModelName: 'PostTags',
      associatedKey: PostTags.POST
    ));
  });
}

class _PostModelType extends amplify_core.ModelType<Post> {
  const _PostModelType();
  
  @override
  Post fromJson(Map<String, dynamic> jsonData) {
    return Post.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Post';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on many to many relationship @manyToMany 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Tag type in your schema. */
class Tag extends amplify_core.Model {
  static const classType = const _TagModelType();
  final String id;
  final String? _label;
  final List<PostTags>? _posts;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get label {
    try {
      return _label!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  List<PostTags>? get posts {
    return _posts;
  }
  
  const Tag._internal({required this.id, required label, posts}): _label = label, _posts = posts;
  
  factory Tag({String? id, required String label, List<PostTags>? posts}) {
    return Tag._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      label: label,
      posts: posts != null ? List<PostTags>.unmodifiable(posts) : posts);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Tag &&
      id == other.id &&
      _label == other._label &&
      DeepCollectionEquality().equals(_posts, other._posts);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Tag {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"label=\\" + \\"$_label\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Tag copyWith({String? id, String? label, List<PostTags>? posts}) {
    return Tag(
      id: id ?? this.id,
      label: label ?? this.label,
      posts: posts ?? this.posts);
  }
  
  Tag copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? label,
    ModelFieldValue<List<PostTags>?>? posts
  }) {
    return Tag(
      id: id == null ? this.id : id.value,
      label: label == null ? this.label : label.value,
      posts: posts == null ? this.posts : posts.value
    );
  }
  
  Tag.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _label = json['label'],
      _posts = json['posts'] is List
        ? (json['posts'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => PostTags.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'label': _label, 'posts': _posts?.map((PostTags? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'label': _label,
    'posts': _posts
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final LABEL = amplify_core.QueryField(fieldName: \\"label\\");
  static final POSTS = amplify_core.QueryField(
    fieldName: \\"posts\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'PostTags'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Tag\\";
    modelSchemaDefinition.pluralName = \\"Tags\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Tag.LABEL,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Tag.POSTS,
      isRequired: false,
      ofModelName: 'PostTags',
      associatedKey: PostTags.TAG
    ));
  });
}

class _TagModelType extends amplify_core.ModelType<Tag> {
  const _TagModelType();
  
  @override
  Tag fromJson(Map<String, dynamic> jsonData) {
    return Tag.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Tag';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on record creation and updating timestamp 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Todo type in your schema. */
class Todo extends amplify_core.Model {
  static const classType = const _TodoModelType();
  final String id;
  final String? _content;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get content {
    return _content;
  }
  
  const Todo._internal({required this.id, content}): _content = content;
  
  factory Todo({String? id, String? content}) {
    return Todo._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      content: content);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Todo &&
      id == other.id &&
      _content == other._content;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Todo {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Todo copyWith({String? id, String? content}) {
    return Todo(
      id: id ?? this.id,
      content: content ?? this.content);
  }
  
  Todo copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? content
  }) {
    return Todo(
      id: id == null ? this.id : id.value,
      content: content == null ? this.content : content.value
    );
  }
  
  Todo.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _content = json['content'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'content': _content
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'content': _content
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Todo\\";
    modelSchemaDefinition.pluralName = \\"Todos\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Todo.CONTENT,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _TodoModelType extends amplify_core.ModelType<Todo> {
  const _TodoModelType();
  
  @override
  Todo fromJson(Map<String, dynamic> jsonData) {
    return Todo.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Todo';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional explicit has many relationship @hasMany 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Post2 type in your schema. */
class Post2 extends amplify_core.Model {
  static const classType = const _Post2ModelType();
  final String id;
  final String? _title;
  final List<Comment2>? _comments;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get title {
    try {
      return _title!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  List<Comment2>? get comments {
    return _comments;
  }
  
  const Post2._internal({required this.id, required title, comments}): _title = title, _comments = comments;
  
  factory Post2({String? id, required String title, List<Comment2>? comments}) {
    return Post2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      title: title,
      comments: comments != null ? List<Comment2>.unmodifiable(comments) : comments);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Post2 &&
      id == other.id &&
      _title == other._title &&
      DeepCollectionEquality().equals(_comments, other._comments);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Post2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"title=\\" + \\"$_title\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Post2 copyWith({String? id, String? title, List<Comment2>? comments}) {
    return Post2(
      id: id ?? this.id,
      title: title ?? this.title,
      comments: comments ?? this.comments);
  }
  
  Post2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? title,
    ModelFieldValue<List<Comment2>?>? comments
  }) {
    return Post2(
      id: id == null ? this.id : id.value,
      title: title == null ? this.title : title.value,
      comments: comments == null ? this.comments : comments.value
    );
  }
  
  Post2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _title = json['title'],
      _comments = json['comments'] is List
        ? (json['comments'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => Comment2.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'title': _title, 'comments': _comments?.map((Comment2? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'title': _title,
    'comments': _comments
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final TITLE = amplify_core.QueryField(fieldName: \\"title\\");
  static final COMMENTS = amplify_core.QueryField(
    fieldName: \\"comments\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Comment2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Post2\\";
    modelSchemaDefinition.pluralName = \\"Post2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post2.TITLE,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Post2.COMMENTS,
      isRequired: false,
      ofModelName: 'Comment2',
      associatedKey: Comment2.POSTID
    ));
  });
}

class _Post2ModelType extends amplify_core.ModelType<Post2> {
  const _Post2ModelType();
  
  @override
  Post2 fromJson(Map<String, dynamic> jsonData) {
    return Post2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Post2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional explicit has many relationship @hasMany 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Comment2 type in your schema. */
class Comment2 extends amplify_core.Model {
  static const classType = const _Comment2ModelType();
  final String id;
  final String? _postID;
  final String? _content;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get postID {
    try {
      return _postID!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String get content {
    try {
      return _content!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  const Comment2._internal({required this.id, required postID, required content}): _postID = postID, _content = content;
  
  factory Comment2({String? id, required String postID, required String content}) {
    return Comment2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      postID: postID,
      content: content);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Comment2 &&
      id == other.id &&
      _postID == other._postID &&
      _content == other._content;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Comment2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"postID=\\" + \\"$_postID\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Comment2 copyWith({String? id, String? postID, String? content}) {
    return Comment2(
      id: id ?? this.id,
      postID: postID ?? this.postID,
      content: content ?? this.content);
  }
  
  Comment2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? postID,
    ModelFieldValue<String>? content
  }) {
    return Comment2(
      id: id == null ? this.id : id.value,
      postID: postID == null ? this.postID : postID.value,
      content: content == null ? this.content : content.value
    );
  }
  
  Comment2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _postID = json['postID'],
      _content = json['content'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'postID': _postID, 'content': _content
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'postID': _postID,
    'content': _content
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final POSTID = amplify_core.QueryField(fieldName: \\"postID\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Comment2\\";
    modelSchemaDefinition.pluralName = \\"Comment2s\\";
    
    modelSchemaDefinition.indexes = [
      amplify_core.ModelIndex(fields: const [\\"postID\\", \\"content\\"], name: \\"byPost\\")
    ];
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment2.POSTID,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment2.CONTENT,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _Comment2ModelType extends amplify_core.ModelType<Comment2> {
  const _Comment2ModelType();
  
  @override
  Comment2 fromJson(Map<String, dynamic> jsonData) {
    return Comment2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Comment2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional explicit has one relationship @hasOne 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Project2 type in your schema. */
class Project2 extends amplify_core.Model {
  static const classType = const _Project2ModelType();
  final String id;
  final String? _name;
  final String? _teamID;
  final Team2? _team;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get name {
    return _name;
  }
  
  String? get teamID {
    return _teamID;
  }
  
  Team2? get team {
    return _team;
  }
  
  const Project2._internal({required this.id, name, teamID, team}): _name = name, _teamID = teamID, _team = team;
  
  factory Project2({String? id, String? name, String? teamID, Team2? team}) {
    return Project2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      teamID: teamID,
      team: team);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Project2 &&
      id == other.id &&
      _name == other._name &&
      _teamID == other._teamID &&
      _team == other._team;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Project2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"teamID=\\" + \\"$_teamID\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Project2 copyWith({String? id, String? name, String? teamID, Team2? team}) {
    return Project2(
      id: id ?? this.id,
      name: name ?? this.name,
      teamID: teamID ?? this.teamID,
      team: team ?? this.team);
  }
  
  Project2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? name,
    ModelFieldValue<String?>? teamID,
    ModelFieldValue<Team2?>? team
  }) {
    return Project2(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      teamID: teamID == null ? this.teamID : teamID.value,
      team: team == null ? this.team : team.value
    );
  }
  
  Project2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _teamID = json['teamID'],
      _team = json['team']?['serializedData'] != null
        ? Team2.fromJson(new Map<String, dynamic>.from(json['team']['serializedData']))
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'teamID': _teamID, 'team': _team?.toJson()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'teamID': _teamID,
    'team': _team
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final TEAMID = amplify_core.QueryField(fieldName: \\"teamID\\");
  static final TEAM = amplify_core.QueryField(
    fieldName: \\"team\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Team2'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Project2\\";
    modelSchemaDefinition.pluralName = \\"Project2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project2.NAME,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project2.TEAMID,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasOne(
      key: Project2.TEAM,
      isRequired: false,
      ofModelName: 'Team2',
      associatedKey: Team2.ID
    ));
  });
}

class _Project2ModelType extends amplify_core.ModelType<Project2> {
  const _Project2ModelType();
  
  @override
  Project2 fromJson(Map<String, dynamic> jsonData) {
    return Project2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Project2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional explicit has one relationship @hasOne 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Team2 type in your schema. */
class Team2 extends amplify_core.Model {
  static const classType = const _Team2ModelType();
  final String id;
  final String? _name;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  const Team2._internal({required this.id, required name}): _name = name;
  
  factory Team2({String? id, required String name}) {
    return Team2._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Team2 &&
      id == other.id &&
      _name == other._name;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Team2 {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Team2 copyWith({String? id, String? name}) {
    return Team2(
      id: id ?? this.id,
      name: name ?? this.name);
  }
  
  Team2 copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name
  }) {
    return Team2(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value
    );
  }
  
  Team2.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Team2\\";
    modelSchemaDefinition.pluralName = \\"Team2s\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Team2.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _Team2ModelType extends amplify_core.ModelType<Team2> {
  const _Team2ModelType();
  
  @override
  Team2 fromJson(Map<String, dynamic> jsonData) {
    return Team2.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Team2';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional implicit has many relationship @hasMany 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;
import 'package:collection/collection.dart';


/** This is an auto generated class representing the Post type in your schema. */
class Post extends amplify_core.Model {
  static const classType = const _PostModelType();
  final String id;
  final String? _title;
  final List<Comment>? _comments;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get title {
    try {
      return _title!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  List<Comment>? get comments {
    return _comments;
  }
  
  const Post._internal({required this.id, required title, comments}): _title = title, _comments = comments;
  
  factory Post({String? id, required String title, List<Comment>? comments}) {
    return Post._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      title: title,
      comments: comments != null ? List<Comment>.unmodifiable(comments) : comments);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Post &&
      id == other.id &&
      _title == other._title &&
      DeepCollectionEquality().equals(_comments, other._comments);
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Post {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"title=\\" + \\"$_title\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Post copyWith({String? id, String? title, List<Comment>? comments}) {
    return Post(
      id: id ?? this.id,
      title: title ?? this.title,
      comments: comments ?? this.comments);
  }
  
  Post copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? title,
    ModelFieldValue<List<Comment>?>? comments
  }) {
    return Post(
      id: id == null ? this.id : id.value,
      title: title == null ? this.title : title.value,
      comments: comments == null ? this.comments : comments.value
    );
  }
  
  Post.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _title = json['title'],
      _comments = json['comments'] is List
        ? (json['comments'] as List)
          .where((e) => e?['serializedData'] != null)
          .map((e) => Comment.fromJson(new Map<String, dynamic>.from(e['serializedData'])))
          .toList()
        : null;
  
  Map<String, dynamic> toJson() => {
    'id': id, 'title': _title, 'comments': _comments?.map((Comment? e) => e?.toJson()).toList()
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'title': _title,
    'comments': _comments
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final TITLE = amplify_core.QueryField(fieldName: \\"title\\");
  static final COMMENTS = amplify_core.QueryField(
    fieldName: \\"comments\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Comment'));
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Post\\";
    modelSchemaDefinition.pluralName = \\"Posts\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Post.TITLE,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasMany(
      key: Post.COMMENTS,
      isRequired: false,
      ofModelName: 'Comment',
      associatedKey: Comment.POSTCOMMENTSID
    ));
  });
}

class _PostModelType extends amplify_core.ModelType<Post> {
  const _PostModelType();
  
  @override
  Post fromJson(Map<String, dynamic> jsonData) {
    return Post.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Post';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional implicit has many relationship @hasMany 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Comment type in your schema. */
class Comment extends amplify_core.Model {
  static const classType = const _CommentModelType();
  final String id;
  final String? _content;
  final String? _postCommentsId;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get content {
    try {
      return _content!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String? get postCommentsId {
    return _postCommentsId;
  }
  
  const Comment._internal({required this.id, required content, postCommentsId}): _content = content, _postCommentsId = postCommentsId;
  
  factory Comment({String? id, required String content, String? postCommentsId}) {
    return Comment._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      content: content,
      postCommentsId: postCommentsId);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Comment &&
      id == other.id &&
      _content == other._content &&
      _postCommentsId == other._postCommentsId;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Comment {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\" + \\", \\");
    buffer.write(\\"postCommentsId=\\" + \\"$_postCommentsId\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Comment copyWith({String? id, String? content, String? postCommentsId}) {
    return Comment(
      id: id ?? this.id,
      content: content ?? this.content,
      postCommentsId: postCommentsId ?? this.postCommentsId);
  }
  
  Comment copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? content,
    ModelFieldValue<String?>? postCommentsId
  }) {
    return Comment(
      id: id == null ? this.id : id.value,
      content: content == null ? this.content : content.value,
      postCommentsId: postCommentsId == null ? this.postCommentsId : postCommentsId.value
    );
  }
  
  Comment.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _content = json['content'],
      _postCommentsId = json['postCommentsId'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'content': _content, 'postCommentsId': _postCommentsId
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'content': _content,
    'postCommentsId': _postCommentsId
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static final POSTCOMMENTSID = amplify_core.QueryField(fieldName: \\"postCommentsId\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Comment\\";
    modelSchemaDefinition.pluralName = \\"Comments\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment.CONTENT,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Comment.POSTCOMMENTSID,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _CommentModelType extends amplify_core.ModelType<Comment> {
  const _CommentModelType();
  
  @override
  Comment fromJson(Map<String, dynamic> jsonData) {
    return Comment.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Comment';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional implicit has one relationship @hasOne 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Project type in your schema. */
class Project extends amplify_core.Model {
  static const classType = const _ProjectModelType();
  final String id;
  final String? _name;
  final Team? _team;
  final String? _projectTeamId;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String? get name {
    return _name;
  }
  
  Team? get team {
    return _team;
  }
  
  String? get projectTeamId {
    return _projectTeamId;
  }
  
  const Project._internal({required this.id, name, team, projectTeamId}): _name = name, _team = team, _projectTeamId = projectTeamId;
  
  factory Project({String? id, String? name, Team? team, String? projectTeamId}) {
    return Project._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      team: team,
      projectTeamId: projectTeamId);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Project &&
      id == other.id &&
      _name == other._name &&
      _team == other._team &&
      _projectTeamId == other._projectTeamId;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Project {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"projectTeamId=\\" + \\"$_projectTeamId\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Project copyWith({String? id, String? name, Team? team, String? projectTeamId}) {
    return Project(
      id: id ?? this.id,
      name: name ?? this.name,
      team: team ?? this.team,
      projectTeamId: projectTeamId ?? this.projectTeamId);
  }
  
  Project copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String?>? name,
    ModelFieldValue<Team?>? team,
    ModelFieldValue<String?>? projectTeamId
  }) {
    return Project(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      team: team == null ? this.team : team.value,
      projectTeamId: projectTeamId == null ? this.projectTeamId : projectTeamId.value
    );
  }
  
  Project.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _team = json['team']?['serializedData'] != null
        ? Team.fromJson(new Map<String, dynamic>.from(json['team']['serializedData']))
        : null,
      _projectTeamId = json['projectTeamId'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'team': _team?.toJson(), 'projectTeamId': _projectTeamId
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'team': _team,
    'projectTeamId': _projectTeamId
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final TEAM = amplify_core.QueryField(
    fieldName: \\"team\\",
    fieldType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.model, ofModelName: 'Team'));
  static final PROJECTTEAMID = amplify_core.QueryField(fieldName: \\"projectTeamId\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Project\\";
    modelSchemaDefinition.pluralName = \\"Projects\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project.NAME,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.hasOne(
      key: Project.TEAM,
      isRequired: false,
      ofModelName: 'Team',
      associatedKey: Team.ID
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Project.PROJECTTEAMID,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _ProjectModelType extends amplify_core.ModelType<Project> {
  const _ProjectModelType();
  
  @override
  Project fromJson(Map<String, dynamic> jsonData) {
    return Project.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Project';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works on uni-directional implicit has one relationship @hasOne 2`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Team type in your schema. */
class Team extends amplify_core.Model {
  static const classType = const _TeamModelType();
  final String id;
  final String? _name;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  const Team._internal({required this.id, required name}): _name = name;
  
  factory Team({String? id, required String name}) {
    return Team._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Team &&
      id == other.id &&
      _name == other._name;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Team {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Team copyWith({String? id, String? name}) {
    return Team(
      id: id ?? this.id,
      name: name ?? this.name);
  }
  
  Team copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name
  }) {
    return Team(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value
    );
  }
  
  Team.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Team\\";
    modelSchemaDefinition.pluralName = \\"Teams\\";
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Team.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _TeamModelType extends amplify_core.ModelType<Team> {
  const _TeamModelType();
  
  @override
  Team fromJson(Map<String, dynamic> jsonData) {
    return Team.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Team';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests Works when configuring a secondary index 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the Customer type in your schema. */
class Customer extends amplify_core.Model {
  static const classType = const _CustomerModelType();
  final String id;
  final String? _name;
  final String? _phoneNumber;
  final String? _accountRepresentativeID;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String? get phoneNumber {
    return _phoneNumber;
  }
  
  String get accountRepresentativeID {
    try {
      return _accountRepresentativeID!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  const Customer._internal({required this.id, required name, phoneNumber, required accountRepresentativeID}): _name = name, _phoneNumber = phoneNumber, _accountRepresentativeID = accountRepresentativeID;
  
  factory Customer({String? id, required String name, String? phoneNumber, required String accountRepresentativeID}) {
    return Customer._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      name: name,
      phoneNumber: phoneNumber,
      accountRepresentativeID: accountRepresentativeID);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Customer &&
      id == other.id &&
      _name == other._name &&
      _phoneNumber == other._phoneNumber &&
      _accountRepresentativeID == other._accountRepresentativeID;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"Customer {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"phoneNumber=\\" + \\"$_phoneNumber\\" + \\", \\");
    buffer.write(\\"accountRepresentativeID=\\" + \\"$_accountRepresentativeID\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  Customer copyWith({String? id, String? name, String? phoneNumber, String? accountRepresentativeID}) {
    return Customer(
      id: id ?? this.id,
      name: name ?? this.name,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      accountRepresentativeID: accountRepresentativeID ?? this.accountRepresentativeID);
  }
  
  Customer copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? name,
    ModelFieldValue<String?>? phoneNumber,
    ModelFieldValue<String>? accountRepresentativeID
  }) {
    return Customer(
      id: id == null ? this.id : id.value,
      name: name == null ? this.name : name.value,
      phoneNumber: phoneNumber == null ? this.phoneNumber : phoneNumber.value,
      accountRepresentativeID: accountRepresentativeID == null ? this.accountRepresentativeID : accountRepresentativeID.value
    );
  }
  
  Customer.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _name = json['name'],
      _phoneNumber = json['phoneNumber'],
      _accountRepresentativeID = json['accountRepresentativeID'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'name': _name, 'phoneNumber': _phoneNumber, 'accountRepresentativeID': _accountRepresentativeID
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'name': _name,
    'phoneNumber': _phoneNumber,
    'accountRepresentativeID': _accountRepresentativeID
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final PHONENUMBER = amplify_core.QueryField(fieldName: \\"phoneNumber\\");
  static final ACCOUNTREPRESENTATIVEID = amplify_core.QueryField(fieldName: \\"accountRepresentativeID\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"Customer\\";
    modelSchemaDefinition.pluralName = \\"Customers\\";
    
    modelSchemaDefinition.indexes = [
      amplify_core.ModelIndex(fields: const [\\"accountRepresentativeID\\"], name: \\"byRepresentative\\")
    ];
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Customer.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Customer.PHONENUMBER,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: Customer.ACCOUNTREPRESENTATIVEID,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _CustomerModelType extends amplify_core.ModelType<Customer> {
  const _CustomerModelType();
  
  @override
  Customer fromJson(Map<String, dynamic> jsonData) {
    return Customer.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'Customer';
  }
}"
`;

exports[`AppSyncDartVisitor - GQLv2 Regression Tests model indexes should correct indexes for @primaryKey and @index directive 1`] = `
"/*
* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the \\"License\\").
* You may not use this file except in compliance with the License.
* A copy of the License is located at
*
*  http://aws.amazon.com/apache2.0
*
* or in the \\"license\\" file accompanying this file. This file is distributed
* on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated class representing the ModelWithPrimaryKey type in your schema. */
class ModelWithPrimaryKey extends amplify_core.Model {
  static const classType = const _ModelWithPrimaryKeyModelType();
  final String id;
  final String? _productID;
  final String? _name;
  final String? _content;
  final String? _albumID;
  final String? _categoryID;

  @override
  getInstanceType() => classType;
  
  @override
  String getId() {
    return id;
  }
  
  String get productID {
    try {
      return _productID!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String get name {
    try {
      return _name!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String? get content {
    return _content;
  }
  
  String get albumID {
    try {
      return _albumID!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  String get categoryID {
    try {
      return _categoryID!;
    } catch(e) {
      throw amplify_core.AmplifyCodeGenModelException(
          amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastExceptionMessage,
          recoverySuggestion:
            amplify_core.AmplifyExceptionMessages.codeGenRequiredFieldForceCastRecoverySuggestion,
          underlyingException: e.toString()
          );
    }
  }
  
  const ModelWithPrimaryKey._internal({required this.id, required productID, required name, content, required albumID, required categoryID}): _productID = productID, _name = name, _content = content, _albumID = albumID, _categoryID = categoryID;
  
  factory ModelWithPrimaryKey({String? id, required String productID, required String name, String? content, required String albumID, required String categoryID}) {
    return ModelWithPrimaryKey._internal(
      id: id == null ? amplify_core.UUID.getUUID() : id,
      productID: productID,
      name: name,
      content: content,
      albumID: albumID,
      categoryID: categoryID);
  }
  
  bool equals(Object other) {
    return this == other;
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is ModelWithPrimaryKey &&
      id == other.id &&
      _productID == other._productID &&
      _name == other._name &&
      _content == other._content &&
      _albumID == other._albumID &&
      _categoryID == other._categoryID;
  }
  
  @override
  int get hashCode => toString().hashCode;
  
  @override
  String toString() {
    var buffer = new StringBuffer();
    
    buffer.write(\\"ModelWithPrimaryKey {\\");
    buffer.write(\\"id=\\" + \\"$id\\" + \\", \\");
    buffer.write(\\"productID=\\" + \\"$_productID\\" + \\", \\");
    buffer.write(\\"name=\\" + \\"$_name\\" + \\", \\");
    buffer.write(\\"content=\\" + \\"$_content\\" + \\", \\");
    buffer.write(\\"albumID=\\" + \\"$_albumID\\" + \\", \\");
    buffer.write(\\"categoryID=\\" + \\"$_categoryID\\");
    buffer.write(\\"}\\");
    
    return buffer.toString();
  }
  
  ModelWithPrimaryKey copyWith({String? id, String? productID, String? name, String? content, String? albumID, String? categoryID}) {
    return ModelWithPrimaryKey(
      id: id ?? this.id,
      productID: productID ?? this.productID,
      name: name ?? this.name,
      content: content ?? this.content,
      albumID: albumID ?? this.albumID,
      categoryID: categoryID ?? this.categoryID);
  }
  
  ModelWithPrimaryKey copyWithModelFieldValues({
    ModelFieldValue<String>? id,
    ModelFieldValue<String>? productID,
    ModelFieldValue<String>? name,
    ModelFieldValue<String?>? content,
    ModelFieldValue<String>? albumID,
    ModelFieldValue<String>? categoryID
  }) {
    return ModelWithPrimaryKey(
      id: id == null ? this.id : id.value,
      productID: productID == null ? this.productID : productID.value,
      name: name == null ? this.name : name.value,
      content: content == null ? this.content : content.value,
      albumID: albumID == null ? this.albumID : albumID.value,
      categoryID: categoryID == null ? this.categoryID : categoryID.value
    );
  }
  
  ModelWithPrimaryKey.fromJson(Map<String, dynamic> json)  
    : id = json['id'],
      _productID = json['productID'],
      _name = json['name'],
      _content = json['content'],
      _albumID = json['albumID'],
      _categoryID = json['categoryID'];
  
  Map<String, dynamic> toJson() => {
    'id': id, 'productID': _productID, 'name': _name, 'content': _content, 'albumID': _albumID, 'categoryID': _categoryID
  };
  
  Map<String, Object?> toMap() => {
    'id': id,
    'productID': _productID,
    'name': _name,
    'content': _content,
    'albumID': _albumID,
    'categoryID': _categoryID
  };

  static final ID = amplify_core.QueryField(fieldName: \\"id\\");
  static final PRODUCTID = amplify_core.QueryField(fieldName: \\"productID\\");
  static final NAME = amplify_core.QueryField(fieldName: \\"name\\");
  static final CONTENT = amplify_core.QueryField(fieldName: \\"content\\");
  static final ALBUMID = amplify_core.QueryField(fieldName: \\"albumID\\");
  static final CATEGORYID = amplify_core.QueryField(fieldName: \\"categoryID\\");
  static var schema = amplify_core.Model.defineSchema(define: (amplify_core.ModelSchemaDefinition modelSchemaDefinition) {
    modelSchemaDefinition.name = \\"ModelWithPrimaryKey\\";
    modelSchemaDefinition.pluralName = \\"ModelWithPrimaryKeys\\";
    
    modelSchemaDefinition.indexes = [
      amplify_core.ModelIndex(fields: const [\\"productID\\"], name: null),
      amplify_core.ModelIndex(fields: const [\\"albumID\\", \\"name\\"], name: \\"byAlbum\\"),
      amplify_core.ModelIndex(fields: const [\\"categoryID\\", \\"name\\", \\"content\\"], name: \\"byCategory\\")
    ];
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.id());
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: ModelWithPrimaryKey.PRODUCTID,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: ModelWithPrimaryKey.NAME,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: ModelWithPrimaryKey.CONTENT,
      isRequired: false,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: ModelWithPrimaryKey.ALBUMID,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
    
    modelSchemaDefinition.addField(amplify_core.ModelFieldDefinition.field(
      key: ModelWithPrimaryKey.CATEGORYID,
      isRequired: true,
      ofType: amplify_core.ModelFieldType(amplify_core.ModelFieldTypeEnum.string)
    ));
  });
}

class _ModelWithPrimaryKeyModelType extends amplify_core.ModelType<ModelWithPrimaryKey> {
  const _ModelWithPrimaryKeyModelType();
  
  @override
  ModelWithPrimaryKey fromJson(Map<String, dynamic> jsonData) {
    return ModelWithPrimaryKey.fromJson(jsonData);
  }
  
  @override
  String modelName() {
    return 'ModelWithPrimaryKey';
  }
}"
`;
