// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on explicit hasMany belongs to relationship @belongsTo 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Post, Comment } = initSchema(schema);

export {
  Post,
  Comment
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on explicit hasMany belongs to relationship @belongsTo 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled, AsyncCollection } from \\"@aws-amplify/datastore\\";

type PostMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type CommentMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerPost {
  readonly id: string;
  readonly title: string;
  readonly comments?: (Comment | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPost {
  readonly id: string;
  readonly title: string;
  readonly comments: AsyncCollection<Comment>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Post = LazyLoading extends Disabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post, PostMetaData>) => Post) & Post & {
  static copyOf(source: Post, mutator: (draft: MutableModel<Post, PostMetaData>) => MutableModel<Post, PostMetaData> | void): Post;
}

class EagerComment {
  readonly id: string;
  readonly content: string;
  readonly post?: Post | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyComment {
  readonly id: string;
  readonly content: string;
  readonly post: Promise<Post | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Comment = LazyLoading extends Disabled ? EagerComment : LazyComment

export declare const Comment: (new (init: ModelInit<Comment, CommentMetaData>) => Comment) & Comment & {
  static copyOf(source: Comment, mutator: (draft: MutableModel<Comment, CommentMetaData>) => MutableModel<Comment, CommentMetaData> | void): Comment;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on explicit hasOne belongs to relationship @belongsTo 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Project2, Team2 } = initSchema(schema);

export {
  Project2,
  Team2
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on explicit hasOne belongs to relationship @belongsTo 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled } from \\"@aws-amplify/datastore\\";

type Project2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type Team2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerProject2 {
  readonly id: string;
  readonly name?: string | null;
  readonly team?: Team2 | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly project2TeamId?: string | null;
  
}

class LazyProject2 {
  readonly id: string;
  readonly name?: string | null;
  readonly team: Promise<Team2 | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly project2TeamId?: string | null;
  
}

export declare type Project2 = LazyLoading extends Disabled ? EagerProject2 : LazyProject2

export declare const Project2: (new (init: ModelInit<Project2, Project2MetaData>) => Project2) & Project2 & {
  static copyOf(source: Project2, mutator: (draft: MutableModel<Project2, Project2MetaData>) => MutableModel<Project2, Project2MetaData> | void): Project2;
}

class EagerTeam2 {
  readonly id: string;
  readonly name: string;
  readonly project?: Project2 | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyTeam2 {
  readonly id: string;
  readonly name: string;
  readonly project: Promise<Project2 | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Team2 = LazyLoading extends Disabled ? EagerTeam2 : LazyTeam2

export declare const Team2: (new (init: ModelInit<Team2, Team2MetaData>) => Team2) & Team2 & {
  static copyOf(source: Team2, mutator: (draft: MutableModel<Team2, Team2MetaData>) => MutableModel<Team2, Team2MetaData> | void): Team2;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on implicit hasMany belongs to relationship @belongsTo (extended) 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Blog7V2, Post7V2, Comment7V2 } = initSchema(schema);

export {
  Blog7V2,
  Post7V2,
  Comment7V2
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on implicit hasMany belongs to relationship @belongsTo (extended) 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled, AsyncCollection } from \\"@aws-amplify/datastore\\";

type Blog7V2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type Post7V2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type Comment7V2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerBlog7V2 {
  readonly id: string;
  readonly name: string;
  readonly posts?: (Post7V2 | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyBlog7V2 {
  readonly id: string;
  readonly name: string;
  readonly posts: AsyncCollection<Post7V2>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Blog7V2 = LazyLoading extends Disabled ? EagerBlog7V2 : LazyBlog7V2

export declare const Blog7V2: (new (init: ModelInit<Blog7V2, Blog7V2MetaData>) => Blog7V2) & Blog7V2 & {
  static copyOf(source: Blog7V2, mutator: (draft: MutableModel<Blog7V2, Blog7V2MetaData>) => MutableModel<Blog7V2, Blog7V2MetaData> | void): Blog7V2;
}

class EagerPost7V2 {
  readonly id: string;
  readonly title: string;
  readonly blog?: Blog7V2 | null;
  readonly comments?: (Comment7V2 | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPost7V2 {
  readonly id: string;
  readonly title: string;
  readonly blog: Promise<Blog7V2 | undefined>;
  readonly comments: AsyncCollection<Comment7V2>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Post7V2 = LazyLoading extends Disabled ? EagerPost7V2 : LazyPost7V2

export declare const Post7V2: (new (init: ModelInit<Post7V2, Post7V2MetaData>) => Post7V2) & Post7V2 & {
  static copyOf(source: Post7V2, mutator: (draft: MutableModel<Post7V2, Post7V2MetaData>) => MutableModel<Post7V2, Post7V2MetaData> | void): Post7V2;
}

class EagerComment7V2 {
  readonly id: string;
  readonly content?: string | null;
  readonly post?: Post7V2 | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyComment7V2 {
  readonly id: string;
  readonly content?: string | null;
  readonly post: Promise<Post7V2 | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Comment7V2 = LazyLoading extends Disabled ? EagerComment7V2 : LazyComment7V2

export declare const Comment7V2: (new (init: ModelInit<Comment7V2, Comment7V2MetaData>) => Comment7V2) & Comment7V2 & {
  static copyOf(source: Comment7V2, mutator: (draft: MutableModel<Comment7V2, Comment7V2MetaData>) => MutableModel<Comment7V2, Comment7V2MetaData> | void): Comment7V2;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on implicit hasOne belongs to relationship @belongsTo 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Project, Team } = initSchema(schema);

export {
  Project,
  Team
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on implicit hasOne belongs to relationship @belongsTo 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled } from \\"@aws-amplify/datastore\\";

type ProjectMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type TeamMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerProject {
  readonly id: string;
  readonly name?: string | null;
  readonly team?: Team | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  
}

class LazyProject {
  readonly id: string;
  readonly name?: string | null;
  readonly team: Promise<Team | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  
}

export declare type Project = LazyLoading extends Disabled ? EagerProject : LazyProject

export declare const Project: (new (init: ModelInit<Project, ProjectMetaData>) => Project) & Project & {
  static copyOf(source: Project, mutator: (draft: MutableModel<Project, ProjectMetaData>) => MutableModel<Project, ProjectMetaData> | void): Project;
}

class EagerTeam {
  readonly id: string;
  readonly name: string;
  readonly project?: Project | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyTeam {
  readonly id: string;
  readonly name: string;
  readonly project: Promise<Project | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Team = LazyLoading extends Disabled ? EagerTeam : LazyTeam

export declare const Team: (new (init: ModelInit<Team, TeamMetaData>) => Team) & Team & {
  static copyOf(source: Team, mutator: (draft: MutableModel<Team, TeamMetaData>) => MutableModel<Team, TeamMetaData> | void): Team;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on many to many relationship @manyToMany 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Post, Tag, PostTags } = initSchema(schema);

export {
  Post,
  Tag,
  PostTags
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on many to many relationship @manyToMany 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled, AsyncCollection } from \\"@aws-amplify/datastore\\";

type PostMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type TagMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type PostTagsMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerPost {
  readonly id: string;
  readonly title: string;
  readonly content?: string | null;
  readonly tags?: (PostTags | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPost {
  readonly id: string;
  readonly title: string;
  readonly content?: string | null;
  readonly tags: AsyncCollection<PostTags>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Post = LazyLoading extends Disabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post, PostMetaData>) => Post) & Post & {
  static copyOf(source: Post, mutator: (draft: MutableModel<Post, PostMetaData>) => MutableModel<Post, PostMetaData> | void): Post;
}

class EagerTag {
  readonly id: string;
  readonly label: string;
  readonly posts?: (PostTags | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyTag {
  readonly id: string;
  readonly label: string;
  readonly posts: AsyncCollection<PostTags>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Tag = LazyLoading extends Disabled ? EagerTag : LazyTag

export declare const Tag: (new (init: ModelInit<Tag, TagMetaData>) => Tag) & Tag & {
  static copyOf(source: Tag, mutator: (draft: MutableModel<Tag, TagMetaData>) => MutableModel<Tag, TagMetaData> | void): Tag;
}

class EagerPostTags {
  readonly id: string;
  readonly post: Post;
  readonly tag: Tag;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPostTags {
  readonly id: string;
  readonly post: Promise<Post>;
  readonly tag: Promise<Tag>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type PostTags = LazyLoading extends Disabled ? EagerPostTags : LazyPostTags

export declare const PostTags: (new (init: ModelInit<PostTags, PostTagsMetaData>) => PostTags) & PostTags & {
  static copyOf(source: PostTags, mutator: (draft: MutableModel<PostTags, PostTagsMetaData>) => MutableModel<PostTags, PostTagsMetaData> | void): PostTags;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on record creation and updating timestamp 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Todo } = initSchema(schema);

export {
  Todo
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on record creation and updating timestamp 2`] = `
"import { ModelInit, MutableModel } from \\"@aws-amplify/datastore\\";

type TodoMetaData = {
  readOnlyFields: 'createdOn' | 'updatedOn';
}

class EagerTodo {
  readonly id: string;
  readonly content?: string | null;
  readonly createdOn?: string | null;
  readonly updatedOn?: string | null;
  
}

class LazyTodo {
  readonly id: string;
  readonly content?: string | null;
  readonly createdOn?: string | null;
  readonly updatedOn?: string | null;
  
}

export declare type Todo = LazyLoading extends Disabled ? EagerTodo : LazyTodo

export declare const Todo: (new (init: ModelInit<Todo, TodoMetaData>) => Todo) & Todo & {
  static copyOf(source: Todo, mutator: (draft: MutableModel<Todo, TodoMetaData>) => MutableModel<Todo, TodoMetaData> | void): Todo;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional explicit has many relationship @hasMany 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Post2, Comment2 } = initSchema(schema);

export {
  Post2,
  Comment2
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional explicit has many relationship @hasMany 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled, AsyncCollection } from \\"@aws-amplify/datastore\\";

type Post2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type Comment2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerPost2 {
  readonly id: string;
  readonly title: string;
  readonly comments?: (Comment2 | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPost2 {
  readonly id: string;
  readonly title: string;
  readonly comments: AsyncCollection<Comment2>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Post2 = LazyLoading extends Disabled ? EagerPost2 : LazyPost2

export declare const Post2: (new (init: ModelInit<Post2, Post2MetaData>) => Post2) & Post2 & {
  static copyOf(source: Post2, mutator: (draft: MutableModel<Post2, Post2MetaData>) => MutableModel<Post2, Post2MetaData> | void): Post2;
}

class EagerComment2 {
  readonly id: string;
  readonly postID: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyComment2 {
  readonly id: string;
  readonly postID: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Comment2 = LazyLoading extends Disabled ? EagerComment2 : LazyComment2

export declare const Comment2: (new (init: ModelInit<Comment2, Comment2MetaData>) => Comment2) & Comment2 & {
  static copyOf(source: Comment2, mutator: (draft: MutableModel<Comment2, Comment2MetaData>) => MutableModel<Comment2, Comment2MetaData> | void): Comment2;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional explicit has one relationship @hasOne 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Project2, Team2 } = initSchema(schema);

export {
  Project2,
  Team2
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional explicit has one relationship @hasOne 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled } from \\"@aws-amplify/datastore\\";

type Project2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type Team2MetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerProject2 {
  readonly id: string;
  readonly name?: string | null;
  readonly teamID?: string | null;
  readonly team?: Team2 | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyProject2 {
  readonly id: string;
  readonly name?: string | null;
  readonly teamID?: string | null;
  readonly team: Promise<Team2 | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Project2 = LazyLoading extends Disabled ? EagerProject2 : LazyProject2

export declare const Project2: (new (init: ModelInit<Project2, Project2MetaData>) => Project2) & Project2 & {
  static copyOf(source: Project2, mutator: (draft: MutableModel<Project2, Project2MetaData>) => MutableModel<Project2, Project2MetaData> | void): Project2;
}

class EagerTeam2 {
  readonly id: string;
  readonly name: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyTeam2 {
  readonly id: string;
  readonly name: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Team2 = LazyLoading extends Disabled ? EagerTeam2 : LazyTeam2

export declare const Team2: (new (init: ModelInit<Team2, Team2MetaData>) => Team2) & Team2 & {
  static copyOf(source: Team2, mutator: (draft: MutableModel<Team2, Team2MetaData>) => MutableModel<Team2, Team2MetaData> | void): Team2;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional implicit has many relationship @hasMany 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Post, Comment } = initSchema(schema);

export {
  Post,
  Comment
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional implicit has many relationship @hasMany 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled, AsyncCollection } from \\"@aws-amplify/datastore\\";

type PostMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type CommentMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerPost {
  readonly id: string;
  readonly title: string;
  readonly comments?: (Comment | null)[] | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyPost {
  readonly id: string;
  readonly title: string;
  readonly comments: AsyncCollection<Comment>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Post = LazyLoading extends Disabled ? EagerPost : LazyPost

export declare const Post: (new (init: ModelInit<Post, PostMetaData>) => Post) & Post & {
  static copyOf(source: Post, mutator: (draft: MutableModel<Post, PostMetaData>) => MutableModel<Post, PostMetaData> | void): Post;
}

class EagerComment {
  readonly id: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsId?: string | null;
  
}

class LazyComment {
  readonly id: string;
  readonly content: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly postCommentsId?: string | null;
  
}

export declare type Comment = LazyLoading extends Disabled ? EagerComment : LazyComment

export declare const Comment: (new (init: ModelInit<Comment, CommentMetaData>) => Comment) & Comment & {
  static copyOf(source: Comment, mutator: (draft: MutableModel<Comment, CommentMetaData>) => MutableModel<Comment, CommentMetaData> | void): Comment;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional implicit has one relationship @hasOne 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Project, Team } = initSchema(schema);

export {
  Project,
  Team
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works on uni-directional implicit has one relationship @hasOne 2`] = `
"import { ModelInit, MutableModel, LazyLoading, Enabled, Disabled } from \\"@aws-amplify/datastore\\";

type ProjectMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

type TeamMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerProject {
  readonly id: string;
  readonly name?: string | null;
  readonly team?: Team | null;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  
}

class LazyProject {
  readonly id: string;
  readonly name?: string | null;
  readonly team: Promise<Team | undefined>;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  readonly projectTeamId?: string | null;
  
}

export declare type Project = LazyLoading extends Disabled ? EagerProject : LazyProject

export declare const Project: (new (init: ModelInit<Project, ProjectMetaData>) => Project) & Project & {
  static copyOf(source: Project, mutator: (draft: MutableModel<Project, ProjectMetaData>) => MutableModel<Project, ProjectMetaData> | void): Project;
}

class EagerTeam {
  readonly id: string;
  readonly name: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyTeam {
  readonly id: string;
  readonly name: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Team = LazyLoading extends Disabled ? EagerTeam : LazyTeam

export declare const Team: (new (init: ModelInit<Team, TeamMetaData>) => Team) & Team & {
  static copyOf(source: Team, mutator: (draft: MutableModel<Team, TeamMetaData>) => MutableModel<Team, TeamMetaData> | void): Team;
}"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works when configuring a secondary index 1`] = `
"// @ts-check
import { initSchema } from '@aws-amplify/datastore';
import { schema } from './schema';



const { Customer } = initSchema(schema);

export {
  Customer
};"
`;

exports[`AppSyncJavascriptVisitor - GQLv2 Regression Tests Works when configuring a secondary index 2`] = `
"import { ModelInit, MutableModel } from \\"@aws-amplify/datastore\\";

type CustomerMetaData = {
  readOnlyFields: 'createdAt' | 'updatedAt';
}

class EagerCustomer {
  readonly id: string;
  readonly name: string;
  readonly phoneNumber?: string | null;
  readonly accountRepresentativeID: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

class LazyCustomer {
  readonly id: string;
  readonly name: string;
  readonly phoneNumber?: string | null;
  readonly accountRepresentativeID: string;
  readonly createdAt?: string | null;
  readonly updatedAt?: string | null;
  
}

export declare type Customer = LazyLoading extends Disabled ? EagerCustomer : LazyCustomer

export declare const Customer: (new (init: ModelInit<Customer, CustomerMetaData>) => Customer) & Customer & {
  static copyOf(source: Customer, mutator: (draft: MutableModel<Customer, CustomerMetaData>) => MutableModel<Customer, CustomerMetaData> | void): Customer;
}"
`;
