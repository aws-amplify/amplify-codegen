// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Angular code generation should generate simple query operations 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import { Client, generateClient, GraphQLResult } from \\"aws-amplify/api\\";
import { Observable } from \\"rxjs\\";

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id: string;
  // The name of the character
  name: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this character appears in
  appearsIn: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id: string;
  // What this human calls themselves
  name: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this human appears in
  appearsIn: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor: string;
  // The character represented by this friendship edge
  node?: Character | null;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
};

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id: string;
  // The name of the starship
  name: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id: string;
  // What others call this droid
  name: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this droid appears in
  appearsIn: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroNameQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  public client: Client;
  constructor() {
    this.client = generateClient();
  }
  async HeroName(): Promise<HeroNameQuery> {
    const statement = \`query HeroName {
        hero {
          __typename
          name
        }
      }\`;
    const response = (await this.client.graphql({ query: statement })) as any;
    return <HeroNameQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation should generate simple query operations including input variables 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import { Client, generateClient, GraphQLResult } from \\"aws-amplify/api\\";
import { Observable } from \\"rxjs\\";

// The episodes in the Star Wars trilogy
export enum Episode {
  NEWHOPE = \\"NEWHOPE\\", // Star Wars Episode IV: A New Hope, released in 1977.
  EMPIRE = \\"EMPIRE\\", // Star Wars Episode V: The Empire Strikes Back, released in 1980.
  JEDI = \\"JEDI\\" // Star Wars Episode VI: Return of the Jedi, released in 1983.
}

export type Character = {
  __typename: \\"Character\\";
  // The ID of the character
  id: string;
  // The name of the character
  name: string;
  // The friends of the character, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the character exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this character appears in
  appearsIn: Array<Episode | null>;
};

export type Human = {
  __typename: \\"Human\\";
  // The ID of the human
  id: string;
  // What this human calls themselves
  name: string;
  // The home planet of the human, or null if unknown
  homePlanet?: string | null;
  // Height in the preferred unit, default is meters
  height?: number | null;
  // Mass in kilograms, or null if unknown
  mass?: number | null;
  // This human's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the human exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this human appears in
  appearsIn: Array<Episode | null>;
  // A list of starships this person has piloted, or an empty list if none
  starships?: Array<Starship | null> | null;
};

export type FriendsConnection = {
  __typename: \\"FriendsConnection\\";
  // The total number of friends
  totalCount?: number | null;
  // The edges for each of the character's friends.
  edges?: Array<FriendsEdge | null> | null;
  // A list of the friends, as a convenience when edges are not needed.
  friends?: Array<Character | null> | null;
  // Information for paginating this connection
  pageInfo: PageInfo;
};

export type FriendsEdge = {
  __typename: \\"FriendsEdge\\";
  // A cursor used for pagination
  cursor: string;
  // The character represented by this friendship edge
  node?: Character | null;
};

export type PageInfo = {
  __typename: \\"PageInfo\\";
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
};

export type Starship = {
  __typename: \\"Starship\\";
  // The ID of the starship
  id: string;
  // The name of the starship
  name: string;
  // Length of the starship, along the longest axis
  length?: number | null;
  coordinates?: Array<Array<number>> | null;
};

export type Droid = {
  __typename: \\"Droid\\";
  // The ID of the droid
  id: string;
  // What others call this droid
  name: string;
  // This droid's friends, or an empty list if they have none
  friends?: Array<Character | null> | null;
  // The friends of the droid exposed as a connection with edges
  friendsConnection: FriendsConnection;
  // The movies this droid appears in
  appearsIn: Array<Episode | null>;
  // This droid's primary function
  primaryFunction?: string | null;
};

export type HeroNameQuery = {
  __typename: \\"Character\\";
  // The name of the character
  name: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  public client: Client;
  constructor() {
    this.client = generateClient();
  }
  async HeroName(episode?: Episode): Promise<HeroNameQuery> {
    const statement = \`query HeroName($episode: Episode) {
        hero(episode: $episode) {
          __typename
          name
        }
      }\`;
    const gqlAPIServiceArguments: any = {};
    if (episode) {
      gqlAPIServiceArguments.episode = episode;
    }
    const response = (await this.client.graphql({
      query: statement,
      variables: gqlAPIServiceArguments
    })) as any;
    return <HeroNameQuery>response.data.hero;
  }
}
"
`;

exports[`Angular code generation should generate subscriptions 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import { Client, generateClient, GraphQLResult } from \\"aws-amplify/api\\";
import { Observable } from \\"rxjs\\";

export type __SubscriptionContainer = {
  onCreateRestaurant: OnCreateRestaurantSubscription;
};

export type Restaurant = {
  __typename: \\"Restaurant\\";
  id: string;
  name: string;
  description: string;
  city: string;
};

export type OnCreateRestaurantSubscription = {
  __typename: \\"Restaurant\\";
  id: string;
  name: string;
  description: string;
  city: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  public client: Client;
  constructor() {
    this.client = generateClient();
  }
  OnCreateRestaurantListener(): Observable<
    GraphQLResult<Pick<__SubscriptionContainer, \\"onCreateRestaurant\\">>
  > {
    return this.client.graphql({
      query: \`subscription OnCreateRestaurant {
        onCreateRestaurant {
          __typename
          id
          name
          description
          city
        }
      }\`
    }) as any;
  }
}
"
`;

exports[`Angular code generation should generate subscriptions with parameters 1`] = `
"/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
import { Injectable } from \\"@angular/core\\";
import { Client, generateClient, GraphQLResult } from \\"aws-amplify/api\\";
import { Observable } from \\"rxjs\\";

export type __SubscriptionContainer = {
  onCreateRestaurant: OnCreateRestaurantSubscription;
};

export type Restaurant = {
  __typename: \\"Restaurant\\";
  id: string;
  name: string;
  description: string;
  city: string;
  owner?: string | null;
  createdAt: string;
  updatedAt: string;
};

export type OnCreateRestaurantSubscription = {
  __typename: \\"Restaurant\\";
  id: string;
  name: string;
  description: string;
  city: string;
  owner?: string | null;
  createdAt: string;
  updatedAt: string;
};

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  public client: Client;
  constructor() {
    this.client = generateClient();
  }
  OnCreateRestaurantListener(
    owner: string
  ): Observable<
    GraphQLResult<Pick<__SubscriptionContainer, \\"onCreateRestaurant\\">>
  > {
    const statement = \`subscription OnCreateRestaurant($owner: String!) {
        onCreateRestaurant(owner: $owner) {
          __typename
          id
          name
          description
          city
          owner
          createdAt
          updatedAt
        }
      }\`;
    const gqlAPIServiceArguments: any = {
      owner
    };
    return this.client.graphql({
      query: statement,
      variables: gqlAPIServiceArguments
    }) as any;
  }
}
"
`;
